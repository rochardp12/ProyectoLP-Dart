[
    {
        "label": "generators",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "ply.lex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ply.yacc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "tokens",
        "importPath": "lexico",
        "description": "lexico",
        "isExtraImport": true,
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "Macro",
        "kind": 6,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "class Macro(object):\n    def __init__(self,name,value,arglist=None,variadic=False):\n        self.name = name\n        self.value = value\n        self.arglist = arglist\n        self.variadic = variadic\n        if variadic:\n            self.vararg = arglist[-1]\n        self.source = None\n# ------------------------------------------------------------------",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "Preprocessor",
        "kind": 6,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "class Preprocessor(object):\n    def __init__(self,lexer=None):\n        if lexer is None:\n            lexer = lex.lexer\n        self.lexer = lexer\n        self.macros = { }\n        self.path = []\n        self.temp_path = []\n        # Probe the lexer for selected tokens\n        self.lexprobe()",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "t_CPP_WS",
        "kind": 2,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "def t_CPP_WS(t):\n    r'\\s+'\n    t.lexer.lineno += t.value.count(\"\\n\")\n    return t\nt_CPP_POUND = r'\\#'\nt_CPP_DPOUND = r'\\#\\#'\n# Identifier\nt_CPP_ID = r'[A-Za-z_][\\w_]*'\n# Integer literal\ndef CPP_INTEGER(t):",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "CPP_INTEGER",
        "kind": 2,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "def CPP_INTEGER(t):\n    r'(((((0x)|(0X))[0-9a-fA-F]+)|(\\d+))([uU][lL]|[lL][uU]|[uU]|[lL])?)'\n    return t\nt_CPP_INTEGER = CPP_INTEGER\n# Floating literal\nt_CPP_FLOAT = r'((\\d+)(\\.\\d+)(e(\\+|-)?(\\d+))? | (\\d+)e(\\+|-)?(\\d+))([lL]|[fF])?'\n# String literal\ndef t_CPP_STRING(t):\n    r'\\\"([^\\\\\\n]|(\\\\(.|\\n)))*?\\\"'\n    t.lexer.lineno += t.value.count(\"\\n\")",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "t_CPP_STRING",
        "kind": 2,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "def t_CPP_STRING(t):\n    r'\\\"([^\\\\\\n]|(\\\\(.|\\n)))*?\\\"'\n    t.lexer.lineno += t.value.count(\"\\n\")\n    return t\n# Character constant 'c' or L'c'\ndef t_CPP_CHAR(t):\n    r'(L)?\\'([^\\\\\\n]|(\\\\(.|\\n)))*?\\''\n    t.lexer.lineno += t.value.count(\"\\n\")\n    return t\n# Comment",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "t_CPP_CHAR",
        "kind": 2,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "def t_CPP_CHAR(t):\n    r'(L)?\\'([^\\\\\\n]|(\\\\(.|\\n)))*?\\''\n    t.lexer.lineno += t.value.count(\"\\n\")\n    return t\n# Comment\ndef t_CPP_COMMENT1(t):\n    r'(/\\*(.|\\n)*?\\*/)'\n    ncr = t.value.count(\"\\n\")\n    t.lexer.lineno += ncr\n    # replace with one space or a number of '\\n'",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "t_CPP_COMMENT1",
        "kind": 2,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "def t_CPP_COMMENT1(t):\n    r'(/\\*(.|\\n)*?\\*/)'\n    ncr = t.value.count(\"\\n\")\n    t.lexer.lineno += ncr\n    # replace with one space or a number of '\\n'\n    t.type = 'CPP_WS'; t.value = '\\n' * ncr if ncr else ' '\n    return t\n# Line comment\ndef t_CPP_COMMENT2(t):\n    r'(//.*?(\\n|$))'",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "t_CPP_COMMENT2",
        "kind": 2,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "def t_CPP_COMMENT2(t):\n    r'(//.*?(\\n|$))'\n    # replace with '/n'\n    t.type = 'CPP_WS'; t.value = '\\n'\n    return t\ndef t_error(t):\n    t.type = t.value[0]\n    t.value = t.value[0]\n    t.lexer.skip(1)\n    return t",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "t_error",
        "kind": 2,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "def t_error(t):\n    t.type = t.value[0]\n    t.value = t.value[0]\n    t.lexer.skip(1)\n    return t\nimport re\nimport copy\nimport time\nimport os.path\n# -----------------------------------------------------------------------------",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "trigraph",
        "kind": 2,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "def trigraph(input):\n    return _trigraph_pat.sub(lambda g: _trigraph_rep[g.group()[-1]],input)\n# ------------------------------------------------------------------\n# Macro object\n#\n# This object holds information about preprocessor macros\n#\n#    .name      - Macro name (string)\n#    .value     - Macro value (a list of tokens)\n#    .arglist   - List of argument names",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "tokens",
        "kind": 5,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "tokens = (\n   'CPP_ID','CPP_INTEGER', 'CPP_FLOAT', 'CPP_STRING', 'CPP_CHAR', 'CPP_WS', 'CPP_COMMENT1', 'CPP_COMMENT2', 'CPP_POUND','CPP_DPOUND'\n)\nliterals = \"+-*/%|&~^<>=!?()[]{}.,;:\\\\\\'\\\"\"\n# Whitespace\ndef t_CPP_WS(t):\n    r'\\s+'\n    t.lexer.lineno += t.value.count(\"\\n\")\n    return t\nt_CPP_POUND = r'\\#'",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "literals",
        "kind": 5,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "literals = \"+-*/%|&~^<>=!?()[]{}.,;:\\\\\\'\\\"\"\n# Whitespace\ndef t_CPP_WS(t):\n    r'\\s+'\n    t.lexer.lineno += t.value.count(\"\\n\")\n    return t\nt_CPP_POUND = r'\\#'\nt_CPP_DPOUND = r'\\#\\#'\n# Identifier\nt_CPP_ID = r'[A-Za-z_][\\w_]*'",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "t_CPP_POUND",
        "kind": 5,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "t_CPP_POUND = r'\\#'\nt_CPP_DPOUND = r'\\#\\#'\n# Identifier\nt_CPP_ID = r'[A-Za-z_][\\w_]*'\n# Integer literal\ndef CPP_INTEGER(t):\n    r'(((((0x)|(0X))[0-9a-fA-F]+)|(\\d+))([uU][lL]|[lL][uU]|[uU]|[lL])?)'\n    return t\nt_CPP_INTEGER = CPP_INTEGER\n# Floating literal",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "t_CPP_DPOUND",
        "kind": 5,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "t_CPP_DPOUND = r'\\#\\#'\n# Identifier\nt_CPP_ID = r'[A-Za-z_][\\w_]*'\n# Integer literal\ndef CPP_INTEGER(t):\n    r'(((((0x)|(0X))[0-9a-fA-F]+)|(\\d+))([uU][lL]|[lL][uU]|[uU]|[lL])?)'\n    return t\nt_CPP_INTEGER = CPP_INTEGER\n# Floating literal\nt_CPP_FLOAT = r'((\\d+)(\\.\\d+)(e(\\+|-)?(\\d+))? | (\\d+)e(\\+|-)?(\\d+))([lL]|[fF])?'",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "t_CPP_ID",
        "kind": 5,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "t_CPP_ID = r'[A-Za-z_][\\w_]*'\n# Integer literal\ndef CPP_INTEGER(t):\n    r'(((((0x)|(0X))[0-9a-fA-F]+)|(\\d+))([uU][lL]|[lL][uU]|[uU]|[lL])?)'\n    return t\nt_CPP_INTEGER = CPP_INTEGER\n# Floating literal\nt_CPP_FLOAT = r'((\\d+)(\\.\\d+)(e(\\+|-)?(\\d+))? | (\\d+)e(\\+|-)?(\\d+))([lL]|[fF])?'\n# String literal\ndef t_CPP_STRING(t):",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "t_CPP_INTEGER",
        "kind": 5,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "t_CPP_INTEGER = CPP_INTEGER\n# Floating literal\nt_CPP_FLOAT = r'((\\d+)(\\.\\d+)(e(\\+|-)?(\\d+))? | (\\d+)e(\\+|-)?(\\d+))([lL]|[fF])?'\n# String literal\ndef t_CPP_STRING(t):\n    r'\\\"([^\\\\\\n]|(\\\\(.|\\n)))*?\\\"'\n    t.lexer.lineno += t.value.count(\"\\n\")\n    return t\n# Character constant 'c' or L'c'\ndef t_CPP_CHAR(t):",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "t_CPP_FLOAT",
        "kind": 5,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "t_CPP_FLOAT = r'((\\d+)(\\.\\d+)(e(\\+|-)?(\\d+))? | (\\d+)e(\\+|-)?(\\d+))([lL]|[fF])?'\n# String literal\ndef t_CPP_STRING(t):\n    r'\\\"([^\\\\\\n]|(\\\\(.|\\n)))*?\\\"'\n    t.lexer.lineno += t.value.count(\"\\n\")\n    return t\n# Character constant 'c' or L'c'\ndef t_CPP_CHAR(t):\n    r'(L)?\\'([^\\\\\\n]|(\\\\(.|\\n)))*?\\''\n    t.lexer.lineno += t.value.count(\"\\n\")",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "_trigraph_pat",
        "kind": 5,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "_trigraph_pat = re.compile(r'''\\?\\?[=/\\'\\(\\)\\!<>\\-]''')\n_trigraph_rep = {\n    '=':'#',\n    '/':'\\\\',\n    \"'\":'^',\n    '(':'[',\n    ')':']',\n    '!':'|',\n    '<':'{',\n    '>':'}',",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "_trigraph_rep",
        "kind": 5,
        "importPath": "ply.cpp",
        "description": "ply.cpp",
        "peekOfCode": "_trigraph_rep = {\n    '=':'#',\n    '/':'\\\\',\n    \"'\":'^',\n    '(':'[',\n    ')':']',\n    '!':'|',\n    '<':'{',\n    '>':'}',\n    '-':'~'",
        "detail": "ply.cpp",
        "documentation": {}
    },
    {
        "label": "t_COMMENT",
        "kind": 2,
        "importPath": "ply.ctokens",
        "description": "ply.ctokens",
        "peekOfCode": "def t_COMMENT(t):\n    r'/\\*(.|\\n)*?\\*/'\n    t.lexer.lineno += t.value.count('\\n')\n    return t\n# Comment (C++-Style)\ndef t_CPPCOMMENT(t):\n    r'//.*\\n'\n    t.lexer.lineno += 1\n    return t",
        "detail": "ply.ctokens",
        "documentation": {}
    },
    {
        "label": "t_CPPCOMMENT",
        "kind": 2,
        "importPath": "ply.ctokens",
        "description": "ply.ctokens",
        "peekOfCode": "def t_CPPCOMMENT(t):\n    r'//.*\\n'\n    t.lexer.lineno += 1\n    return t",
        "detail": "ply.ctokens",
        "documentation": {}
    },
    {
        "label": "tokens",
        "kind": 5,
        "importPath": "ply.ctokens",
        "description": "ply.ctokens",
        "peekOfCode": "tokens = [\n    # Literals (identifier, integer constant, float constant, string constant, char const)\n    'ID', 'TYPEID', 'INTEGER', 'FLOAT', 'STRING', 'CHARACTER',\n    # Operators (+,-,*,/,%,|,&,~,^,<<,>>, ||, &&, !, <, <=, >, >=, ==, !=)\n    'PLUS', 'MINUS', 'TIMES', 'DIVIDE', 'MODULO',\n    'OR', 'AND', 'NOT', 'XOR', 'LSHIFT', 'RSHIFT',\n    'LOR', 'LAND', 'LNOT',\n    'LT', 'LE', 'GT', 'GE', 'EQ', 'NE',\n    # Assignment (=, *=, /=, %=, +=, -=, <<=, >>=, &=, ^=, |=)\n    'EQUALS', 'TIMESEQUAL', 'DIVEQUAL', 'MODEQUAL', 'PLUSEQUAL', 'MINUSEQUAL',",
        "detail": "ply.ctokens",
        "documentation": {}
    },
    {
        "label": "t_ID",
        "kind": 5,
        "importPath": "ply.ctokens",
        "description": "ply.ctokens",
        "peekOfCode": "t_ID = r'[A-Za-z_][A-Za-z0-9_]*'\n# Integer literal\nt_INTEGER = r'\\d+([uU]|[lL]|[uU][lL]|[lL][uU])?'\n# Floating literal\nt_FLOAT = r'((\\d+)(\\.\\d+)(e(\\+|-)?(\\d+))? | (\\d+)e(\\+|-)?(\\d+))([lL]|[fF])?'\n# String literal\nt_STRING = r'\\\"([^\\\\\\n]|(\\\\.))*?\\\"'\n# Character constant 'c' or L'c'\nt_CHARACTER = r'(L)?\\'([^\\\\\\n]|(\\\\.))*?\\''\n# Comment (C-Style)",
        "detail": "ply.ctokens",
        "documentation": {}
    },
    {
        "label": "t_INTEGER",
        "kind": 5,
        "importPath": "ply.ctokens",
        "description": "ply.ctokens",
        "peekOfCode": "t_INTEGER = r'\\d+([uU]|[lL]|[uU][lL]|[lL][uU])?'\n# Floating literal\nt_FLOAT = r'((\\d+)(\\.\\d+)(e(\\+|-)?(\\d+))? | (\\d+)e(\\+|-)?(\\d+))([lL]|[fF])?'\n# String literal\nt_STRING = r'\\\"([^\\\\\\n]|(\\\\.))*?\\\"'\n# Character constant 'c' or L'c'\nt_CHARACTER = r'(L)?\\'([^\\\\\\n]|(\\\\.))*?\\''\n# Comment (C-Style)\ndef t_COMMENT(t):\n    r'/\\*(.|\\n)*?\\*/'",
        "detail": "ply.ctokens",
        "documentation": {}
    },
    {
        "label": "t_FLOAT",
        "kind": 5,
        "importPath": "ply.ctokens",
        "description": "ply.ctokens",
        "peekOfCode": "t_FLOAT = r'((\\d+)(\\.\\d+)(e(\\+|-)?(\\d+))? | (\\d+)e(\\+|-)?(\\d+))([lL]|[fF])?'\n# String literal\nt_STRING = r'\\\"([^\\\\\\n]|(\\\\.))*?\\\"'\n# Character constant 'c' or L'c'\nt_CHARACTER = r'(L)?\\'([^\\\\\\n]|(\\\\.))*?\\''\n# Comment (C-Style)\ndef t_COMMENT(t):\n    r'/\\*(.|\\n)*?\\*/'\n    t.lexer.lineno += t.value.count('\\n')\n    return t",
        "detail": "ply.ctokens",
        "documentation": {}
    },
    {
        "label": "t_STRING",
        "kind": 5,
        "importPath": "ply.ctokens",
        "description": "ply.ctokens",
        "peekOfCode": "t_STRING = r'\\\"([^\\\\\\n]|(\\\\.))*?\\\"'\n# Character constant 'c' or L'c'\nt_CHARACTER = r'(L)?\\'([^\\\\\\n]|(\\\\.))*?\\''\n# Comment (C-Style)\ndef t_COMMENT(t):\n    r'/\\*(.|\\n)*?\\*/'\n    t.lexer.lineno += t.value.count('\\n')\n    return t\n# Comment (C++-Style)\ndef t_CPPCOMMENT(t):",
        "detail": "ply.ctokens",
        "documentation": {}
    },
    {
        "label": "t_CHARACTER",
        "kind": 5,
        "importPath": "ply.ctokens",
        "description": "ply.ctokens",
        "peekOfCode": "t_CHARACTER = r'(L)?\\'([^\\\\\\n]|(\\\\.))*?\\''\n# Comment (C-Style)\ndef t_COMMENT(t):\n    r'/\\*(.|\\n)*?\\*/'\n    t.lexer.lineno += t.value.count('\\n')\n    return t\n# Comment (C++-Style)\ndef t_CPPCOMMENT(t):\n    r'//.*\\n'\n    t.lexer.lineno += 1",
        "detail": "ply.ctokens",
        "documentation": {}
    },
    {
        "label": "LexError",
        "kind": 6,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "peekOfCode": "class LexError(Exception):\n    def __init__(self, message, s):\n        self.args = (message,)\n        self.text = s\n# Token class.  This class is used to represent the tokens produced.\nclass LexToken(object):\n    def __str__(self):\n        return 'LexToken(%s,%r,%d,%d)' % (self.type, self.value, self.lineno, self.lexpos)\n    def __repr__(self):\n        return str(self)",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "LexToken",
        "kind": 6,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "peekOfCode": "class LexToken(object):\n    def __str__(self):\n        return 'LexToken(%s,%r,%d,%d)' % (self.type, self.value, self.lineno, self.lexpos)\n    def __repr__(self):\n        return str(self)\n# This object is a stand-in for a logging object created by the\n# logging module.\nclass PlyLogger(object):\n    def __init__(self, f):\n        self.f = f",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "PlyLogger",
        "kind": 6,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "peekOfCode": "class PlyLogger(object):\n    def __init__(self, f):\n        self.f = f\n    def critical(self, msg, *args, **kwargs):\n        self.f.write((msg % args) + '\\n')\n    def warning(self, msg, *args, **kwargs):\n        self.f.write('WARNING: ' + (msg % args) + '\\n')\n    def error(self, msg, *args, **kwargs):\n        self.f.write('ERROR: ' + (msg % args) + '\\n')\n    info = critical",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "NullLogger",
        "kind": 6,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "peekOfCode": "class NullLogger(object):\n    def __getattribute__(self, name):\n        return self\n    def __call__(self, *args, **kwargs):\n        return self\n# -----------------------------------------------------------------------------\n#                        === Lexing Engine ===\n#\n# The following Lexer class implements the lexer runtime.   There are only\n# a few public methods and attributes:",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "Lexer",
        "kind": 6,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "peekOfCode": "class Lexer:\n    def __init__(self):\n        self.lexre = None             # Master regular expression. This is a list of\n                                      # tuples (re, findex) where re is a compiled\n                                      # regular expression and findex is a list\n                                      # mapping regex group numbers to rules\n        self.lexretext = None         # Current regular expression strings\n        self.lexstatere = {}          # Dictionary mapping lexer states to master regexs\n        self.lexstateretext = {}      # Dictionary mapping lexer states to regex strings\n        self.lexstaterenames = {}     # Dictionary mapping lexer states to symbol names",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "LexerReflect",
        "kind": 6,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "peekOfCode": "class LexerReflect(object):\n    def __init__(self, ldict, log=None, reflags=0):\n        self.ldict      = ldict\n        self.error_func = None\n        self.tokens     = []\n        self.reflags    = reflags\n        self.stateinfo  = {'INITIAL': 'inclusive'}\n        self.modules    = set()\n        self.error      = False\n        self.log        = PlyLogger(sys.stderr) if log is None else log",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "get_caller_module_dict",
        "kind": 2,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "peekOfCode": "def get_caller_module_dict(levels):\n    f = sys._getframe(levels)\n    ldict = f.f_globals.copy()\n    if f.f_globals != f.f_locals:\n        ldict.update(f.f_locals)\n    return ldict\n# -----------------------------------------------------------------------------\n# _funcs_to_names()\n#\n# Given a list of regular expression functions, this converts it to a list",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "lex",
        "kind": 2,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "peekOfCode": "def lex(module=None, object=None, debug=False, optimize=False, lextab='lextab',\n        reflags=int(re.VERBOSE), nowarn=False, outputdir=None, debuglog=None, errorlog=None):\n    if lextab is None:\n        lextab = 'lextab'\n    global lexer\n    ldict = None\n    stateinfo  = {'INITIAL': 'inclusive'}\n    lexobj = Lexer()\n    lexobj.lexoptimize = optimize\n    global token, input",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "runmain",
        "kind": 2,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "peekOfCode": "def runmain(lexer=None, data=None):\n    if not data:\n        try:\n            filename = sys.argv[1]\n            f = open(filename)\n            data = f.read()\n            f.close()\n        except IndexError:\n            sys.stdout.write('Reading from standard input (type EOF to end):\\n')\n            data = sys.stdin.read()",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "TOKEN",
        "kind": 2,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "peekOfCode": "def TOKEN(r):\n    def set_regex(f):\n        if hasattr(r, '__call__'):\n            f.regex = _get_regex(r)\n        else:\n            f.regex = r\n        return f\n    return set_regex\n# Alternative spelling of the TOKEN decorator\nToken = TOKEN",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "__tabversion__",
        "kind": 5,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "peekOfCode": "__tabversion__ = '3.10'\nimport re\nimport sys\nimport types\nimport copy\nimport os\nimport inspect\n# This tuple contains known string types\ntry:\n    # Python 2.6",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "_is_identifier",
        "kind": 5,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "peekOfCode": "_is_identifier = re.compile(r'^[a-zA-Z0-9_]+$')\n# Exception thrown when invalid token encountered and no default error\n# handler is defined.\nclass LexError(Exception):\n    def __init__(self, message, s):\n        self.args = (message,)\n        self.text = s\n# Token class.  This class is used to represent the tokens produced.\nclass LexToken(object):\n    def __str__(self):",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 5,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "peekOfCode": "Token = TOKEN",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "PlyLogger",
        "kind": 6,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "class PlyLogger(object):\n    def __init__(self, f):\n        self.f = f\n    def debug(self, msg, *args, **kwargs):\n        self.f.write((msg % args) + '\\n')\n    info = debug\n    def warning(self, msg, *args, **kwargs):\n        self.f.write('WARNING: ' + (msg % args) + '\\n')\n    def error(self, msg, *args, **kwargs):\n        self.f.write('ERROR: ' + (msg % args) + '\\n')",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "NullLogger",
        "kind": 6,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "class NullLogger(object):\n    def __getattribute__(self, name):\n        return self\n    def __call__(self, *args, **kwargs):\n        return self\n# Exception raised for yacc-related errors\nclass YaccError(Exception):\n    pass\n# Format the result message that the parser produces when running in debug mode.\ndef format_result(r):",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "YaccError",
        "kind": 6,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "class YaccError(Exception):\n    pass\n# Format the result message that the parser produces when running in debug mode.\ndef format_result(r):\n    repr_str = repr(r)\n    if '\\n' in repr_str:\n        repr_str = repr(repr_str)\n    if len(repr_str) > resultlimit:\n        repr_str = repr_str[:resultlimit] + ' ...'\n    result = '<%s @ 0x%x> (%s)' % (type(r).__name__, id(r), repr_str)",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "YaccSymbol",
        "kind": 6,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "class YaccSymbol:\n    def __str__(self):\n        return self.type\n    def __repr__(self):\n        return str(self)\n# This class is a wrapper around the objects actually passed to each\n# grammar rule.   Index lookup and assignment actually assign the\n# .value attribute of the underlying YaccSymbol object.\n# The lineno() method returns the line number of a given\n# item (or 0 if not defined).   The linespan() method returns",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "YaccProduction",
        "kind": 6,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "class YaccProduction:\n    def __init__(self, s, stack=None):\n        self.slice = s\n        self.stack = stack\n        self.lexer = None\n        self.parser = None\n    def __getitem__(self, n):\n        if isinstance(n, slice):\n            return [s.value for s in self.slice[n]]\n        elif n >= 0:",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "LRParser",
        "kind": 6,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "class LRParser:\n    def __init__(self, lrtab, errorf):\n        self.productions = lrtab.lr_productions\n        self.action = lrtab.lr_action\n        self.goto = lrtab.lr_goto\n        self.errorfunc = errorf\n        self.set_defaulted_states()\n        self.errorok = True\n    def errok(self):\n        self.errorok = True",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "Production",
        "kind": 6,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "class Production(object):\n    reduced = 0\n    def __init__(self, number, name, prod, precedence=('right', 0), func=None, file='', line=0):\n        self.name     = name\n        self.prod     = tuple(prod)\n        self.number   = number\n        self.func     = func\n        self.callable = None\n        self.file     = file\n        self.line     = line",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "MiniProduction",
        "kind": 6,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "class MiniProduction(object):\n    def __init__(self, str, name, len, func, file, line):\n        self.name     = name\n        self.len      = len\n        self.func     = func\n        self.callable = None\n        self.file     = file\n        self.line     = line\n        self.str      = str\n    def __str__(self):",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "LRItem",
        "kind": 6,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "class LRItem(object):\n    def __init__(self, p, n):\n        self.name       = p.name\n        self.prod       = list(p.prod)\n        self.number     = p.number\n        self.lr_index   = n\n        self.lookaheads = {}\n        self.prod.insert(n, '.')\n        self.prod       = tuple(self.prod)\n        self.len        = len(self.prod)",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "GrammarError",
        "kind": 6,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "class GrammarError(YaccError):\n    pass\nclass Grammar(object):\n    def __init__(self, terminals):\n        self.Productions  = [None]  # A list of all of the productions.  The first\n                                    # entry is always reserved for the purpose of\n                                    # building an augmented grammar\n        self.Prodnames    = {}      # A dictionary mapping the names of nonterminals to a list of all\n                                    # productions of that nonterminal.\n        self.Prodmap      = {}      # A dictionary that is only used to detect duplicate",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "Grammar",
        "kind": 6,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "class Grammar(object):\n    def __init__(self, terminals):\n        self.Productions  = [None]  # A list of all of the productions.  The first\n                                    # entry is always reserved for the purpose of\n                                    # building an augmented grammar\n        self.Prodnames    = {}      # A dictionary mapping the names of nonterminals to a list of all\n                                    # productions of that nonterminal.\n        self.Prodmap      = {}      # A dictionary that is only used to detect duplicate\n                                    # productions.\n        self.Terminals    = {}      # A dictionary mapping the names of terminal symbols to a",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "VersionError",
        "kind": 6,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "class VersionError(YaccError):\n    pass\nclass LRTable(object):\n    def __init__(self):\n        self.lr_action = None\n        self.lr_goto = None\n        self.lr_productions = None\n        self.lr_method = None\n    def read_table(self, module):\n        if isinstance(module, types.ModuleType):",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "LRTable",
        "kind": 6,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "class LRTable(object):\n    def __init__(self):\n        self.lr_action = None\n        self.lr_goto = None\n        self.lr_productions = None\n        self.lr_method = None\n    def read_table(self, module):\n        if isinstance(module, types.ModuleType):\n            parsetab = module\n        else:",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "LALRError",
        "kind": 6,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "class LALRError(YaccError):\n    pass\n# -----------------------------------------------------------------------------\n#                             == LRGeneratedTable ==\n#\n# This class implements the LR table generation algorithm.  There are no\n# public methods except for write()\n# -----------------------------------------------------------------------------\nclass LRGeneratedTable(LRTable):\n    def __init__(self, grammar, method='LALR', log=None):",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "LRGeneratedTable",
        "kind": 6,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "class LRGeneratedTable(LRTable):\n    def __init__(self, grammar, method='LALR', log=None):\n        if method not in ['SLR', 'LALR']:\n            raise LALRError('Unsupported method %s' % method)\n        self.grammar = grammar\n        self.lr_method = method\n        # Set up the logger\n        if not log:\n            log = NullLogger()\n        self.log = log",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "ParserReflect",
        "kind": 6,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "class ParserReflect(object):\n    def __init__(self, pdict, log=None):\n        self.pdict      = pdict\n        self.start      = None\n        self.error_func = None\n        self.tokens     = None\n        self.modules    = set()\n        self.grammar    = []\n        self.error      = False\n        if log is None:",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "format_result",
        "kind": 2,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "def format_result(r):\n    repr_str = repr(r)\n    if '\\n' in repr_str:\n        repr_str = repr(repr_str)\n    if len(repr_str) > resultlimit:\n        repr_str = repr_str[:resultlimit] + ' ...'\n    result = '<%s @ 0x%x> (%s)' % (type(r).__name__, id(r), repr_str)\n    return result\n# Format stack entries when the parser is running in debug mode\ndef format_stack_entry(r):",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "format_stack_entry",
        "kind": 2,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "def format_stack_entry(r):\n    repr_str = repr(r)\n    if '\\n' in repr_str:\n        repr_str = repr(repr_str)\n    if len(repr_str) < 16:\n        return repr_str\n    else:\n        return '<%s @ 0x%x>' % (type(r).__name__, id(r))\n# Panic mode error recovery support.   This feature is being reworked--much of the\n# code here is to offer a deprecation/backwards compatible transition",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "errok",
        "kind": 2,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "def errok():\n    warnings.warn(_warnmsg)\n    return _errok()\ndef restart():\n    warnings.warn(_warnmsg)\n    return _restart()\ndef token():\n    warnings.warn(_warnmsg)\n    return _token()\n# Utility function to call the p_error() function with some deprecation hacks",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "restart",
        "kind": 2,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "def restart():\n    warnings.warn(_warnmsg)\n    return _restart()\ndef token():\n    warnings.warn(_warnmsg)\n    return _token()\n# Utility function to call the p_error() function with some deprecation hacks\ndef call_errorfunc(errorfunc, token, parser):\n    global _errok, _token, _restart\n    _errok = parser.errok",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 2,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "def token():\n    warnings.warn(_warnmsg)\n    return _token()\n# Utility function to call the p_error() function with some deprecation hacks\ndef call_errorfunc(errorfunc, token, parser):\n    global _errok, _token, _restart\n    _errok = parser.errok\n    _token = parser.token\n    _restart = parser.restart\n    r = errorfunc(token)",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "call_errorfunc",
        "kind": 2,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "def call_errorfunc(errorfunc, token, parser):\n    global _errok, _token, _restart\n    _errok = parser.errok\n    _token = parser.token\n    _restart = parser.restart\n    r = errorfunc(token)\n    try:\n        del _errok, _token, _restart\n    except NameError:\n        pass",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "rightmost_terminal",
        "kind": 2,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "def rightmost_terminal(symbols, terminals):\n    i = len(symbols) - 1\n    while i >= 0:\n        if symbols[i] in terminals:\n            return symbols[i]\n        i -= 1\n    return None\n# -----------------------------------------------------------------------------\n#                           === GRAMMAR CLASS ===\n#",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "digraph",
        "kind": 2,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "def digraph(X, R, FP):\n    N = {}\n    for x in X:\n        N[x] = 0\n    stack = []\n    F = {}\n    for x in X:\n        if N[x] == 0:\n            traverse(x, N, stack, F, X, R, FP)\n    return F",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "traverse",
        "kind": 2,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "def traverse(x, N, stack, F, X, R, FP):\n    stack.append(x)\n    d = len(stack)\n    N[x] = d\n    F[x] = FP(x)             # F(X) <- F'(x)\n    rel = R(x)               # Get y's related to x\n    for y in rel:\n        if N[y] == 0:\n            traverse(y, N, stack, F, X, R, FP)\n        N[x] = min(N[x], N[y])",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "get_caller_module_dict",
        "kind": 2,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "def get_caller_module_dict(levels):\n    f = sys._getframe(levels)\n    ldict = f.f_globals.copy()\n    if f.f_globals != f.f_locals:\n        ldict.update(f.f_locals)\n    return ldict\n# -----------------------------------------------------------------------------\n# parse_grammar()\n#\n# This takes a raw grammar rule string and parses it into production data",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "parse_grammar",
        "kind": 2,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "def parse_grammar(doc, file, line):\n    grammar = []\n    # Split the doc string into lines\n    pstrings = doc.splitlines()\n    lastp = None\n    dline = line\n    for ps in pstrings:\n        dline += 1\n        p = ps.split()\n        if not p:",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "yacc",
        "kind": 2,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "def yacc(method='LALR', debug=yaccdebug, module=None, tabmodule=tab_module, start=None,\n         check_recursion=True, optimize=False, write_tables=True, debugfile=debug_file,\n         outputdir=None, debuglog=None, errorlog=None, picklefile=None):\n    if tabmodule is None:\n        tabmodule = tab_module\n    # Reference to the parsing method of the last built parser\n    global parse\n    # If pickling is enabled, table files are not created\n    if picklefile:\n        write_tables = 0",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "__tabversion__",
        "kind": 5,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "__tabversion__ = '3.10'\n#-----------------------------------------------------------------------------\n#                     === User configurable parameters ===\n#\n# Change these to modify the default behavior of yacc (if you wish)\n#-----------------------------------------------------------------------------\nyaccdebug   = True             # Debugging mode.  If set, yacc generates a\n                               # a 'parser.out' file in the current directory\ndebug_file  = 'parser.out'     # Default name of the debugging file\ntab_module  = 'parsetab'       # Default name of the table module",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "error_count",
        "kind": 5,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "error_count = 3                # Number of symbols that must be shifted to leave recovery mode\nyaccdevel   = False            # Set to True if developing yacc.  This turns off optimized\n                               # implementations of certain functions.\nresultlimit = 40               # Size limit of results when running in debug mode.\npickle_protocol = 0            # Protocol to use when writing pickle files\n# String type-checking compatibility\nif sys.version_info[0] < 3:\n    string_types = basestring\nelse:\n    string_types = str",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "resultlimit",
        "kind": 5,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "resultlimit = 40               # Size limit of results when running in debug mode.\npickle_protocol = 0            # Protocol to use when writing pickle files\n# String type-checking compatibility\nif sys.version_info[0] < 3:\n    string_types = basestring\nelse:\n    string_types = str\nMAXINT = sys.maxsize\n# This object is a stand-in for a logging object created by the\n# logging module.   PLY will use this by default to create things",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "pickle_protocol",
        "kind": 5,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "pickle_protocol = 0            # Protocol to use when writing pickle files\n# String type-checking compatibility\nif sys.version_info[0] < 3:\n    string_types = basestring\nelse:\n    string_types = str\nMAXINT = sys.maxsize\n# This object is a stand-in for a logging object created by the\n# logging module.   PLY will use this by default to create things\n# such as the parser.out file.  If a user wants more detailed",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "MAXINT",
        "kind": 5,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "MAXINT = sys.maxsize\n# This object is a stand-in for a logging object created by the\n# logging module.   PLY will use this by default to create things\n# such as the parser.out file.  If a user wants more detailed\n# information, they can create their own logging object and pass\n# it into PLY.\nclass PlyLogger(object):\n    def __init__(self, f):\n        self.f = f\n    def debug(self, msg, *args, **kwargs):",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "_errok",
        "kind": 5,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "_errok = None\n_token = None\n_restart = None\n_warnmsg = '''PLY: Don't use global functions errok(), token(), and restart() in p_error().\nInstead, invoke the methods on the associated parser instance:\n    def p_error(p):\n        ...\n        # Use parser.errok(), parser.token(), parser.restart()\n        ...\n    parser = yacc.yacc()",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "_token",
        "kind": 5,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "_token = None\n_restart = None\n_warnmsg = '''PLY: Don't use global functions errok(), token(), and restart() in p_error().\nInstead, invoke the methods on the associated parser instance:\n    def p_error(p):\n        ...\n        # Use parser.errok(), parser.token(), parser.restart()\n        ...\n    parser = yacc.yacc()\n'''",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "_restart",
        "kind": 5,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "_restart = None\n_warnmsg = '''PLY: Don't use global functions errok(), token(), and restart() in p_error().\nInstead, invoke the methods on the associated parser instance:\n    def p_error(p):\n        ...\n        # Use parser.errok(), parser.token(), parser.restart()\n        ...\n    parser = yacc.yacc()\n'''\ndef errok():",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "_warnmsg",
        "kind": 5,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "_warnmsg = '''PLY: Don't use global functions errok(), token(), and restart() in p_error().\nInstead, invoke the methods on the associated parser instance:\n    def p_error(p):\n        ...\n        # Use parser.errok(), parser.token(), parser.restart()\n        ...\n    parser = yacc.yacc()\n'''\ndef errok():\n    warnings.warn(_warnmsg)",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "_is_identifier",
        "kind": 5,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "_is_identifier = re.compile(r'^[a-zA-Z0-9_-]+$')\n# -----------------------------------------------------------------------------\n# class Production:\n#\n# This class stores the raw information about a single production or grammar rule.\n# A grammar rule refers to a specification such as this:\n#\n#       expr : expr PLUS term\n#\n# Here are the basic attributes defined on all productions",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "_tabversion",
        "kind": 5,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "_tabversion = %r\n_lr_method = %r\n_lr_signature = %r\n    ''' % (os.path.basename(filename), __tabversion__, self.lr_method, signature))\n            # Change smaller to 0 to go back to original tables\n            smaller = 1\n            # Factor out names to try and make smaller\n            if smaller:\n                items = {}\n                for s, nd in self.lr_action.items():",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "_lr_method",
        "kind": 5,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "_lr_method = %r\n_lr_signature = %r\n    ''' % (os.path.basename(filename), __tabversion__, self.lr_method, signature))\n            # Change smaller to 0 to go back to original tables\n            smaller = 1\n            # Factor out names to try and make smaller\n            if smaller:\n                items = {}\n                for s, nd in self.lr_action.items():\n                    for name, v in nd.items():",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "_lr_signature",
        "kind": 5,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "_lr_signature = %r\n    ''' % (os.path.basename(filename), __tabversion__, self.lr_method, signature))\n            # Change smaller to 0 to go back to original tables\n            smaller = 1\n            # Factor out names to try and make smaller\n            if smaller:\n                items = {}\n                for s, nd in self.lr_action.items():\n                    for name, v in nd.items():\n                        i = items.get(name)",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "_lr_action",
        "kind": 5,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n''')\n            else:\n                f.write('\\n_lr_action = { ')\n                for k, v in self.lr_action.items():",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "_lr_goto",
        "kind": 5,
        "importPath": "ply.yacc",
        "description": "ply.yacc",
        "peekOfCode": "_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):\n       if not _x in _lr_goto: _lr_goto[_x] = {}\n       _lr_goto[_x][_k] = _y\ndel _lr_goto_items\n''')\n            else:\n                f.write('\\n_lr_goto = { ')\n                for k, v in self.lr_goto.items():",
        "detail": "ply.yacc",
        "documentation": {}
    },
    {
        "label": "get_source_range",
        "kind": 2,
        "importPath": "ply.ygen",
        "description": "ply.ygen",
        "peekOfCode": "def get_source_range(lines, tag):\n    srclines = enumerate(lines)\n    start_tag = '#--! %s-start' % tag\n    end_tag = '#--! %s-end' % tag\n    for start_index, line in srclines:\n        if line.strip().startswith(start_tag):\n            break\n    for end_index, line in srclines:\n        if line.strip().endswith(end_tag):\n            break",
        "detail": "ply.ygen",
        "documentation": {}
    },
    {
        "label": "filter_section",
        "kind": 2,
        "importPath": "ply.ygen",
        "description": "ply.ygen",
        "peekOfCode": "def filter_section(lines, tag):\n    filtered_lines = []\n    include = True\n    tag_text = '#--! %s' % tag\n    for line in lines:\n        if line.strip().startswith(tag_text):\n            include = not include\n        elif include:\n            filtered_lines.append(line)\n    return filtered_lines",
        "detail": "ply.ygen",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ply.ygen",
        "description": "ply.ygen",
        "peekOfCode": "def main():\n    dirname = os.path.dirname(__file__)\n    shutil.copy2(os.path.join(dirname, 'yacc.py'), os.path.join(dirname, 'yacc.py.bak'))\n    with open(os.path.join(dirname, 'yacc.py'), 'r') as f:\n        lines = f.readlines()\n    parse_start, parse_end = get_source_range(lines, 'parsedebug')\n    parseopt_start, parseopt_end = get_source_range(lines, 'parseopt')\n    parseopt_notrack_start, parseopt_notrack_end = get_source_range(lines, 'parseopt-notrack')\n    # Get the original source\n    orig_lines = lines[parse_start:parse_end]",
        "detail": "ply.ygen",
        "documentation": {}
    },
    {
        "label": "t_FLOAT",
        "kind": 2,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "def t_FLOAT(t):\n    r'\\d+\\.\\d+'\n    t.value = float(t.value)\n    return t\ndef t_NUMBER(t):\n    r'\\d+'\n    t.value = int(t.value)\n    return t\ndef t_VARIABLE(t):\n    r'[a-zA-Z_]\\w*'",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_NUMBER",
        "kind": 2,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "def t_NUMBER(t):\n    r'\\d+'\n    t.value = int(t.value)\n    return t\ndef t_VARIABLE(t):\n    r'[a-zA-Z_]\\w*'\n    t.type = reserved.get(t.value,'VARIABLE')    # Check for reserved words\n    return t\ndef t_newline(t):\n    r'\\n+'",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_VARIABLE",
        "kind": 2,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "def t_VARIABLE(t):\n    r'[a-zA-Z_]\\w*'\n    t.type = reserved.get(t.value,'VARIABLE')    # Check for reserved words\n    return t\ndef t_newline(t):\n    r'\\n+'\n    t.lexer.lineno += len(t.value)\nt_ignore  = ' \\t'\n# Error handling rule\ndef t_error(t):",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_newline",
        "kind": 2,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "def t_newline(t):\n    r'\\n+'\n    t.lexer.lineno += len(t.value)\nt_ignore  = ' \\t'\n# Error handling rule\ndef t_error(t):\n    print(\"Illegal character '%s'\" % t.value[0])\n    t.lexer.skip(1)\n#Katherine Tumbaco\nalgoritmoKatherine = \"\"\"",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_error",
        "kind": 2,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "def t_error(t):\n    print(\"Illegal character '%s'\" % t.value[0])\n    t.lexer.skip(1)\n#Katherine Tumbaco\nalgoritmoKatherine = \"\"\"\nenum DiaSemana{\n    Lunes,\n    Martes,\n    Miercoles,\n    Jueves,",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "reserved",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "reserved = {\n    #Roberto Encalada\n    'main': 'MAIN',\n    'new': 'NEW',\n    'null': 'NULL',\n    'map': 'MAP',\n    'private': 'PRIVATE',\n    'protected': 'PROTECTED',\n    'static': 'STATIC',\n    'abstract': 'ABSTRACT',",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "tokens",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "tokens = (\n    #Katherine Tumbaco\n    'NUMBER',\n    'FLOAT',\n    'PLUS',\n    'MINUS',\n    'TIMES',\n    'DIVIDE',\n    'LPAREN',\n    'RPAREN',",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_NEQ",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_NEQ = r'!='\nt_DOT = r'\\.'\nt_TWODOTS = r':'\nt_LBRACE  = r'\\{'\nt_RBRACE  = r'\\}'\nt_LBRACKET = r'\\['\nt_RBRACKET = r'\\]'\nt_LPAREN  = r'\\('\nt_RPAREN  = r'\\)'\nt_DOTCOMMA = r';'",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_DOT",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_DOT = r'\\.'\nt_TWODOTS = r':'\nt_LBRACE  = r'\\{'\nt_RBRACE  = r'\\}'\nt_LBRACKET = r'\\['\nt_RBRACKET = r'\\]'\nt_LPAREN  = r'\\('\nt_RPAREN  = r'\\)'\nt_DOTCOMMA = r';'\nt_TIMES = r'\\*'",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_TWODOTS",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_TWODOTS = r':'\nt_LBRACE  = r'\\{'\nt_RBRACE  = r'\\}'\nt_LBRACKET = r'\\['\nt_RBRACKET = r'\\]'\nt_LPAREN  = r'\\('\nt_RPAREN  = r'\\)'\nt_DOTCOMMA = r';'\nt_TIMES = r'\\*'\nt_DIVIDE = r'/'",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_LBRACKET",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_LBRACKET = r'\\['\nt_RBRACKET = r'\\]'\nt_LPAREN  = r'\\('\nt_RPAREN  = r'\\)'\nt_DOTCOMMA = r';'\nt_TIMES = r'\\*'\nt_DIVIDE = r'/'\nt_MINUS = r'-'\n#Roberto Encalada\nt_LANGLE = r'<'",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_RBRACKET",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_RBRACKET = r'\\]'\nt_LPAREN  = r'\\('\nt_RPAREN  = r'\\)'\nt_DOTCOMMA = r';'\nt_TIMES = r'\\*'\nt_DIVIDE = r'/'\nt_MINUS = r'-'\n#Roberto Encalada\nt_LANGLE = r'<'\nt_RANGLE = r'>'",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_DOTCOMMA",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_DOTCOMMA = r';'\nt_TIMES = r'\\*'\nt_DIVIDE = r'/'\nt_MINUS = r'-'\n#Roberto Encalada\nt_LANGLE = r'<'\nt_RANGLE = r'>'\nt_ADMIRATION = r'!'\nt_DOLLAR = r'\\$'\nt_OR = r'\\|\\|'",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_TIMES",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_TIMES = r'\\*'\nt_DIVIDE = r'/'\nt_MINUS = r'-'\n#Roberto Encalada\nt_LANGLE = r'<'\nt_RANGLE = r'>'\nt_ADMIRATION = r'!'\nt_DOLLAR = r'\\$'\nt_OR = r'\\|\\|'\nt_AND = r'&&'",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_DIVIDE",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_DIVIDE = r'/'\nt_MINUS = r'-'\n#Roberto Encalada\nt_LANGLE = r'<'\nt_RANGLE = r'>'\nt_ADMIRATION = r'!'\nt_DOLLAR = r'\\$'\nt_OR = r'\\|\\|'\nt_AND = r'&&'\nt_COMMENTLINE = r'^(//)\\w*\\W*\\n$'",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_MINUS",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_MINUS = r'-'\n#Roberto Encalada\nt_LANGLE = r'<'\nt_RANGLE = r'>'\nt_ADMIRATION = r'!'\nt_DOLLAR = r'\\$'\nt_OR = r'\\|\\|'\nt_AND = r'&&'\nt_COMMENTLINE = r'^(//)\\w*\\W*\\n$'\nt_COMMENTBLOCK = r'/\\*(.|\\n)*?\\*/'",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_LANGLE",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_LANGLE = r'<'\nt_RANGLE = r'>'\nt_ADMIRATION = r'!'\nt_DOLLAR = r'\\$'\nt_OR = r'\\|\\|'\nt_AND = r'&&'\nt_COMMENTLINE = r'^(//)\\w*\\W*\\n$'\nt_COMMENTBLOCK = r'/\\*(.|\\n)*?\\*/'\nt_CHAINCHAR = r'(\\'[^\\']*\\'|\\\"[^\\\"]*\\\")'\n#Richard Perez",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_RANGLE",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_RANGLE = r'>'\nt_ADMIRATION = r'!'\nt_DOLLAR = r'\\$'\nt_OR = r'\\|\\|'\nt_AND = r'&&'\nt_COMMENTLINE = r'^(//)\\w*\\W*\\n$'\nt_COMMENTBLOCK = r'/\\*(.|\\n)*?\\*/'\nt_CHAINCHAR = r'(\\'[^\\']*\\'|\\\"[^\\\"]*\\\")'\n#Richard Perez\nt_MOD     = r'\\%'",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_ADMIRATION",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_ADMIRATION = r'!'\nt_DOLLAR = r'\\$'\nt_OR = r'\\|\\|'\nt_AND = r'&&'\nt_COMMENTLINE = r'^(//)\\w*\\W*\\n$'\nt_COMMENTBLOCK = r'/\\*(.|\\n)*?\\*/'\nt_CHAINCHAR = r'(\\'[^\\']*\\'|\\\"[^\\\"]*\\\")'\n#Richard Perez\nt_MOD     = r'\\%'\nt_INTEGERDIVISION = r'~/'",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_DOLLAR",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_DOLLAR = r'\\$'\nt_OR = r'\\|\\|'\nt_AND = r'&&'\nt_COMMENTLINE = r'^(//)\\w*\\W*\\n$'\nt_COMMENTBLOCK = r'/\\*(.|\\n)*?\\*/'\nt_CHAINCHAR = r'(\\'[^\\']*\\'|\\\"[^\\\"]*\\\")'\n#Richard Perez\nt_MOD     = r'\\%'\nt_INTEGERDIVISION = r'~/'\nt_COMMA   = r','",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_OR",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_OR = r'\\|\\|'\nt_AND = r'&&'\nt_COMMENTLINE = r'^(//)\\w*\\W*\\n$'\nt_COMMENTBLOCK = r'/\\*(.|\\n)*?\\*/'\nt_CHAINCHAR = r'(\\'[^\\']*\\'|\\\"[^\\\"]*\\\")'\n#Richard Perez\nt_MOD     = r'\\%'\nt_INTEGERDIVISION = r'~/'\nt_COMMA   = r','\nt_EQUALS  = r'='",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_AND",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_AND = r'&&'\nt_COMMENTLINE = r'^(//)\\w*\\W*\\n$'\nt_COMMENTBLOCK = r'/\\*(.|\\n)*?\\*/'\nt_CHAINCHAR = r'(\\'[^\\']*\\'|\\\"[^\\\"]*\\\")'\n#Richard Perez\nt_MOD     = r'\\%'\nt_INTEGERDIVISION = r'~/'\nt_COMMA   = r','\nt_EQUALS  = r'='\nt_ARROWFUNCTION = r'=>'",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_COMMENTLINE",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_COMMENTLINE = r'^(//)\\w*\\W*\\n$'\nt_COMMENTBLOCK = r'/\\*(.|\\n)*?\\*/'\nt_CHAINCHAR = r'(\\'[^\\']*\\'|\\\"[^\\\"]*\\\")'\n#Richard Perez\nt_MOD     = r'\\%'\nt_INTEGERDIVISION = r'~/'\nt_COMMA   = r','\nt_EQUALS  = r'='\nt_ARROWFUNCTION = r'=>'\nt_PLUS    = r'\\+'",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_COMMENTBLOCK",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_COMMENTBLOCK = r'/\\*(.|\\n)*?\\*/'\nt_CHAINCHAR = r'(\\'[^\\']*\\'|\\\"[^\\\"]*\\\")'\n#Richard Perez\nt_MOD     = r'\\%'\nt_INTEGERDIVISION = r'~/'\nt_COMMA   = r','\nt_EQUALS  = r'='\nt_ARROWFUNCTION = r'=>'\nt_PLUS    = r'\\+'\n#Katherine Tumbaco",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_CHAINCHAR",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_CHAINCHAR = r'(\\'[^\\']*\\'|\\\"[^\\\"]*\\\")'\n#Richard Perez\nt_MOD     = r'\\%'\nt_INTEGERDIVISION = r'~/'\nt_COMMA   = r','\nt_EQUALS  = r'='\nt_ARROWFUNCTION = r'=>'\nt_PLUS    = r'\\+'\n#Katherine Tumbaco\ndef t_FLOAT(t):",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_INTEGERDIVISION",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_INTEGERDIVISION = r'~/'\nt_COMMA   = r','\nt_EQUALS  = r'='\nt_ARROWFUNCTION = r'=>'\nt_PLUS    = r'\\+'\n#Katherine Tumbaco\ndef t_FLOAT(t):\n    r'\\d+\\.\\d+'\n    t.value = float(t.value)\n    return t",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "t_ARROWFUNCTION",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "t_ARROWFUNCTION = r'=>'\nt_PLUS    = r'\\+'\n#Katherine Tumbaco\ndef t_FLOAT(t):\n    r'\\d+\\.\\d+'\n    t.value = float(t.value)\n    return t\ndef t_NUMBER(t):\n    r'\\d+'\n    t.value = int(t.value)",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "algoritmoKatherine",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "algoritmoKatherine = \"\"\"\nenum DiaSemana{\n    Lunes,\n    Martes,\n    Miercoles,\n    Jueves,\n    Viernes,\n    Sabado,\n    Domingo\n}",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "algoritmoRichard",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "algoritmoRichard = \"\"\"\n        class Pais {\n        String nombre;\n        boolean ganoMundial;\n        int cantidad;\n        Pais(this.nombre, this.ganoMundial, this.cantidad);\n        public String cantidadMundiales() => print(this.cantidad)\n        }\n        void main() {\n        // Crear un conjunto de países",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "AlgoritmoRoberto",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "AlgoritmoRoberto = \"\"\"\n/* Block comment example\nThis is a test for the block comment token.\n*/\n// Line comment example\npublic class TestClass {\n    private int number = 42;\n    public double decimalNumber = 3.14;\n    protected isValid = True;\n    static final String CONSTANT_STRING = \"Hello\";",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "algoritmos",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "algoritmos = [algoritmoKatherine, algoritmoRichard, AlgoritmoRoberto]\n# Build the lexer\nlexer = lex.lex()\n'''\n#Generate logs\nlog_dir = \"logs\"\nif not os.path.exists(log_dir):\n    os.makedirs(log_dir)\nUsuariosGit = [\"katumbac\", \"rochardp12\", \"rocaenca\"]\ncurrent_time = datetime.now().strftime(\"%d%m%Y-%Hh%M\")",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "lexer",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "lexer = lex.lex()\n'''\n#Generate logs\nlog_dir = \"logs\"\nif not os.path.exists(log_dir):\n    os.makedirs(log_dir)\nUsuariosGit = [\"katumbac\", \"rochardp12\", \"rocaenca\"]\ncurrent_time = datetime.now().strftime(\"%d%m%Y-%Hh%M\")\nfor i in range(len(algoritmos)):\n  log_filename = f\"lexico-{UsuariosGit[i]}-{current_time}.txt\"",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "log_dir",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "log_dir = \"logs\"\nif not os.path.exists(log_dir):\n    os.makedirs(log_dir)\nUsuariosGit = [\"katumbac\", \"rochardp12\", \"rocaenca\"]\ncurrent_time = datetime.now().strftime(\"%d%m%Y-%Hh%M\")\nfor i in range(len(algoritmos)):\n  log_filename = f\"lexico-{UsuariosGit[i]}-{current_time}.txt\"\n  log_filepath = os.path.join(log_dir, log_filename)\n  lexer.input(algoritmos[i])\n  # Tokenize",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "UsuariosGit",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "UsuariosGit = [\"katumbac\", \"rochardp12\", \"rocaenca\"]\ncurrent_time = datetime.now().strftime(\"%d%m%Y-%Hh%M\")\nfor i in range(len(algoritmos)):\n  log_filename = f\"lexico-{UsuariosGit[i]}-{current_time}.txt\"\n  log_filepath = os.path.join(log_dir, log_filename)\n  lexer.input(algoritmos[i])\n  # Tokenize\n  with open(log_filepath, 'w') as log_file:\n    while True:\n        tok = lexer.token()",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "current_time",
        "kind": 5,
        "importPath": "lexico",
        "description": "lexico",
        "peekOfCode": "current_time = datetime.now().strftime(\"%d%m%Y-%Hh%M\")\nfor i in range(len(algoritmos)):\n  log_filename = f\"lexico-{UsuariosGit[i]}-{current_time}.txt\"\n  log_filepath = os.path.join(log_dir, log_filename)\n  lexer.input(algoritmos[i])\n  # Tokenize\n  with open(log_filepath, 'w') as log_file:\n    while True:\n        tok = lexer.token()\n        if not tok: ",
        "detail": "lexico",
        "documentation": {}
    },
    {
        "label": "p_programa",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_programa(p):\n    '''programa : cuerpo\n                | programa cuerpo'''\n    if len(p) == 2:\n        p[0] = [p[1]]\n    else:\n        p[0] = p[1] + [p[2]]\ndef p_cuerpo(p):\n    '''cuerpo : impresion\n              | declaracion",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_cuerpo",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_cuerpo(p):\n    '''cuerpo : impresion\n              | declaracion\n              | operacion\n              | comentario\n              | estructuras_de_Control\n              | RETURN \n              | RETURN valores'''\n    p[0] = p[1]\ndef p_estructuras_de_Control(p):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_estructuras_de_Control",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_estructuras_de_Control(p):\n    '''estructuras_de_Control : sentencia_If\n                            | sentencia_Switch\n                            | ciclo_for\n                            | funcion_Anonima\n                            | diccionario\n                            | Conjunto\n                            | funcion_flecha\n                            | funcion_Void\n                            | funcion",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_comentario",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_comentario(p):\n    '''comentario : COMMENTLINE\n                  | COMMENTBLOCK'''\ndef p_impresion(p):\n    '''impresion : PRINT LPAREN valores RPAREN DOTCOMMA\n                 | PRINT LPAREN operacion RPAREN DOTCOMMA\n                 | PRINT LPAREN RPAREN DOTCOMMA\n    '''\n# Estructura de control - If-else - Katherine Tumbaco\ndef p_sentencia_If(p):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_impresion",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_impresion(p):\n    '''impresion : PRINT LPAREN valores RPAREN DOTCOMMA\n                 | PRINT LPAREN operacion RPAREN DOTCOMMA\n                 | PRINT LPAREN RPAREN DOTCOMMA\n    '''\n# Estructura de control - If-else - Katherine Tumbaco\ndef p_sentencia_If(p):\n    ''' sentencia_If : IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE \n                        | IF LPAREN condicion RPAREN LBRACE programa RBRACE else\n    '''",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_sentencia_If",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_sentencia_If(p):\n    ''' sentencia_If : IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE \n                        | IF LPAREN condicion RPAREN LBRACE programa RBRACE else\n    '''\ndef p_else(p):\n    \"\"\"\n    else : ELSE LBRACE programa RBRACE\n    \"\"\"\ndef obtener_tipo(valor):\n    if isinstance(valor, int):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_else",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_else(p):\n    \"\"\"\n    else : ELSE LBRACE programa RBRACE\n    \"\"\"\ndef obtener_tipo(valor):\n    if isinstance(valor, int):\n        return 'int'\n    elif isinstance(valor, float):\n        return 'float'\n    elif isinstance(valor, str):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "obtener_tipo",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def obtener_tipo(valor):\n    if isinstance(valor, int):\n        return 'int'\n    elif isinstance(valor, float):\n        return 'float'\n    elif isinstance(valor, str):\n        return 'string'\n    elif isinstance(valor, bool):\n        return 'bool'\n    else:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_condicion",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_condicion(p):\n    '''\n    condicion : valor Comparador valor\n            |   condicion conector condicion\n            |   Bool\n    ''' \n    #Semantica - If tener una condición que evalúe a un valor booleano. Katherine Tumbaco \n    if len(p) == 4:\n        tipo1 = obtener_tipo(p[1])\n        tipo2 = obtener_tipo(p[3])",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_conector",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_conector(p):\n    '''conector : AND\n                | OR\n    '''\n# Estructura de datos - Arreglos - List - Katherine Tumbaco\ndef p_estructura_List(p):\n    'estructura_List : LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA'\n# Tipo de funcion - Función sin retorno - Katherine Tumbaco\ndef p_funcion_Void(p):\n    '''funcion_Void : VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_estructura_List",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_estructura_List(p):\n    'estructura_List : LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA'\n# Tipo de funcion - Función sin retorno - Katherine Tumbaco\ndef p_funcion_Void(p):\n    '''funcion_Void : VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE\n                    | VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE\n                    | VOID MAIN LPAREN RPAREN LBRACE programa RBRACE'''\n    #Semantico- no retorna un valor deben ser declaradas con el tipo void - Katherine Tumbaco\n    func_name = p[2]\n    sin_retorno[func_name] = 'void'",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_funcion_Void",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_funcion_Void(p):\n    '''funcion_Void : VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE\n                    | VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE\n                    | VOID MAIN LPAREN RPAREN LBRACE programa RBRACE'''\n    #Semantico- no retorna un valor deben ser declaradas con el tipo void - Katherine Tumbaco\n    func_name = p[2]\n    sin_retorno[func_name] = 'void'\n    if any('return' in item for item in p[7]):\n        print(f\"Error semántico: La función '{func_name}' declarada como 'void' no debe contener un retorno 'return'.\")\n    elif any('return' in item for item in p[6]):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_Comparador",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_Comparador(p):\n    '''Comparador : EQUALS EQUALS\n                    | LANGLE\n                    | RANGLE\n                    | LANGLE EQUALS\n                    | RANGLE EQUALS\n                    | NEQ'''\n    #Semantico - Katherine Tumbaco \n    p[0] = p[1] if len(p) == 2 else (p[1], p[2])\ndef p_tupla(p):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_tupla",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_tupla(p):\n    'tupla : LPAREN valores RPAREN'\ndef p_valores(p):\n    '''valores : valor\n               | valor COMMA valores\n               | tipo VARIABLE\n               | tipo VARIABLE COMMA valores'''\n    #Semantico - Katherine Tumbaco           \n    if len(p) == 2:\n        p[0] = [p[1]]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_valores",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_valores(p):\n    '''valores : valor\n               | valor COMMA valores\n               | tipo VARIABLE\n               | tipo VARIABLE COMMA valores'''\n    #Semantico - Katherine Tumbaco           \n    if len(p) == 2:\n        p[0] = [p[1]]\n    elif len(p) == 3:\n        p[0] = [p[1]] + p[3]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_Bool",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_Bool(p):\n    '''Bool : TRUE\n        | FALSE '''\ndef p_valor(p):\n    '''\n    valor   : VARIABLE\n            | NUMBER\n            | FLOAT\n            | CHAINCHAR\n            | Bool",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_valor",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_valor(p):\n    '''\n    valor   : VARIABLE\n            | NUMBER\n            | FLOAT\n            | CHAINCHAR\n            | Bool\n            | operacion\n            | tupla\n    '''",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_tipo",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_tipo(p):\n    '''tipo : MAP\n            | DOUBLE\n            | STRING\n            | INT\n            | SET\n            | LIST\n            | BOOLEAN\n            | FINAL\n            | CONST",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_declaracion",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_declaracion(p):\n    \"\"\"\n    declaracion : tipo VARIABLE EQUALS valor DOTCOMMA\n                | VAR VARIABLE EQUALS valor DOTCOMMA\n    \"\"\"\ndef p_operacion(p):\n  'operacion : valor operador expresion'\ndef p_expresion(p):\n    '''expresion : LPAREN valor operador expresion RPAREN\n                    | valor '''",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_operacion",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_operacion(p):\n  'operacion : valor operador expresion'\ndef p_expresion(p):\n    '''expresion : LPAREN valor operador expresion RPAREN\n                    | valor '''\ndef p_funcion(p):\n    'funcion : VARIABLE LPAREN valores RPAREN'\ndef p_funcion_Data(p):\n    'funcion_Data : VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA'\n#-----------------SWITCH-----------------------------------",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_expresion",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_expresion(p):\n    '''expresion : LPAREN valor operador expresion RPAREN\n                    | valor '''\ndef p_funcion(p):\n    'funcion : VARIABLE LPAREN valores RPAREN'\ndef p_funcion_Data(p):\n    'funcion_Data : VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA'\n#-----------------SWITCH-----------------------------------\ndef p_sentencia_Switch(p):\n    'sentencia_Switch : SWITCH LPAREN valor RPAREN LBRACE caso RBRACE'",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_funcion",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_funcion(p):\n    'funcion : VARIABLE LPAREN valores RPAREN'\ndef p_funcion_Data(p):\n    'funcion_Data : VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA'\n#-----------------SWITCH-----------------------------------\ndef p_sentencia_Switch(p):\n    'sentencia_Switch : SWITCH LPAREN valor RPAREN LBRACE caso RBRACE'\ndef p_caso(p):\n    '''caso : CASE valor TWODOTS programa BREAK DOTCOMMA caso \n            | CASE valor TWODOTS programa BREAK DOTCOMMA '''",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_funcion_Data",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_funcion_Data(p):\n    'funcion_Data : VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA'\n#-----------------SWITCH-----------------------------------\ndef p_sentencia_Switch(p):\n    'sentencia_Switch : SWITCH LPAREN valor RPAREN LBRACE caso RBRACE'\ndef p_caso(p):\n    '''caso : CASE valor TWODOTS programa BREAK DOTCOMMA caso \n            | CASE valor TWODOTS programa BREAK DOTCOMMA '''\n#----------------------------------------------------------\n#----------------FUNCION FLECHA-----------------------------",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_sentencia_Switch",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_sentencia_Switch(p):\n    'sentencia_Switch : SWITCH LPAREN valor RPAREN LBRACE caso RBRACE'\ndef p_caso(p):\n    '''caso : CASE valor TWODOTS programa BREAK DOTCOMMA caso \n            | CASE valor TWODOTS programa BREAK DOTCOMMA '''\n#----------------------------------------------------------\n#----------------FUNCION FLECHA-----------------------------\ndef p_funcion_flecha(p):\n    'funcion_flecha : tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA'\n#----------------------------------------------------------",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_caso",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_caso(p):\n    '''caso : CASE valor TWODOTS programa BREAK DOTCOMMA caso \n            | CASE valor TWODOTS programa BREAK DOTCOMMA '''\n#----------------------------------------------------------\n#----------------FUNCION FLECHA-----------------------------\ndef p_funcion_flecha(p):\n    'funcion_flecha : tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA'\n#----------------------------------------------------------\n#----------------CONJUNTOS---------------------------------\ndef p_Conjunto(p):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_funcion_flecha",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_funcion_flecha(p):\n    'funcion_flecha : tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA'\n#----------------------------------------------------------\n#----------------CONJUNTOS---------------------------------\ndef p_Conjunto(p):\n    '''Conjunto : SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA\n                    | SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA'''\ndef p_cuerpo_conjunto(p):\n    '''cuerpo_conjunto : LBRACE valores RBRACE\n                | LBRACE RBRACE '''",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_Conjunto",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_Conjunto(p):\n    '''Conjunto : SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA\n                    | SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA'''\ndef p_cuerpo_conjunto(p):\n    '''cuerpo_conjunto : LBRACE valores RBRACE\n                | LBRACE RBRACE '''\n#----------------------------------------------------------\ndef p_operador(p):\n    '''operador : PLUS\n                | MINUS",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_cuerpo_conjunto",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_cuerpo_conjunto(p):\n    '''cuerpo_conjunto : LBRACE valores RBRACE\n                | LBRACE RBRACE '''\n#----------------------------------------------------------\ndef p_operador(p):\n    '''operador : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE '''\n#Roberto Encalada",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_operador",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_operador(p):\n    '''operador : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE '''\n#Roberto Encalada\n#-----------------------FOR-----------------------------------\ndef p_ciclo_for(p):\n    \"\"\"\n    ciclo_for : FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa  RBRACE",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_ciclo_for",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_ciclo_for(p):\n    \"\"\"\n    ciclo_for : FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa  RBRACE\n    \"\"\"\ndef p_contador(p):\n    '''contador : VARIABLE PLUS PLUS\n                | VARIABLE PLUS EQUALS valor\n                | VARIABLE MINUS MINUS\n                | VARIABLE MINUS EQUALS valor'''\n#----------------------------------------------------------",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_contador",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_contador(p):\n    '''contador : VARIABLE PLUS PLUS\n                | VARIABLE PLUS EQUALS valor\n                | VARIABLE MINUS MINUS\n                | VARIABLE MINUS EQUALS valor'''\n#----------------------------------------------------------\n#-----------------------Función anónima-----------------------------------\ndef p_funcion_Anonima(p):\n    \"\"\"\n    funcion_Anonima : VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_funcion_Anonima",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_funcion_Anonima(p):\n    \"\"\"\n    funcion_Anonima : VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA\n                    | tupla LBRACE programa RBRACE DOTCOMMA\n    \"\"\"\n#----------------------------------------------------------\n#-----------------------Diccionario-----------------------------------\ndef p_diccionario(p):\n    'diccionario : MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA'\ndef p_cuerpo_Diccionario(p):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_diccionario",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_diccionario(p):\n    'diccionario : MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA'\ndef p_cuerpo_Diccionario(p):\n    \"\"\"\n    cuerpo_Diccionario : LBRACE duplas RBRACE\n                    | LBRACE RBRACE\n    \"\"\"\ndef p_duplas(p):\n    '''duplas : dupla\n              | dupla COMMA duplas",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_cuerpo_Diccionario",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_cuerpo_Diccionario(p):\n    \"\"\"\n    cuerpo_Diccionario : LBRACE duplas RBRACE\n                    | LBRACE RBRACE\n    \"\"\"\ndef p_duplas(p):\n    '''duplas : dupla\n              | dupla COMMA duplas\n    '''\ndef p_dupla(p):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_duplas",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_duplas(p):\n    '''duplas : dupla\n              | dupla COMMA duplas\n    '''\ndef p_dupla(p):\n    '''dupla : valor TWODOTS valor\n    '''\n#----------------------------------------------------------\n# Crear el directorio de logs si no existe\nlog_dir = \"logs_semantico\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_dupla",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_dupla(p):\n    '''dupla : valor TWODOTS valor\n    '''\n#----------------------------------------------------------\n# Crear el directorio de logs si no existe\nlog_dir = \"logs_semantico\"\nif not os.path.exists(log_dir):\n    os.makedirs(log_dir)\n# Obtener la hora actual para los nombres de archivo de log\ncurrent_time = datetime.now().strftime(\"%d%m%Y-%Hh%M\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "p_error",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def p_error(p):\n    if p:\n        print(f\"Error sintactico en el token '{p.value}' en la linea {p.lineno}, posicion {p.lexpos}\")\n        log_file.write(f\"Syntax error at '{p.value}'\\n\")\n    else:\n        print(\"Error sintactico en el final del token\")\n        log_file.write(\"Syntax error at EOF\\n\")\n# Build the parser\nparser = yacc.yacc()\ndef parse_input(input_string):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "parse_input",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def parse_input(input_string):\n    result = parser.parse(input_string)\n    log_file.write(f\"Input: {input_string}\\nResult: {result}\\n\\n\")\n    return result\nwhile True:\n  try:\n      s = input('lp > ')\n  except EOFError:\n      break\n  if not s: continue",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "funciones",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "funciones = {}\nvariables = {}\ndef p_programa(p):\n    '''programa : cuerpo\n                | programa cuerpo'''\n    if len(p) == 2:\n        p[0] = [p[1]]\n    else:\n        p[0] = p[1] + [p[2]]\ndef p_cuerpo(p):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "variables",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "variables = {}\ndef p_programa(p):\n    '''programa : cuerpo\n                | programa cuerpo'''\n    if len(p) == 2:\n        p[0] = [p[1]]\n    else:\n        p[0] = p[1] + [p[2]]\ndef p_cuerpo(p):\n    '''cuerpo : impresion",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "log_dir",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "log_dir = \"logs_semantico\"\nif not os.path.exists(log_dir):\n    os.makedirs(log_dir)\n# Obtener la hora actual para los nombres de archivo de log\ncurrent_time = datetime.now().strftime(\"%d%m%Y-%Hh%M\")\nUsuariosGit = \"katumbac\"\n# Nombre del archivo de log\nlog_filename = f\"semantico-{UsuariosGit}-{current_time}.txt\"\nlog_filepath = os.path.join(log_dir, log_filename)\n# Archivo de log para escribir",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "current_time",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "current_time = datetime.now().strftime(\"%d%m%Y-%Hh%M\")\nUsuariosGit = \"katumbac\"\n# Nombre del archivo de log\nlog_filename = f\"semantico-{UsuariosGit}-{current_time}.txt\"\nlog_filepath = os.path.join(log_dir, log_filename)\n# Archivo de log para escribir\nlog_file = open(log_filepath, 'w')\n# Error rule for syntax errors\ndef p_error(p):\n    if p:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "UsuariosGit",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "UsuariosGit = \"katumbac\"\n# Nombre del archivo de log\nlog_filename = f\"semantico-{UsuariosGit}-{current_time}.txt\"\nlog_filepath = os.path.join(log_dir, log_filename)\n# Archivo de log para escribir\nlog_file = open(log_filepath, 'w')\n# Error rule for syntax errors\ndef p_error(p):\n    if p:\n        print(f\"Error sintactico en el token '{p.value}' en la linea {p.lineno}, posicion {p.lexpos}\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "log_filename",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "log_filename = f\"semantico-{UsuariosGit}-{current_time}.txt\"\nlog_filepath = os.path.join(log_dir, log_filename)\n# Archivo de log para escribir\nlog_file = open(log_filepath, 'w')\n# Error rule for syntax errors\ndef p_error(p):\n    if p:\n        print(f\"Error sintactico en el token '{p.value}' en la linea {p.lineno}, posicion {p.lexpos}\")\n        log_file.write(f\"Syntax error at '{p.value}'\\n\")\n    else:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "log_filepath",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "log_filepath = os.path.join(log_dir, log_filename)\n# Archivo de log para escribir\nlog_file = open(log_filepath, 'w')\n# Error rule for syntax errors\ndef p_error(p):\n    if p:\n        print(f\"Error sintactico en el token '{p.value}' en la linea {p.lineno}, posicion {p.lexpos}\")\n        log_file.write(f\"Syntax error at '{p.value}'\\n\")\n    else:\n        print(\"Error sintactico en el final del token\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "log_file",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "log_file = open(log_filepath, 'w')\n# Error rule for syntax errors\ndef p_error(p):\n    if p:\n        print(f\"Error sintactico en el token '{p.value}' en la linea {p.lineno}, posicion {p.lexpos}\")\n        log_file.write(f\"Syntax error at '{p.value}'\\n\")\n    else:\n        print(\"Error sintactico en el final del token\")\n        log_file.write(\"Syntax error at EOF\\n\")\n# Build the parser",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "parser = yacc.yacc()\ndef parse_input(input_string):\n    result = parser.parse(input_string)\n    log_file.write(f\"Input: {input_string}\\nResult: {result}\\n\\n\")\n    return result\nwhile True:\n  try:\n      s = input('lp > ')\n  except EOFError:\n      break",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "_tabversion",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_tabversion = '3.10'\n_lr_method = 'LALR'\n_lr_signature = 'ABSTRACT ADMIRATION AND ARROWFUNCTION AS BOOLEAN BREAK CASE CATCH CHAINCHAR CLASS COMMA COMMENTBLOCK COMMENTLINE CONST DEF DEFAULT DIVIDE DOLLAR DOT DOTCOMMA DOUBLE DYNAMIC ELIF ELSE ENUM EQUALS EXTENDS FALSE FINAL FINALLY FLOAT FOR IF IN INT INTEGERDIVISION INTERFACE IS LANGLE LBRACE LBRACKET LIST LPAREN MAIN MAP METHOD MINUS MOD MODULE NEQ NEW NULL NUMBER OR PLUS PRINT PRIVATE PROTECTED PUBLIC RANGLE RBRACE RBRACKET RETURN RPAREN SET STATIC STRING SUPER SWITCH THIS TIMES TRUE TRY TWODOTS TYPEDEF VAR VARIABLE VOID WHILEprograma : cuerpo\\n                | programa cuerpocuerpo : impresion\\n              | declaracion\\n              | operacion\\n              | comentario\\n              | estructuras_de_Control\\n              | RETURN \\n              | RETURN valoresestructuras_de_Control : sentencia_If\\n                            | sentencia_Switch\\n                            | ciclo_for\\n                            | funcion_Anonima\\n                            | diccionario\\n                            | Conjunto\\n                            | funcion_flecha\\n                            | funcion_Void\\n                            | funcion\\n                            | funcion_Data\\n                            | estructura_Listcomentario : COMMENTLINE\\n                  | COMMENTBLOCKimpresion : PRINT LPAREN valores RPAREN DOTCOMMA\\n                 | PRINT LPAREN operacion RPAREN DOTCOMMA\\n                 | PRINT LPAREN RPAREN DOTCOMMA\\n     sentencia_If : IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE \\n                        | IF LPAREN condicion RPAREN LBRACE programa RBRACE else\\n    \\n    else : ELSE LBRACE programa RBRACE\\n    \\n    condicion : valor Comparador valor\\n            |   condicion conector condicion\\n            |   Bool\\n    conector : AND\\n                | OR\\n    estructura_List : LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMAfuncion_Void : VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE\\n                    | VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE\\n                    | VOID MAIN LPAREN RPAREN LBRACE programa RBRACEComparador : EQUALS EQUALS\\n                    | LANGLE\\n                    | RANGLE\\n                    | LANGLE EQUALS\\n                    | RANGLE EQUALS\\n                    | NEQtupla : LPAREN valores RPARENvalores : valor\\n               | valor COMMA valores\\n               | tipo VARIABLE\\n               | tipo VARIABLE COMMA valoresBool : TRUE\\n        | FALSE \\n    valor   : VARIABLE\\n            | NUMBER\\n            | FLOAT\\n            | CHAINCHAR\\n            | Bool\\n            | operacion\\n            | tupla\\n    tipo : MAP\\n            | DOUBLE\\n            | STRING\\n            | INT\\n            | SET\\n            | LIST\\n            | BOOLEAN\\n            | FINAL\\n            | CONST\\n            | DYNAMIC\\n    \\n    declaracion : tipo VARIABLE EQUALS valor DOTCOMMA\\n                | VAR VARIABLE EQUALS valor DOTCOMMA\\n    operacion : valor operador expresionexpresion : LPAREN valor operador expresion RPAREN\\n                    | valor funcion : VARIABLE LPAREN valores RPARENfuncion_Data : VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMAsentencia_Switch : SWITCH LPAREN valor RPAREN LBRACE caso RBRACEcaso : CASE valor TWODOTS programa BREAK DOTCOMMA caso \\n            | CASE valor TWODOTS programa BREAK DOTCOMMA funcion_flecha : tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMAConjunto : SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA\\n                    | SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMAcuerpo_conjunto : LBRACE valores RBRACE\\n                | LBRACE RBRACE operador : PLUS\\n                | MINUS\\n                | TIMES\\n                | DIVIDE \\n    ciclo_for : FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa  RBRACE\\n    contador : VARIABLE PLUS PLUS\\n                | VARIABLE PLUS EQUALS valor\\n                | VARIABLE MINUS MINUS\\n                | VARIABLE MINUS EQUALS valor\\n    funcion_Anonima : VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA\\n                    | tupla LBRACE programa RBRACE DOTCOMMA\\n    diccionario : MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA\\n    cuerpo_Diccionario : LBRACE duplas RBRACE\\n                    | LBRACE RBRACE\\n    duplas : dupla\\n              | dupla COMMA duplas\\n    dupla : valor TWODOTS valor\\n    '\n_lr_action_items = {'RETURN':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[8,8,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,8,-47,-44,-72,-70,8,-46,-25,-73,-48,-23,-24,-68,-69,8,-79,-93,8,8,8,8,8,-1,8,8,8,8,8,-74,-71,-26,-75,8,-36,-37,-78,-92,-80,-27,8,8,-35,8,8,8,-94,-34,8,-87,-28,]),'PRINT':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[9,9,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,9,-47,-44,-72,-70,9,-46,-25,-73,-48,-23,-24,-68,-69,9,-79,-93,9,9,9,9,9,-1,9,9,9,9,9,-74,-71,-26,-75,9,-36,-37,-78,-92,-80,-27,9,9,-35,9,9,9,-94,-34,9,-87,-28,]),'VAR':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,77,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[14,14,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,14,105,-47,-44,-72,-70,14,-46,-25,-73,-48,-23,-24,-68,-69,14,-79,-93,14,14,14,14,14,-1,14,14,14,14,14,-74,-71,-26,-75,14,-36,-37,-78,-92,-80,-27,14,14,-35,14,14,14,-94,-34,14,-87,-28,]),'COMMENTLINE':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[15,15,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,15,-47,-44,-72,-70,15,-46,-25,-73,-48,-23,-24,-68,-69,15,-79,-93,15,15,15,15,15,-1,15,15,15,15,15,-74,-71,-26,-75,15,-36,-37,-78,-92,-80,-27,15,15,-35,15,15,15,-94,-34,15,-87,-28,]),'COMMENTBLOCK':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[16,16,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,16,-47,-44,-72,-70,16,-46,-25,-73,-48,-23,-24,-68,-69,16,-79,-93,16,16,16,16,16,-1,16,16,16,16,16,-74,-71,-26,-75,16,-36,-37,-78,-92,-80,-27,16,16,-35,16,16,16,-94,-34,16,-87,-28,]),'MAP':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[28,28,-1,-3,-4,-5,-6,-7,56,56,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,56,56,56,56,56,28,56,56,-47,-44,56,-72,-70,56,28,56,-46,56,-25,-73,56,56,56,-48,-23,-24,-68,-69,28,-79,-93,28,28,28,28,28,-1,28,28,28,28,28,-74,-71,56,-26,-75,28,-36,-37,-78,-92,-80,-27,28,28,-35,28,28,28,-94,-34,28,-87,-28,]),'DOUBLE':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[29,29,-1,-3,-4,-5,-6,-7,29,29,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,29,29,29,29,29,29,29,29,-47,-44,29,-72,-70,29,29,29,-46,29,-25,-73,29,29,29,-48,-23,-24,-68,-69,29,-79,-93,29,29,29,29,29,-1,29,29,29,29,29,-74,-71,29,-26,-75,29,-36,-37,-78,-92,-80,-27,29,29,-35,29,29,29,-94,-34,29,-87,-28,]),'STRING':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[30,30,-1,-3,-4,-5,-6,-7,30,30,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,30,30,30,30,30,30,30,30,-47,-44,30,-72,-70,30,30,30,-46,30,-25,-73,30,30,30,-48,-23,-24,-68,-69,30,-79,-93,30,30,30,30,30,-1,30,30,30,30,30,-74,-71,30,-26,-75,30,-36,-37,-78,-92,-80,-27,30,30,-35,30,30,30,-94,-34,30,-87,-28,]),'INT':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[31,31,-1,-3,-4,-5,-6,-7,31,31,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,31,31,31,31,31,31,31,31,-47,-44,31,-72,-70,31,31,31,-46,31,-25,-73,31,31,31,-48,-23,-24,-68,-69,31,-79,-93,31,31,31,31,31,-1,31,31,31,31,31,-74,-71,31,-26,-75,31,-36,-37,-78,-92,-80,-27,31,31,-35,31,31,31,-94,-34,31,-87,-28,]),'SET':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[32,32,-1,-3,-4,-5,-6,-7,57,57,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,57,57,57,57,57,32,57,57,-47,-44,57,-72,-70,57,32,57,-46,57,-25,-73,57,57,57,-48,-23,-24,-68,-69,32,-79,-93,32,32,32,32,32,-1,32,32,32,32,32,-74,-71,57,-26,-75,32,-36,-37,-78,-92,-80,-27,32,32,-35,32,32,32,-94,-34,32,-87,-28,]),'LIST':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[33,33,-1,-3,-4,-5,-6,-7,58,58,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,58,58,58,58,58,33,58,58,-47,-44,58,-72,-70,58,33,58,-46,58,-25,-73,58,58,58,-48,-23,-24,-68,-69,33,-79,-93,33,33,33,33,33,-1,33,33,33,33,33,-74,-71,58,-26,-75,33,-36,-37,-78,-92,-80,-27,33,33,-35,33,33,33,-94,-34,33,-87,-28,]),'BOOLEAN':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[34,34,-1,-3,-4,-5,-6,-7,34,34,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,34,34,34,34,34,34,34,34,-47,-44,34,-72,-70,34,34,34,-46,34,-25,-73,34,34,34,-48,-23,-24,-68,-69,34,-79,-93,34,34,34,34,34,-1,34,34,34,34,34,-74,-71,34,-26,-75,34,-36,-37,-78,-92,-80,-27,34,34,-35,34,34,34,-94,-34,34,-87,-28,]),'FINAL':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[35,35,-1,-3,-4,-5,-6,-7,35,35,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,35,35,35,35,35,35,35,35,-47,-44,35,-72,-70,35,35,35,-46,35,-25,-73,35,35,35,-48,-23,-24,-68,-69,35,-79,-93,35,35,35,35,35,-1,35,35,35,35,35,-74,-71,35,-26,-75,35,-36,-37,-78,-92,-80,-27,35,35,-35,35,35,35,-94,-34,35,-87,-28,]),'CONST':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[36,36,-1,-3,-4,-5,-6,-7,36,36,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,36,36,36,36,36,36,36,36,-47,-44,36,-72,-70,36,36,36,-46,36,-25,-73,36,36,36,-48,-23,-24,-68,-69,36,-79,-93,36,36,36,36,36,-1,36,36,36,36,36,-74,-71,36,-26,-75,36,-36,-37,-78,-92,-80,-27,36,36,-35,36,36,36,-94,-34,36,-87,-28,]),'DYNAMIC':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[37,37,-1,-3,-4,-5,-6,-7,37,37,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,37,37,37,37,37,37,37,37,-47,-44,37,-72,-70,37,37,37,-46,37,-25,-73,37,37,37,-48,-23,-24,-68,-69,37,-79,-93,37,37,37,37,37,-1,37,37,37,37,37,-74,-71,37,-26,-75,37,-36,-37,-78,-92,-80,-27,37,37,-35,37,37,37,-94,-34,37,-87,-28,]),'VARIABLE':([0,1,2,3,4,5,6,7,8,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,104,105,106,108,109,111,115,116,122,123,124,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,165,166,168,169,170,173,174,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[12,12,-1,-3,-4,-5,-6,-7,53,53,61,69,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-58,-59,-60,-61,71,-63,-64,-65,-66,-67,-52,-53,-54,-55,78,-49,-50,-2,-9,-45,81,-51,-56,-57,-58,-62,-63,53,53,89,53,-83,-84,-85,-86,12,53,53,53,-47,-44,53,53,-72,-70,53,53,12,53,137,138,53,-46,53,-25,-73,53,53,155,156,53,-32,-33,53,-39,-40,-43,-48,-23,-24,-68,53,-69,12,-79,-93,12,-38,-41,-42,183,53,12,12,12,12,191,-1,12,53,12,12,12,12,-74,-71,53,-26,-75,12,-36,-37,-78,-92,-80,-27,12,12,53,53,-35,53,12,12,12,-94,-34,12,-87,53,53,-28,]),'NUMBER':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[38,38,-1,-3,-4,-5,-6,-7,38,38,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,38,38,38,-83,-84,-85,-86,38,38,38,38,-47,-44,38,38,-72,-70,38,38,38,38,38,-46,38,-25,-73,38,38,38,-32,-33,38,-39,-40,-43,-48,-23,-24,-68,38,-69,38,-79,-93,38,-38,-41,-42,38,38,38,38,38,-1,38,38,38,38,38,38,-74,-71,38,-26,-75,38,-36,-37,-78,-92,-80,-27,38,38,38,38,-35,38,38,38,38,-94,-34,38,-87,38,38,-28,]),'FLOAT':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[39,39,-1,-3,-4,-5,-6,-7,39,39,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,39,39,39,-83,-84,-85,-86,39,39,39,39,-47,-44,39,39,-72,-70,39,39,39,39,39,-46,39,-25,-73,39,39,39,-32,-33,39,-39,-40,-43,-48,-23,-24,-68,39,-69,39,-79,-93,39,-38,-41,-42,39,39,39,39,39,-1,39,39,39,39,39,39,-74,-71,39,-26,-75,39,-36,-37,-78,-92,-80,-27,39,39,39,39,-35,39,39,39,39,-94,-34,39,-87,39,39,-28,]),'CHAINCHAR':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[40,40,-1,-3,-4,-5,-6,-7,40,40,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,40,40,40,-83,-84,-85,-86,40,40,40,40,-47,-44,40,40,-72,-70,40,40,40,40,40,-46,40,-25,-73,40,40,40,-32,-33,40,-39,-40,-43,-48,-23,-24,-68,40,-69,40,-79,-93,40,-38,-41,-42,40,40,40,40,40,-1,40,40,40,40,40,40,-74,-71,40,-26,-75,40,-36,-37,-78,-92,-80,-27,40,40,40,40,-35,40,40,40,40,-94,-34,40,-87,40,40,-28,]),'IF':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[43,43,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,43,-47,-44,-72,-70,43,-46,-25,-73,-48,-23,-24,-68,-69,43,-79,-93,43,43,43,43,43,-1,43,43,43,43,43,-74,-71,-26,-75,43,-36,-37,-78,-92,-80,-27,43,43,-35,43,43,43,-94,-34,43,-87,-28,]),'SWITCH':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[44,44,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,44,-47,-44,-72,-70,44,-46,-25,-73,-48,-23,-24,-68,-69,44,-79,-93,44,44,44,44,44,-1,44,44,44,44,44,-74,-71,-26,-75,44,-36,-37,-78,-92,-80,-27,44,44,-35,44,44,44,-94,-34,44,-87,-28,]),'FOR':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[45,45,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,45,-47,-44,-72,-70,45,-46,-25,-73,-48,-23,-24,-68,-69,45,-79,-93,45,45,45,45,45,-1,45,45,45,45,45,-74,-71,-26,-75,45,-36,-37,-78,-92,-80,-27,45,45,-35,45,45,45,-94,-34,45,-87,-28,]),'VOID':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[46,46,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,46,-47,-44,-72,-70,46,-46,-25,-73,-48,-23,-24,-68,-69,46,-79,-93,46,46,46,46,46,-1,46,46,46,46,46,-74,-71,-26,-75,46,-36,-37,-78,-92,-80,-27,46,46,-35,46,46,46,-94,-34,46,-87,-28,]),'TRUE':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[47,47,-1,-3,-4,-5,-6,-7,47,47,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,47,47,47,-83,-84,-85,-86,47,47,47,47,-47,-44,47,47,-72,-70,47,47,47,47,47,-46,47,-25,-73,47,47,47,-32,-33,47,-39,-40,-43,-48,-23,-24,-68,47,-69,47,-79,-93,47,-38,-41,-42,47,47,47,47,47,-1,47,47,47,47,47,47,-74,-71,47,-26,-75,47,-36,-37,-78,-92,-80,-27,47,47,47,47,-35,47,47,47,47,-94,-34,47,-87,47,47,-28,]),'FALSE':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[48,48,-1,-3,-4,-5,-6,-7,48,48,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,48,48,48,-83,-84,-85,-86,48,48,48,48,-47,-44,48,48,-72,-70,48,48,48,48,48,-46,48,-25,-73,48,48,48,-32,-33,48,-39,-40,-43,-48,-23,-24,-68,48,-69,48,-79,-93,48,-38,-41,-42,48,48,48,48,48,-1,48,48,48,48,48,48,-74,-71,48,-26,-75,48,-36,-37,-78,-92,-80,-27,48,48,48,48,-35,48,48,48,48,-94,-34,48,-87,48,48,-28,]),'LPAREN':([0,1,2,3,4,5,6,7,8,9,10,12,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,43,44,45,47,48,49,50,51,53,54,55,59,61,62,64,65,66,67,68,74,75,76,78,79,80,81,85,86,87,89,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[10,10,-1,-3,-4,-5,-6,-7,10,59,10,62,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,75,76,77,-49,-50,-2,-9,-45,-51,-56,-57,10,87,10,92,-83,-84,-85,-86,10,10,10,106,107,10,-47,-44,10,10,116,-72,-70,10,10,10,10,10,-46,10,-25,-73,10,10,10,-32,-33,10,-39,-40,-43,-48,-23,-24,-68,92,-69,10,-79,-93,10,-38,-41,-42,10,10,10,10,10,-1,10,10,10,10,10,10,-74,-71,10,-26,-75,10,-36,-37,-78,-92,-80,-27,10,10,10,10,-35,10,10,10,10,-94,-34,10,-87,10,10,-28,]),'$end':([1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,81,85,90,91,108,111,115,142,143,144,145,149,152,157,188,189,194,196,202,203,204,205,207,209,217,226,231,234,238,],[0,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,-47,-44,-72,-70,-46,-25,-73,-48,-23,-24,-68,-69,-79,-93,-74,-71,-26,-75,-36,-37,-78,-92,-80,-27,-35,-94,-34,-87,-28,]),'RBRACE':([2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,81,85,90,91,98,108,111,115,122,142,143,144,145,149,152,153,157,173,178,179,180,185,186,188,189,194,196,201,202,203,204,205,207,209,217,219,223,226,227,229,231,232,234,238,239,240,241,242,],[-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,-47,-44,-72,-70,125,-46,-25,-73,154,-48,-23,-24,-68,-69,-79,175,-93,190,194,195,196,202,203,-74,-71,-26,-75,217,-36,-37,-78,-92,-80,-27,-35,228,234,-94,235,-97,-34,238,-87,-28,-77,-98,-99,-76,]),'DOTCOMMA':([2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,81,83,85,90,91,101,108,110,111,112,113,115,118,119,121,125,136,142,143,144,145,149,152,154,157,159,160,171,175,187,188,189,190,192,194,196,202,203,204,205,207,209,217,218,220,226,228,231,233,234,235,238,],[-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,-47,111,-44,-72,-70,-31,-46,143,-25,144,145,-73,149,-57,152,157,165,-48,-23,-24,-68,-69,-79,-82,-93,-30,-29,188,-81,204,-74,-71,205,207,-26,-75,-36,-37,-78,-92,-80,-27,-35,226,231,-94,-96,-34,239,-87,-95,-28,]),'BREAK':([2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,81,85,90,91,108,111,115,142,143,144,145,149,152,157,188,189,194,196,202,203,204,205,207,209,217,222,226,231,234,238,],[-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,-47,-44,-72,-70,-46,-25,-73,-48,-23,-24,-68,-69,-79,-93,-74,-71,-26,-75,-36,-37,-78,-92,-80,-27,-35,233,-94,-34,-87,-28,]),'PLUS':([5,12,13,38,39,40,41,42,47,48,51,53,54,55,84,85,90,91,100,101,102,113,117,118,119,160,172,183,189,197,199,224,225,230,241,],[-56,-51,65,-52,-53,-54,-55,-57,-49,-50,65,-51,-56,-57,-56,-44,65,-70,65,-55,65,65,65,65,-57,65,-70,199,-71,65,213,65,65,65,65,]),'MINUS':([5,12,13,38,39,40,41,42,47,48,51,53,54,55,84,85,90,91,100,101,102,113,117,118,119,160,172,183,189,197,200,224,225,230,241,],[-56,-51,66,-52,-53,-54,-55,-57,-49,-50,66,-51,-56,-57,-56,-44,66,-70,66,-55,66,66,66,66,-57,66,-70,200,-71,66,215,66,66,66,66,]),'TIMES':([5,12,13,38,39,40,41,42,47,48,51,53,54,55,84,85,90,91,100,101,102,113,117,118,119,160,172,189,197,224,225,230,241,],[-56,-51,67,-52,-53,-54,-55,-57,-49,-50,67,-51,-56,-57,-56,-44,67,-70,67,-55,67,67,67,67,-57,67,-70,-71,67,67,67,67,67,]),'DIVIDE':([5,12,13,38,39,40,41,42,47,48,51,53,54,55,84,85,90,91,100,101,102,113,117,118,119,160,172,189,197,224,225,230,241,],[-56,-51,68,-52,-53,-54,-55,-57,-49,-50,68,-51,-56,-57,-56,-44,68,-70,68,-55,68,68,68,68,-57,68,-70,-71,68,68,68,68,68,]),'DOT':([12,],[63,]),'LANGLE':([28,32,33,38,39,40,41,47,48,53,54,55,85,90,91,100,101,189,],[70,72,73,-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,132,-55,-71,]),'COMMA':([29,30,31,34,35,36,37,38,39,40,41,47,48,51,53,54,55,56,57,58,81,84,85,90,91,94,117,172,189,229,241,],[-59,-60,-61,-64,-65,-66,-67,-52,-53,-54,-55,-49,-50,80,-51,-56,-57,-58,-62,-63,109,-56,-44,-72,-70,120,80,-70,-71,236,-99,]),'RANGLE':([29,30,31,34,35,36,37,38,39,40,41,47,48,53,54,55,56,57,58,85,90,91,96,97,100,101,151,189,],[-59,-60,-61,-64,-65,-66,-67,-52,-53,-54,-55,-49,-50,-51,-56,-57,-58,-62,-63,-44,-72,-70,123,124,133,-55,174,-71,]),'RPAREN':([38,39,40,41,47,48,51,53,54,55,59,60,81,82,84,85,88,90,91,99,101,102,106,107,108,114,117,139,142,147,159,160,172,182,189,213,215,224,225,],[-52,-53,-54,-55,-49,-50,-45,-51,-56,-57,83,85,-47,110,112,-44,115,-72,-70,126,-31,135,140,141,-46,146,-45,167,-48,171,-30,-29,189,198,-71,-88,-90,-89,-91,]),'EQUALS':([38,39,40,41,47,48,53,54,55,61,69,71,85,90,91,100,101,131,132,133,137,138,155,156,189,191,199,200,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,86,93,95,-44,-72,-70,131,-55,161,162,163,86,166,176,177,-71,206,214,216,]),'NEQ':([38,39,40,41,47,48,53,54,55,85,90,91,100,101,189,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,134,-55,-71,]),'RBRACKET':([38,39,40,41,47,48,51,53,54,55,81,85,90,91,108,142,189,208,],[-52,-53,-54,-55,-49,-50,-45,-51,-56,-57,-47,-44,-72,-70,-46,-48,-71,220,]),'AND':([38,39,40,41,47,48,53,54,55,85,90,91,99,101,136,159,160,189,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,128,-31,128,128,-29,-71,]),'OR':([38,39,40,41,47,48,53,54,55,85,90,91,99,101,136,159,160,189,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,129,-31,129,129,-29,-71,]),'TWODOTS':([38,39,40,41,47,48,53,54,55,85,90,91,189,197,230,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,-71,211,237,]),'LBRACE':([42,85,95,119,126,135,140,141,167,176,198,206,210,],[74,-44,122,150,158,164,168,169,184,122,212,219,221,]),'MAIN':([46,],[79,]),'ARROWFUNCTION':([146,],[170,]),'CASE':([164,239,],[181,181,]),'LBRACKET':([177,],[193,]),'ELSE':([195,],[210,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_method",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_method = 'LALR'\n_lr_signature = 'ABSTRACT ADMIRATION AND ARROWFUNCTION AS BOOLEAN BREAK CASE CATCH CHAINCHAR CLASS COMMA COMMENTBLOCK COMMENTLINE CONST DEF DEFAULT DIVIDE DOLLAR DOT DOTCOMMA DOUBLE DYNAMIC ELIF ELSE ENUM EQUALS EXTENDS FALSE FINAL FINALLY FLOAT FOR IF IN INT INTEGERDIVISION INTERFACE IS LANGLE LBRACE LBRACKET LIST LPAREN MAIN MAP METHOD MINUS MOD MODULE NEQ NEW NULL NUMBER OR PLUS PRINT PRIVATE PROTECTED PUBLIC RANGLE RBRACE RBRACKET RETURN RPAREN SET STATIC STRING SUPER SWITCH THIS TIMES TRUE TRY TWODOTS TYPEDEF VAR VARIABLE VOID WHILEprograma : cuerpo\\n                | programa cuerpocuerpo : impresion\\n              | declaracion\\n              | operacion\\n              | comentario\\n              | estructuras_de_Control\\n              | RETURN \\n              | RETURN valoresestructuras_de_Control : sentencia_If\\n                            | sentencia_Switch\\n                            | ciclo_for\\n                            | funcion_Anonima\\n                            | diccionario\\n                            | Conjunto\\n                            | funcion_flecha\\n                            | funcion_Void\\n                            | funcion\\n                            | funcion_Data\\n                            | estructura_Listcomentario : COMMENTLINE\\n                  | COMMENTBLOCKimpresion : PRINT LPAREN valores RPAREN DOTCOMMA\\n                 | PRINT LPAREN operacion RPAREN DOTCOMMA\\n                 | PRINT LPAREN RPAREN DOTCOMMA\\n     sentencia_If : IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE \\n                        | IF LPAREN condicion RPAREN LBRACE programa RBRACE else\\n    \\n    else : ELSE LBRACE programa RBRACE\\n    \\n    condicion : valor Comparador valor\\n            |   condicion conector condicion\\n            |   Bool\\n    conector : AND\\n                | OR\\n    estructura_List : LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMAfuncion_Void : VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE\\n                    | VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE\\n                    | VOID MAIN LPAREN RPAREN LBRACE programa RBRACEComparador : EQUALS EQUALS\\n                    | LANGLE\\n                    | RANGLE\\n                    | LANGLE EQUALS\\n                    | RANGLE EQUALS\\n                    | NEQtupla : LPAREN valores RPARENvalores : valor\\n               | valor COMMA valores\\n               | tipo VARIABLE\\n               | tipo VARIABLE COMMA valoresBool : TRUE\\n        | FALSE \\n    valor   : VARIABLE\\n            | NUMBER\\n            | FLOAT\\n            | CHAINCHAR\\n            | Bool\\n            | operacion\\n            | tupla\\n    tipo : MAP\\n            | DOUBLE\\n            | STRING\\n            | INT\\n            | SET\\n            | LIST\\n            | BOOLEAN\\n            | FINAL\\n            | CONST\\n            | DYNAMIC\\n    \\n    declaracion : tipo VARIABLE EQUALS valor DOTCOMMA\\n                | VAR VARIABLE EQUALS valor DOTCOMMA\\n    operacion : valor operador expresionexpresion : LPAREN valor operador expresion RPAREN\\n                    | valor funcion : VARIABLE LPAREN valores RPARENfuncion_Data : VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMAsentencia_Switch : SWITCH LPAREN valor RPAREN LBRACE caso RBRACEcaso : CASE valor TWODOTS programa BREAK DOTCOMMA caso \\n            | CASE valor TWODOTS programa BREAK DOTCOMMA funcion_flecha : tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMAConjunto : SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA\\n                    | SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMAcuerpo_conjunto : LBRACE valores RBRACE\\n                | LBRACE RBRACE operador : PLUS\\n                | MINUS\\n                | TIMES\\n                | DIVIDE \\n    ciclo_for : FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa  RBRACE\\n    contador : VARIABLE PLUS PLUS\\n                | VARIABLE PLUS EQUALS valor\\n                | VARIABLE MINUS MINUS\\n                | VARIABLE MINUS EQUALS valor\\n    funcion_Anonima : VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA\\n                    | tupla LBRACE programa RBRACE DOTCOMMA\\n    diccionario : MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA\\n    cuerpo_Diccionario : LBRACE duplas RBRACE\\n                    | LBRACE RBRACE\\n    duplas : dupla\\n              | dupla COMMA duplas\\n    dupla : valor TWODOTS valor\\n    '\n_lr_action_items = {'RETURN':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[8,8,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,8,-47,-44,-72,-70,8,-46,-25,-73,-48,-23,-24,-68,-69,8,-79,-93,8,8,8,8,8,-1,8,8,8,8,8,-74,-71,-26,-75,8,-36,-37,-78,-92,-80,-27,8,8,-35,8,8,8,-94,-34,8,-87,-28,]),'PRINT':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[9,9,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,9,-47,-44,-72,-70,9,-46,-25,-73,-48,-23,-24,-68,-69,9,-79,-93,9,9,9,9,9,-1,9,9,9,9,9,-74,-71,-26,-75,9,-36,-37,-78,-92,-80,-27,9,9,-35,9,9,9,-94,-34,9,-87,-28,]),'VAR':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,77,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[14,14,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,14,105,-47,-44,-72,-70,14,-46,-25,-73,-48,-23,-24,-68,-69,14,-79,-93,14,14,14,14,14,-1,14,14,14,14,14,-74,-71,-26,-75,14,-36,-37,-78,-92,-80,-27,14,14,-35,14,14,14,-94,-34,14,-87,-28,]),'COMMENTLINE':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[15,15,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,15,-47,-44,-72,-70,15,-46,-25,-73,-48,-23,-24,-68,-69,15,-79,-93,15,15,15,15,15,-1,15,15,15,15,15,-74,-71,-26,-75,15,-36,-37,-78,-92,-80,-27,15,15,-35,15,15,15,-94,-34,15,-87,-28,]),'COMMENTBLOCK':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[16,16,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,16,-47,-44,-72,-70,16,-46,-25,-73,-48,-23,-24,-68,-69,16,-79,-93,16,16,16,16,16,-1,16,16,16,16,16,-74,-71,-26,-75,16,-36,-37,-78,-92,-80,-27,16,16,-35,16,16,16,-94,-34,16,-87,-28,]),'MAP':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[28,28,-1,-3,-4,-5,-6,-7,56,56,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,56,56,56,56,56,28,56,56,-47,-44,56,-72,-70,56,28,56,-46,56,-25,-73,56,56,56,-48,-23,-24,-68,-69,28,-79,-93,28,28,28,28,28,-1,28,28,28,28,28,-74,-71,56,-26,-75,28,-36,-37,-78,-92,-80,-27,28,28,-35,28,28,28,-94,-34,28,-87,-28,]),'DOUBLE':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[29,29,-1,-3,-4,-5,-6,-7,29,29,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,29,29,29,29,29,29,29,29,-47,-44,29,-72,-70,29,29,29,-46,29,-25,-73,29,29,29,-48,-23,-24,-68,-69,29,-79,-93,29,29,29,29,29,-1,29,29,29,29,29,-74,-71,29,-26,-75,29,-36,-37,-78,-92,-80,-27,29,29,-35,29,29,29,-94,-34,29,-87,-28,]),'STRING':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[30,30,-1,-3,-4,-5,-6,-7,30,30,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,30,30,30,30,30,30,30,30,-47,-44,30,-72,-70,30,30,30,-46,30,-25,-73,30,30,30,-48,-23,-24,-68,-69,30,-79,-93,30,30,30,30,30,-1,30,30,30,30,30,-74,-71,30,-26,-75,30,-36,-37,-78,-92,-80,-27,30,30,-35,30,30,30,-94,-34,30,-87,-28,]),'INT':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[31,31,-1,-3,-4,-5,-6,-7,31,31,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,31,31,31,31,31,31,31,31,-47,-44,31,-72,-70,31,31,31,-46,31,-25,-73,31,31,31,-48,-23,-24,-68,-69,31,-79,-93,31,31,31,31,31,-1,31,31,31,31,31,-74,-71,31,-26,-75,31,-36,-37,-78,-92,-80,-27,31,31,-35,31,31,31,-94,-34,31,-87,-28,]),'SET':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[32,32,-1,-3,-4,-5,-6,-7,57,57,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,57,57,57,57,57,32,57,57,-47,-44,57,-72,-70,57,32,57,-46,57,-25,-73,57,57,57,-48,-23,-24,-68,-69,32,-79,-93,32,32,32,32,32,-1,32,32,32,32,32,-74,-71,57,-26,-75,32,-36,-37,-78,-92,-80,-27,32,32,-35,32,32,32,-94,-34,32,-87,-28,]),'LIST':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[33,33,-1,-3,-4,-5,-6,-7,58,58,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,58,58,58,58,58,33,58,58,-47,-44,58,-72,-70,58,33,58,-46,58,-25,-73,58,58,58,-48,-23,-24,-68,-69,33,-79,-93,33,33,33,33,33,-1,33,33,33,33,33,-74,-71,58,-26,-75,33,-36,-37,-78,-92,-80,-27,33,33,-35,33,33,33,-94,-34,33,-87,-28,]),'BOOLEAN':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[34,34,-1,-3,-4,-5,-6,-7,34,34,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,34,34,34,34,34,34,34,34,-47,-44,34,-72,-70,34,34,34,-46,34,-25,-73,34,34,34,-48,-23,-24,-68,-69,34,-79,-93,34,34,34,34,34,-1,34,34,34,34,34,-74,-71,34,-26,-75,34,-36,-37,-78,-92,-80,-27,34,34,-35,34,34,34,-94,-34,34,-87,-28,]),'FINAL':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[35,35,-1,-3,-4,-5,-6,-7,35,35,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,35,35,35,35,35,35,35,35,-47,-44,35,-72,-70,35,35,35,-46,35,-25,-73,35,35,35,-48,-23,-24,-68,-69,35,-79,-93,35,35,35,35,35,-1,35,35,35,35,35,-74,-71,35,-26,-75,35,-36,-37,-78,-92,-80,-27,35,35,-35,35,35,35,-94,-34,35,-87,-28,]),'CONST':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[36,36,-1,-3,-4,-5,-6,-7,36,36,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,36,36,36,36,36,36,36,36,-47,-44,36,-72,-70,36,36,36,-46,36,-25,-73,36,36,36,-48,-23,-24,-68,-69,36,-79,-93,36,36,36,36,36,-1,36,36,36,36,36,-74,-71,36,-26,-75,36,-36,-37,-78,-92,-80,-27,36,36,-35,36,36,36,-94,-34,36,-87,-28,]),'DYNAMIC':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[37,37,-1,-3,-4,-5,-6,-7,37,37,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,37,37,37,37,37,37,37,37,-47,-44,37,-72,-70,37,37,37,-46,37,-25,-73,37,37,37,-48,-23,-24,-68,-69,37,-79,-93,37,37,37,37,37,-1,37,37,37,37,37,-74,-71,37,-26,-75,37,-36,-37,-78,-92,-80,-27,37,37,-35,37,37,37,-94,-34,37,-87,-28,]),'VARIABLE':([0,1,2,3,4,5,6,7,8,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,104,105,106,108,109,111,115,116,122,123,124,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,165,166,168,169,170,173,174,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[12,12,-1,-3,-4,-5,-6,-7,53,53,61,69,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-58,-59,-60,-61,71,-63,-64,-65,-66,-67,-52,-53,-54,-55,78,-49,-50,-2,-9,-45,81,-51,-56,-57,-58,-62,-63,53,53,89,53,-83,-84,-85,-86,12,53,53,53,-47,-44,53,53,-72,-70,53,53,12,53,137,138,53,-46,53,-25,-73,53,53,155,156,53,-32,-33,53,-39,-40,-43,-48,-23,-24,-68,53,-69,12,-79,-93,12,-38,-41,-42,183,53,12,12,12,12,191,-1,12,53,12,12,12,12,-74,-71,53,-26,-75,12,-36,-37,-78,-92,-80,-27,12,12,53,53,-35,53,12,12,12,-94,-34,12,-87,53,53,-28,]),'NUMBER':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[38,38,-1,-3,-4,-5,-6,-7,38,38,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,38,38,38,-83,-84,-85,-86,38,38,38,38,-47,-44,38,38,-72,-70,38,38,38,38,38,-46,38,-25,-73,38,38,38,-32,-33,38,-39,-40,-43,-48,-23,-24,-68,38,-69,38,-79,-93,38,-38,-41,-42,38,38,38,38,38,-1,38,38,38,38,38,38,-74,-71,38,-26,-75,38,-36,-37,-78,-92,-80,-27,38,38,38,38,-35,38,38,38,38,-94,-34,38,-87,38,38,-28,]),'FLOAT':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[39,39,-1,-3,-4,-5,-6,-7,39,39,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,39,39,39,-83,-84,-85,-86,39,39,39,39,-47,-44,39,39,-72,-70,39,39,39,39,39,-46,39,-25,-73,39,39,39,-32,-33,39,-39,-40,-43,-48,-23,-24,-68,39,-69,39,-79,-93,39,-38,-41,-42,39,39,39,39,39,-1,39,39,39,39,39,39,-74,-71,39,-26,-75,39,-36,-37,-78,-92,-80,-27,39,39,39,39,-35,39,39,39,39,-94,-34,39,-87,39,39,-28,]),'CHAINCHAR':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[40,40,-1,-3,-4,-5,-6,-7,40,40,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,40,40,40,-83,-84,-85,-86,40,40,40,40,-47,-44,40,40,-72,-70,40,40,40,40,40,-46,40,-25,-73,40,40,40,-32,-33,40,-39,-40,-43,-48,-23,-24,-68,40,-69,40,-79,-93,40,-38,-41,-42,40,40,40,40,40,-1,40,40,40,40,40,40,-74,-71,40,-26,-75,40,-36,-37,-78,-92,-80,-27,40,40,40,40,-35,40,40,40,40,-94,-34,40,-87,40,40,-28,]),'IF':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[43,43,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,43,-47,-44,-72,-70,43,-46,-25,-73,-48,-23,-24,-68,-69,43,-79,-93,43,43,43,43,43,-1,43,43,43,43,43,-74,-71,-26,-75,43,-36,-37,-78,-92,-80,-27,43,43,-35,43,43,43,-94,-34,43,-87,-28,]),'SWITCH':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[44,44,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,44,-47,-44,-72,-70,44,-46,-25,-73,-48,-23,-24,-68,-69,44,-79,-93,44,44,44,44,44,-1,44,44,44,44,44,-74,-71,-26,-75,44,-36,-37,-78,-92,-80,-27,44,44,-35,44,44,44,-94,-34,44,-87,-28,]),'FOR':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[45,45,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,45,-47,-44,-72,-70,45,-46,-25,-73,-48,-23,-24,-68,-69,45,-79,-93,45,45,45,45,45,-1,45,45,45,45,45,-74,-71,-26,-75,45,-36,-37,-78,-92,-80,-27,45,45,-35,45,45,45,-94,-34,45,-87,-28,]),'VOID':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[46,46,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,46,-47,-44,-72,-70,46,-46,-25,-73,-48,-23,-24,-68,-69,46,-79,-93,46,46,46,46,46,-1,46,46,46,46,46,-74,-71,-26,-75,46,-36,-37,-78,-92,-80,-27,46,46,-35,46,46,46,-94,-34,46,-87,-28,]),'TRUE':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[47,47,-1,-3,-4,-5,-6,-7,47,47,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,47,47,47,-83,-84,-85,-86,47,47,47,47,-47,-44,47,47,-72,-70,47,47,47,47,47,-46,47,-25,-73,47,47,47,-32,-33,47,-39,-40,-43,-48,-23,-24,-68,47,-69,47,-79,-93,47,-38,-41,-42,47,47,47,47,47,-1,47,47,47,47,47,47,-74,-71,47,-26,-75,47,-36,-37,-78,-92,-80,-27,47,47,47,47,-35,47,47,47,47,-94,-34,47,-87,47,47,-28,]),'FALSE':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[48,48,-1,-3,-4,-5,-6,-7,48,48,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,48,48,48,-83,-84,-85,-86,48,48,48,48,-47,-44,48,48,-72,-70,48,48,48,48,48,-46,48,-25,-73,48,48,48,-32,-33,48,-39,-40,-43,-48,-23,-24,-68,48,-69,48,-79,-93,48,-38,-41,-42,48,48,48,48,48,-1,48,48,48,48,48,48,-74,-71,48,-26,-75,48,-36,-37,-78,-92,-80,-27,48,48,48,48,-35,48,48,48,48,-94,-34,48,-87,48,48,-28,]),'LPAREN':([0,1,2,3,4,5,6,7,8,9,10,12,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,43,44,45,47,48,49,50,51,53,54,55,59,61,62,64,65,66,67,68,74,75,76,78,79,80,81,85,86,87,89,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[10,10,-1,-3,-4,-5,-6,-7,10,59,10,62,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,75,76,77,-49,-50,-2,-9,-45,-51,-56,-57,10,87,10,92,-83,-84,-85,-86,10,10,10,106,107,10,-47,-44,10,10,116,-72,-70,10,10,10,10,10,-46,10,-25,-73,10,10,10,-32,-33,10,-39,-40,-43,-48,-23,-24,-68,92,-69,10,-79,-93,10,-38,-41,-42,10,10,10,10,10,-1,10,10,10,10,10,10,-74,-71,10,-26,-75,10,-36,-37,-78,-92,-80,-27,10,10,10,10,-35,10,10,10,10,-94,-34,10,-87,10,10,-28,]),'$end':([1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,81,85,90,91,108,111,115,142,143,144,145,149,152,157,188,189,194,196,202,203,204,205,207,209,217,226,231,234,238,],[0,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,-47,-44,-72,-70,-46,-25,-73,-48,-23,-24,-68,-69,-79,-93,-74,-71,-26,-75,-36,-37,-78,-92,-80,-27,-35,-94,-34,-87,-28,]),'RBRACE':([2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,81,85,90,91,98,108,111,115,122,142,143,144,145,149,152,153,157,173,178,179,180,185,186,188,189,194,196,201,202,203,204,205,207,209,217,219,223,226,227,229,231,232,234,238,239,240,241,242,],[-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,-47,-44,-72,-70,125,-46,-25,-73,154,-48,-23,-24,-68,-69,-79,175,-93,190,194,195,196,202,203,-74,-71,-26,-75,217,-36,-37,-78,-92,-80,-27,-35,228,234,-94,235,-97,-34,238,-87,-28,-77,-98,-99,-76,]),'DOTCOMMA':([2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,81,83,85,90,91,101,108,110,111,112,113,115,118,119,121,125,136,142,143,144,145,149,152,154,157,159,160,171,175,187,188,189,190,192,194,196,202,203,204,205,207,209,217,218,220,226,228,231,233,234,235,238,],[-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,-47,111,-44,-72,-70,-31,-46,143,-25,144,145,-73,149,-57,152,157,165,-48,-23,-24,-68,-69,-79,-82,-93,-30,-29,188,-81,204,-74,-71,205,207,-26,-75,-36,-37,-78,-92,-80,-27,-35,226,231,-94,-96,-34,239,-87,-95,-28,]),'BREAK':([2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,81,85,90,91,108,111,115,142,143,144,145,149,152,157,188,189,194,196,202,203,204,205,207,209,217,222,226,231,234,238,],[-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,-47,-44,-72,-70,-46,-25,-73,-48,-23,-24,-68,-69,-79,-93,-74,-71,-26,-75,-36,-37,-78,-92,-80,-27,-35,233,-94,-34,-87,-28,]),'PLUS':([5,12,13,38,39,40,41,42,47,48,51,53,54,55,84,85,90,91,100,101,102,113,117,118,119,160,172,183,189,197,199,224,225,230,241,],[-56,-51,65,-52,-53,-54,-55,-57,-49,-50,65,-51,-56,-57,-56,-44,65,-70,65,-55,65,65,65,65,-57,65,-70,199,-71,65,213,65,65,65,65,]),'MINUS':([5,12,13,38,39,40,41,42,47,48,51,53,54,55,84,85,90,91,100,101,102,113,117,118,119,160,172,183,189,197,200,224,225,230,241,],[-56,-51,66,-52,-53,-54,-55,-57,-49,-50,66,-51,-56,-57,-56,-44,66,-70,66,-55,66,66,66,66,-57,66,-70,200,-71,66,215,66,66,66,66,]),'TIMES':([5,12,13,38,39,40,41,42,47,48,51,53,54,55,84,85,90,91,100,101,102,113,117,118,119,160,172,189,197,224,225,230,241,],[-56,-51,67,-52,-53,-54,-55,-57,-49,-50,67,-51,-56,-57,-56,-44,67,-70,67,-55,67,67,67,67,-57,67,-70,-71,67,67,67,67,67,]),'DIVIDE':([5,12,13,38,39,40,41,42,47,48,51,53,54,55,84,85,90,91,100,101,102,113,117,118,119,160,172,189,197,224,225,230,241,],[-56,-51,68,-52,-53,-54,-55,-57,-49,-50,68,-51,-56,-57,-56,-44,68,-70,68,-55,68,68,68,68,-57,68,-70,-71,68,68,68,68,68,]),'DOT':([12,],[63,]),'LANGLE':([28,32,33,38,39,40,41,47,48,53,54,55,85,90,91,100,101,189,],[70,72,73,-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,132,-55,-71,]),'COMMA':([29,30,31,34,35,36,37,38,39,40,41,47,48,51,53,54,55,56,57,58,81,84,85,90,91,94,117,172,189,229,241,],[-59,-60,-61,-64,-65,-66,-67,-52,-53,-54,-55,-49,-50,80,-51,-56,-57,-58,-62,-63,109,-56,-44,-72,-70,120,80,-70,-71,236,-99,]),'RANGLE':([29,30,31,34,35,36,37,38,39,40,41,47,48,53,54,55,56,57,58,85,90,91,96,97,100,101,151,189,],[-59,-60,-61,-64,-65,-66,-67,-52,-53,-54,-55,-49,-50,-51,-56,-57,-58,-62,-63,-44,-72,-70,123,124,133,-55,174,-71,]),'RPAREN':([38,39,40,41,47,48,51,53,54,55,59,60,81,82,84,85,88,90,91,99,101,102,106,107,108,114,117,139,142,147,159,160,172,182,189,213,215,224,225,],[-52,-53,-54,-55,-49,-50,-45,-51,-56,-57,83,85,-47,110,112,-44,115,-72,-70,126,-31,135,140,141,-46,146,-45,167,-48,171,-30,-29,189,198,-71,-88,-90,-89,-91,]),'EQUALS':([38,39,40,41,47,48,53,54,55,61,69,71,85,90,91,100,101,131,132,133,137,138,155,156,189,191,199,200,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,86,93,95,-44,-72,-70,131,-55,161,162,163,86,166,176,177,-71,206,214,216,]),'NEQ':([38,39,40,41,47,48,53,54,55,85,90,91,100,101,189,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,134,-55,-71,]),'RBRACKET':([38,39,40,41,47,48,51,53,54,55,81,85,90,91,108,142,189,208,],[-52,-53,-54,-55,-49,-50,-45,-51,-56,-57,-47,-44,-72,-70,-46,-48,-71,220,]),'AND':([38,39,40,41,47,48,53,54,55,85,90,91,99,101,136,159,160,189,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,128,-31,128,128,-29,-71,]),'OR':([38,39,40,41,47,48,53,54,55,85,90,91,99,101,136,159,160,189,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,129,-31,129,129,-29,-71,]),'TWODOTS':([38,39,40,41,47,48,53,54,55,85,90,91,189,197,230,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,-71,211,237,]),'LBRACE':([42,85,95,119,126,135,140,141,167,176,198,206,210,],[74,-44,122,150,158,164,168,169,184,122,212,219,221,]),'MAIN':([46,],[79,]),'ARROWFUNCTION':([146,],[170,]),'CASE':([164,239,],[181,181,]),'LBRACKET':([177,],[193,]),'ELSE':([195,],[210,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'programa':([0,74,150,158,168,169,170,184,211,212,221,],[1,98,173,179,185,186,187,201,222,223,232,]),'cuerpo':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[2,49,2,49,2,178,2,2,2,49,49,2,49,49,49,49,2,2,2,49,49,49,]),'impresion':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'declaracion':([0,1,74,77,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[4,4,4,103,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'operacion':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[5,5,54,54,84,54,54,5,54,54,54,54,54,54,54,5,54,54,54,54,54,54,54,54,5,5,54,5,5,5,5,5,54,5,5,5,5,54,5,5,5,54,54,54,5,5,5,5,54,54,]),'comentario':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'estructuras_de_Control':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'tipo':([0,1,8,10,59,62,70,72,73,74,77,80,87,92,98,106,109,116,120,122,150,158,168,169,170,173,179,184,185,186,187,193,201,211,212,221,222,223,232,],[11,11,52,52,52,52,94,96,97,11,104,52,52,52,11,52,52,52,151,52,11,11,11,11,11,11,11,11,11,11,11,52,11,11,11,11,11,11,11,]),'valor':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[13,13,51,51,51,51,90,13,100,102,51,113,51,117,118,13,100,51,51,51,51,100,160,90,13,13,118,13,13,13,13,13,197,13,13,13,13,51,13,13,13,224,225,230,13,13,13,13,230,241,]),'sentencia_If':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'sentencia_Switch':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'ciclo_for':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'funcion_Anonima':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'diccionario':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'Conjunto':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'funcion_flecha':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'funcion_Void':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'funcion':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'funcion_Data':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'estructura_List':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'Bool':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[41,41,41,41,41,41,41,41,101,41,41,41,41,41,41,41,101,41,41,41,41,101,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'tupla':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[42,42,55,55,55,55,55,42,55,55,55,55,55,55,119,42,55,55,55,55,55,55,55,55,42,42,55,42,42,42,42,42,55,42,42,42,42,55,42,42,42,55,55,55,42,42,42,42,55,55,]),'valores':([8,10,59,62,80,87,92,106,109,116,122,193,],[50,60,82,88,108,114,60,139,142,147,153,208,]),'operador':([13,51,90,100,102,113,117,118,160,197,224,225,230,241,],[64,64,64,64,64,64,148,64,64,64,64,64,64,64,]),'expresion':([64,148,],[91,172,]),'condicion':([75,103,127,],[99,136,159,]),'cuerpo_conjunto':([95,176,],[121,192,]),'conector':([99,136,159,],[127,127,127,]),'Comparador':([100,],[130,]),'caso':([164,239,],[180,242,]),'contador':([165,],[182,]),'else':([195,],[209,]),'cuerpo_Diccionario':([206,],[218,]),'duplas':([219,236,],[227,240,]),'dupla':([219,236,],[229,229,]),}",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_signature",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_signature = 'ABSTRACT ADMIRATION AND ARROWFUNCTION AS BOOLEAN BREAK CASE CATCH CHAINCHAR CLASS COMMA COMMENTBLOCK COMMENTLINE CONST DEF DEFAULT DIVIDE DOLLAR DOT DOTCOMMA DOUBLE DYNAMIC ELIF ELSE ENUM EQUALS EXTENDS FALSE FINAL FINALLY FLOAT FOR IF IN INT INTEGERDIVISION INTERFACE IS LANGLE LBRACE LBRACKET LIST LPAREN MAIN MAP METHOD MINUS MOD MODULE NEQ NEW NULL NUMBER OR PLUS PRINT PRIVATE PROTECTED PUBLIC RANGLE RBRACE RBRACKET RETURN RPAREN SET STATIC STRING SUPER SWITCH THIS TIMES TRUE TRY TWODOTS TYPEDEF VAR VARIABLE VOID WHILEprograma : cuerpo\\n                | programa cuerpocuerpo : impresion\\n              | declaracion\\n              | operacion\\n              | comentario\\n              | estructuras_de_Control\\n              | RETURN \\n              | RETURN valoresestructuras_de_Control : sentencia_If\\n                            | sentencia_Switch\\n                            | ciclo_for\\n                            | funcion_Anonima\\n                            | diccionario\\n                            | Conjunto\\n                            | funcion_flecha\\n                            | funcion_Void\\n                            | funcion\\n                            | funcion_Data\\n                            | estructura_Listcomentario : COMMENTLINE\\n                  | COMMENTBLOCKimpresion : PRINT LPAREN valores RPAREN DOTCOMMA\\n                 | PRINT LPAREN operacion RPAREN DOTCOMMA\\n                 | PRINT LPAREN RPAREN DOTCOMMA\\n     sentencia_If : IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE \\n                        | IF LPAREN condicion RPAREN LBRACE programa RBRACE else\\n    \\n    else : ELSE LBRACE programa RBRACE\\n    \\n    condicion : valor Comparador valor\\n            |   condicion conector condicion\\n            |   Bool\\n    conector : AND\\n                | OR\\n    estructura_List : LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMAfuncion_Void : VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE\\n                    | VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE\\n                    | VOID MAIN LPAREN RPAREN LBRACE programa RBRACEComparador : EQUALS EQUALS\\n                    | LANGLE\\n                    | RANGLE\\n                    | LANGLE EQUALS\\n                    | RANGLE EQUALS\\n                    | NEQtupla : LPAREN valores RPARENvalores : valor\\n               | valor COMMA valores\\n               | tipo VARIABLE\\n               | tipo VARIABLE COMMA valoresBool : TRUE\\n        | FALSE \\n    valor   : VARIABLE\\n            | NUMBER\\n            | FLOAT\\n            | CHAINCHAR\\n            | Bool\\n            | operacion\\n            | tupla\\n    tipo : MAP\\n            | DOUBLE\\n            | STRING\\n            | INT\\n            | SET\\n            | LIST\\n            | BOOLEAN\\n            | FINAL\\n            | CONST\\n            | DYNAMIC\\n    \\n    declaracion : tipo VARIABLE EQUALS valor DOTCOMMA\\n                | VAR VARIABLE EQUALS valor DOTCOMMA\\n    operacion : valor operador expresionexpresion : LPAREN valor operador expresion RPAREN\\n                    | valor funcion : VARIABLE LPAREN valores RPARENfuncion_Data : VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMAsentencia_Switch : SWITCH LPAREN valor RPAREN LBRACE caso RBRACEcaso : CASE valor TWODOTS programa BREAK DOTCOMMA caso \\n            | CASE valor TWODOTS programa BREAK DOTCOMMA funcion_flecha : tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMAConjunto : SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA\\n                    | SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMAcuerpo_conjunto : LBRACE valores RBRACE\\n                | LBRACE RBRACE operador : PLUS\\n                | MINUS\\n                | TIMES\\n                | DIVIDE \\n    ciclo_for : FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa  RBRACE\\n    contador : VARIABLE PLUS PLUS\\n                | VARIABLE PLUS EQUALS valor\\n                | VARIABLE MINUS MINUS\\n                | VARIABLE MINUS EQUALS valor\\n    funcion_Anonima : VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA\\n                    | tupla LBRACE programa RBRACE DOTCOMMA\\n    diccionario : MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA\\n    cuerpo_Diccionario : LBRACE duplas RBRACE\\n                    | LBRACE RBRACE\\n    duplas : dupla\\n              | dupla COMMA duplas\\n    dupla : valor TWODOTS valor\\n    '\n_lr_action_items = {'RETURN':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[8,8,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,8,-47,-44,-72,-70,8,-46,-25,-73,-48,-23,-24,-68,-69,8,-79,-93,8,8,8,8,8,-1,8,8,8,8,8,-74,-71,-26,-75,8,-36,-37,-78,-92,-80,-27,8,8,-35,8,8,8,-94,-34,8,-87,-28,]),'PRINT':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[9,9,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,9,-47,-44,-72,-70,9,-46,-25,-73,-48,-23,-24,-68,-69,9,-79,-93,9,9,9,9,9,-1,9,9,9,9,9,-74,-71,-26,-75,9,-36,-37,-78,-92,-80,-27,9,9,-35,9,9,9,-94,-34,9,-87,-28,]),'VAR':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,77,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[14,14,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,14,105,-47,-44,-72,-70,14,-46,-25,-73,-48,-23,-24,-68,-69,14,-79,-93,14,14,14,14,14,-1,14,14,14,14,14,-74,-71,-26,-75,14,-36,-37,-78,-92,-80,-27,14,14,-35,14,14,14,-94,-34,14,-87,-28,]),'COMMENTLINE':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[15,15,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,15,-47,-44,-72,-70,15,-46,-25,-73,-48,-23,-24,-68,-69,15,-79,-93,15,15,15,15,15,-1,15,15,15,15,15,-74,-71,-26,-75,15,-36,-37,-78,-92,-80,-27,15,15,-35,15,15,15,-94,-34,15,-87,-28,]),'COMMENTBLOCK':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[16,16,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,16,-47,-44,-72,-70,16,-46,-25,-73,-48,-23,-24,-68,-69,16,-79,-93,16,16,16,16,16,-1,16,16,16,16,16,-74,-71,-26,-75,16,-36,-37,-78,-92,-80,-27,16,16,-35,16,16,16,-94,-34,16,-87,-28,]),'MAP':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[28,28,-1,-3,-4,-5,-6,-7,56,56,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,56,56,56,56,56,28,56,56,-47,-44,56,-72,-70,56,28,56,-46,56,-25,-73,56,56,56,-48,-23,-24,-68,-69,28,-79,-93,28,28,28,28,28,-1,28,28,28,28,28,-74,-71,56,-26,-75,28,-36,-37,-78,-92,-80,-27,28,28,-35,28,28,28,-94,-34,28,-87,-28,]),'DOUBLE':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[29,29,-1,-3,-4,-5,-6,-7,29,29,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,29,29,29,29,29,29,29,29,-47,-44,29,-72,-70,29,29,29,-46,29,-25,-73,29,29,29,-48,-23,-24,-68,-69,29,-79,-93,29,29,29,29,29,-1,29,29,29,29,29,-74,-71,29,-26,-75,29,-36,-37,-78,-92,-80,-27,29,29,-35,29,29,29,-94,-34,29,-87,-28,]),'STRING':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[30,30,-1,-3,-4,-5,-6,-7,30,30,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,30,30,30,30,30,30,30,30,-47,-44,30,-72,-70,30,30,30,-46,30,-25,-73,30,30,30,-48,-23,-24,-68,-69,30,-79,-93,30,30,30,30,30,-1,30,30,30,30,30,-74,-71,30,-26,-75,30,-36,-37,-78,-92,-80,-27,30,30,-35,30,30,30,-94,-34,30,-87,-28,]),'INT':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[31,31,-1,-3,-4,-5,-6,-7,31,31,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,31,31,31,31,31,31,31,31,-47,-44,31,-72,-70,31,31,31,-46,31,-25,-73,31,31,31,-48,-23,-24,-68,-69,31,-79,-93,31,31,31,31,31,-1,31,31,31,31,31,-74,-71,31,-26,-75,31,-36,-37,-78,-92,-80,-27,31,31,-35,31,31,31,-94,-34,31,-87,-28,]),'SET':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[32,32,-1,-3,-4,-5,-6,-7,57,57,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,57,57,57,57,57,32,57,57,-47,-44,57,-72,-70,57,32,57,-46,57,-25,-73,57,57,57,-48,-23,-24,-68,-69,32,-79,-93,32,32,32,32,32,-1,32,32,32,32,32,-74,-71,57,-26,-75,32,-36,-37,-78,-92,-80,-27,32,32,-35,32,32,32,-94,-34,32,-87,-28,]),'LIST':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[33,33,-1,-3,-4,-5,-6,-7,58,58,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,58,58,58,58,58,33,58,58,-47,-44,58,-72,-70,58,33,58,-46,58,-25,-73,58,58,58,-48,-23,-24,-68,-69,33,-79,-93,33,33,33,33,33,-1,33,33,33,33,33,-74,-71,58,-26,-75,33,-36,-37,-78,-92,-80,-27,33,33,-35,33,33,33,-94,-34,33,-87,-28,]),'BOOLEAN':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[34,34,-1,-3,-4,-5,-6,-7,34,34,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,34,34,34,34,34,34,34,34,-47,-44,34,-72,-70,34,34,34,-46,34,-25,-73,34,34,34,-48,-23,-24,-68,-69,34,-79,-93,34,34,34,34,34,-1,34,34,34,34,34,-74,-71,34,-26,-75,34,-36,-37,-78,-92,-80,-27,34,34,-35,34,34,34,-94,-34,34,-87,-28,]),'FINAL':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[35,35,-1,-3,-4,-5,-6,-7,35,35,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,35,35,35,35,35,35,35,35,-47,-44,35,-72,-70,35,35,35,-46,35,-25,-73,35,35,35,-48,-23,-24,-68,-69,35,-79,-93,35,35,35,35,35,-1,35,35,35,35,35,-74,-71,35,-26,-75,35,-36,-37,-78,-92,-80,-27,35,35,-35,35,35,35,-94,-34,35,-87,-28,]),'CONST':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[36,36,-1,-3,-4,-5,-6,-7,36,36,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,36,36,36,36,36,36,36,36,-47,-44,36,-72,-70,36,36,36,-46,36,-25,-73,36,36,36,-48,-23,-24,-68,-69,36,-79,-93,36,36,36,36,36,-1,36,36,36,36,36,-74,-71,36,-26,-75,36,-36,-37,-78,-92,-80,-27,36,36,-35,36,36,36,-94,-34,36,-87,-28,]),'DYNAMIC':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[37,37,-1,-3,-4,-5,-6,-7,37,37,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,37,37,37,37,37,37,37,37,-47,-44,37,-72,-70,37,37,37,-46,37,-25,-73,37,37,37,-48,-23,-24,-68,-69,37,-79,-93,37,37,37,37,37,-1,37,37,37,37,37,-74,-71,37,-26,-75,37,-36,-37,-78,-92,-80,-27,37,37,-35,37,37,37,-94,-34,37,-87,-28,]),'VARIABLE':([0,1,2,3,4,5,6,7,8,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,104,105,106,108,109,111,115,116,122,123,124,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,165,166,168,169,170,173,174,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[12,12,-1,-3,-4,-5,-6,-7,53,53,61,69,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-58,-59,-60,-61,71,-63,-64,-65,-66,-67,-52,-53,-54,-55,78,-49,-50,-2,-9,-45,81,-51,-56,-57,-58,-62,-63,53,53,89,53,-83,-84,-85,-86,12,53,53,53,-47,-44,53,53,-72,-70,53,53,12,53,137,138,53,-46,53,-25,-73,53,53,155,156,53,-32,-33,53,-39,-40,-43,-48,-23,-24,-68,53,-69,12,-79,-93,12,-38,-41,-42,183,53,12,12,12,12,191,-1,12,53,12,12,12,12,-74,-71,53,-26,-75,12,-36,-37,-78,-92,-80,-27,12,12,53,53,-35,53,12,12,12,-94,-34,12,-87,53,53,-28,]),'NUMBER':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[38,38,-1,-3,-4,-5,-6,-7,38,38,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,38,38,38,-83,-84,-85,-86,38,38,38,38,-47,-44,38,38,-72,-70,38,38,38,38,38,-46,38,-25,-73,38,38,38,-32,-33,38,-39,-40,-43,-48,-23,-24,-68,38,-69,38,-79,-93,38,-38,-41,-42,38,38,38,38,38,-1,38,38,38,38,38,38,-74,-71,38,-26,-75,38,-36,-37,-78,-92,-80,-27,38,38,38,38,-35,38,38,38,38,-94,-34,38,-87,38,38,-28,]),'FLOAT':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[39,39,-1,-3,-4,-5,-6,-7,39,39,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,39,39,39,-83,-84,-85,-86,39,39,39,39,-47,-44,39,39,-72,-70,39,39,39,39,39,-46,39,-25,-73,39,39,39,-32,-33,39,-39,-40,-43,-48,-23,-24,-68,39,-69,39,-79,-93,39,-38,-41,-42,39,39,39,39,39,-1,39,39,39,39,39,39,-74,-71,39,-26,-75,39,-36,-37,-78,-92,-80,-27,39,39,39,39,-35,39,39,39,39,-94,-34,39,-87,39,39,-28,]),'CHAINCHAR':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[40,40,-1,-3,-4,-5,-6,-7,40,40,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,40,40,40,-83,-84,-85,-86,40,40,40,40,-47,-44,40,40,-72,-70,40,40,40,40,40,-46,40,-25,-73,40,40,40,-32,-33,40,-39,-40,-43,-48,-23,-24,-68,40,-69,40,-79,-93,40,-38,-41,-42,40,40,40,40,40,-1,40,40,40,40,40,40,-74,-71,40,-26,-75,40,-36,-37,-78,-92,-80,-27,40,40,40,40,-35,40,40,40,40,-94,-34,40,-87,40,40,-28,]),'IF':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[43,43,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,43,-47,-44,-72,-70,43,-46,-25,-73,-48,-23,-24,-68,-69,43,-79,-93,43,43,43,43,43,-1,43,43,43,43,43,-74,-71,-26,-75,43,-36,-37,-78,-92,-80,-27,43,43,-35,43,43,43,-94,-34,43,-87,-28,]),'SWITCH':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[44,44,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,44,-47,-44,-72,-70,44,-46,-25,-73,-48,-23,-24,-68,-69,44,-79,-93,44,44,44,44,44,-1,44,44,44,44,44,-74,-71,-26,-75,44,-36,-37,-78,-92,-80,-27,44,44,-35,44,44,44,-94,-34,44,-87,-28,]),'FOR':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[45,45,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,45,-47,-44,-72,-70,45,-46,-25,-73,-48,-23,-24,-68,-69,45,-79,-93,45,45,45,45,45,-1,45,45,45,45,45,-74,-71,-26,-75,45,-36,-37,-78,-92,-80,-27,45,45,-35,45,45,45,-94,-34,45,-87,-28,]),'VOID':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[46,46,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,46,-47,-44,-72,-70,46,-46,-25,-73,-48,-23,-24,-68,-69,46,-79,-93,46,46,46,46,46,-1,46,46,46,46,46,-74,-71,-26,-75,46,-36,-37,-78,-92,-80,-27,46,46,-35,46,46,46,-94,-34,46,-87,-28,]),'TRUE':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[47,47,-1,-3,-4,-5,-6,-7,47,47,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,47,47,47,-83,-84,-85,-86,47,47,47,47,-47,-44,47,47,-72,-70,47,47,47,47,47,-46,47,-25,-73,47,47,47,-32,-33,47,-39,-40,-43,-48,-23,-24,-68,47,-69,47,-79,-93,47,-38,-41,-42,47,47,47,47,47,-1,47,47,47,47,47,47,-74,-71,47,-26,-75,47,-36,-37,-78,-92,-80,-27,47,47,47,47,-35,47,47,47,47,-94,-34,47,-87,47,47,-28,]),'FALSE':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[48,48,-1,-3,-4,-5,-6,-7,48,48,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,48,48,48,-83,-84,-85,-86,48,48,48,48,-47,-44,48,48,-72,-70,48,48,48,48,48,-46,48,-25,-73,48,48,48,-32,-33,48,-39,-40,-43,-48,-23,-24,-68,48,-69,48,-79,-93,48,-38,-41,-42,48,48,48,48,48,-1,48,48,48,48,48,48,-74,-71,48,-26,-75,48,-36,-37,-78,-92,-80,-27,48,48,48,48,-35,48,48,48,48,-94,-34,48,-87,48,48,-28,]),'LPAREN':([0,1,2,3,4,5,6,7,8,9,10,12,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,43,44,45,47,48,49,50,51,53,54,55,59,61,62,64,65,66,67,68,74,75,76,78,79,80,81,85,86,87,89,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[10,10,-1,-3,-4,-5,-6,-7,10,59,10,62,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,75,76,77,-49,-50,-2,-9,-45,-51,-56,-57,10,87,10,92,-83,-84,-85,-86,10,10,10,106,107,10,-47,-44,10,10,116,-72,-70,10,10,10,10,10,-46,10,-25,-73,10,10,10,-32,-33,10,-39,-40,-43,-48,-23,-24,-68,92,-69,10,-79,-93,10,-38,-41,-42,10,10,10,10,10,-1,10,10,10,10,10,10,-74,-71,10,-26,-75,10,-36,-37,-78,-92,-80,-27,10,10,10,10,-35,10,10,10,10,-94,-34,10,-87,10,10,-28,]),'$end':([1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,81,85,90,91,108,111,115,142,143,144,145,149,152,157,188,189,194,196,202,203,204,205,207,209,217,226,231,234,238,],[0,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,-47,-44,-72,-70,-46,-25,-73,-48,-23,-24,-68,-69,-79,-93,-74,-71,-26,-75,-36,-37,-78,-92,-80,-27,-35,-94,-34,-87,-28,]),'RBRACE':([2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,81,85,90,91,98,108,111,115,122,142,143,144,145,149,152,153,157,173,178,179,180,185,186,188,189,194,196,201,202,203,204,205,207,209,217,219,223,226,227,229,231,232,234,238,239,240,241,242,],[-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,-47,-44,-72,-70,125,-46,-25,-73,154,-48,-23,-24,-68,-69,-79,175,-93,190,194,195,196,202,203,-74,-71,-26,-75,217,-36,-37,-78,-92,-80,-27,-35,228,234,-94,235,-97,-34,238,-87,-28,-77,-98,-99,-76,]),'DOTCOMMA':([2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,81,83,85,90,91,101,108,110,111,112,113,115,118,119,121,125,136,142,143,144,145,149,152,154,157,159,160,171,175,187,188,189,190,192,194,196,202,203,204,205,207,209,217,218,220,226,228,231,233,234,235,238,],[-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,-47,111,-44,-72,-70,-31,-46,143,-25,144,145,-73,149,-57,152,157,165,-48,-23,-24,-68,-69,-79,-82,-93,-30,-29,188,-81,204,-74,-71,205,207,-26,-75,-36,-37,-78,-92,-80,-27,-35,226,231,-94,-96,-34,239,-87,-95,-28,]),'BREAK':([2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,81,85,90,91,108,111,115,142,143,144,145,149,152,157,188,189,194,196,202,203,204,205,207,209,217,222,226,231,234,238,],[-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,-47,-44,-72,-70,-46,-25,-73,-48,-23,-24,-68,-69,-79,-93,-74,-71,-26,-75,-36,-37,-78,-92,-80,-27,-35,233,-94,-34,-87,-28,]),'PLUS':([5,12,13,38,39,40,41,42,47,48,51,53,54,55,84,85,90,91,100,101,102,113,117,118,119,160,172,183,189,197,199,224,225,230,241,],[-56,-51,65,-52,-53,-54,-55,-57,-49,-50,65,-51,-56,-57,-56,-44,65,-70,65,-55,65,65,65,65,-57,65,-70,199,-71,65,213,65,65,65,65,]),'MINUS':([5,12,13,38,39,40,41,42,47,48,51,53,54,55,84,85,90,91,100,101,102,113,117,118,119,160,172,183,189,197,200,224,225,230,241,],[-56,-51,66,-52,-53,-54,-55,-57,-49,-50,66,-51,-56,-57,-56,-44,66,-70,66,-55,66,66,66,66,-57,66,-70,200,-71,66,215,66,66,66,66,]),'TIMES':([5,12,13,38,39,40,41,42,47,48,51,53,54,55,84,85,90,91,100,101,102,113,117,118,119,160,172,189,197,224,225,230,241,],[-56,-51,67,-52,-53,-54,-55,-57,-49,-50,67,-51,-56,-57,-56,-44,67,-70,67,-55,67,67,67,67,-57,67,-70,-71,67,67,67,67,67,]),'DIVIDE':([5,12,13,38,39,40,41,42,47,48,51,53,54,55,84,85,90,91,100,101,102,113,117,118,119,160,172,189,197,224,225,230,241,],[-56,-51,68,-52,-53,-54,-55,-57,-49,-50,68,-51,-56,-57,-56,-44,68,-70,68,-55,68,68,68,68,-57,68,-70,-71,68,68,68,68,68,]),'DOT':([12,],[63,]),'LANGLE':([28,32,33,38,39,40,41,47,48,53,54,55,85,90,91,100,101,189,],[70,72,73,-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,132,-55,-71,]),'COMMA':([29,30,31,34,35,36,37,38,39,40,41,47,48,51,53,54,55,56,57,58,81,84,85,90,91,94,117,172,189,229,241,],[-59,-60,-61,-64,-65,-66,-67,-52,-53,-54,-55,-49,-50,80,-51,-56,-57,-58,-62,-63,109,-56,-44,-72,-70,120,80,-70,-71,236,-99,]),'RANGLE':([29,30,31,34,35,36,37,38,39,40,41,47,48,53,54,55,56,57,58,85,90,91,96,97,100,101,151,189,],[-59,-60,-61,-64,-65,-66,-67,-52,-53,-54,-55,-49,-50,-51,-56,-57,-58,-62,-63,-44,-72,-70,123,124,133,-55,174,-71,]),'RPAREN':([38,39,40,41,47,48,51,53,54,55,59,60,81,82,84,85,88,90,91,99,101,102,106,107,108,114,117,139,142,147,159,160,172,182,189,213,215,224,225,],[-52,-53,-54,-55,-49,-50,-45,-51,-56,-57,83,85,-47,110,112,-44,115,-72,-70,126,-31,135,140,141,-46,146,-45,167,-48,171,-30,-29,189,198,-71,-88,-90,-89,-91,]),'EQUALS':([38,39,40,41,47,48,53,54,55,61,69,71,85,90,91,100,101,131,132,133,137,138,155,156,189,191,199,200,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,86,93,95,-44,-72,-70,131,-55,161,162,163,86,166,176,177,-71,206,214,216,]),'NEQ':([38,39,40,41,47,48,53,54,55,85,90,91,100,101,189,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,134,-55,-71,]),'RBRACKET':([38,39,40,41,47,48,51,53,54,55,81,85,90,91,108,142,189,208,],[-52,-53,-54,-55,-49,-50,-45,-51,-56,-57,-47,-44,-72,-70,-46,-48,-71,220,]),'AND':([38,39,40,41,47,48,53,54,55,85,90,91,99,101,136,159,160,189,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,128,-31,128,128,-29,-71,]),'OR':([38,39,40,41,47,48,53,54,55,85,90,91,99,101,136,159,160,189,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,129,-31,129,129,-29,-71,]),'TWODOTS':([38,39,40,41,47,48,53,54,55,85,90,91,189,197,230,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,-71,211,237,]),'LBRACE':([42,85,95,119,126,135,140,141,167,176,198,206,210,],[74,-44,122,150,158,164,168,169,184,122,212,219,221,]),'MAIN':([46,],[79,]),'ARROWFUNCTION':([146,],[170,]),'CASE':([164,239,],[181,181,]),'LBRACKET':([177,],[193,]),'ELSE':([195,],[210,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'programa':([0,74,150,158,168,169,170,184,211,212,221,],[1,98,173,179,185,186,187,201,222,223,232,]),'cuerpo':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[2,49,2,49,2,178,2,2,2,49,49,2,49,49,49,49,2,2,2,49,49,49,]),'impresion':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'declaracion':([0,1,74,77,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[4,4,4,103,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'operacion':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[5,5,54,54,84,54,54,5,54,54,54,54,54,54,54,5,54,54,54,54,54,54,54,54,5,5,54,5,5,5,5,5,54,5,5,5,5,54,5,5,5,54,54,54,5,5,5,5,54,54,]),'comentario':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'estructuras_de_Control':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'tipo':([0,1,8,10,59,62,70,72,73,74,77,80,87,92,98,106,109,116,120,122,150,158,168,169,170,173,179,184,185,186,187,193,201,211,212,221,222,223,232,],[11,11,52,52,52,52,94,96,97,11,104,52,52,52,11,52,52,52,151,52,11,11,11,11,11,11,11,11,11,11,11,52,11,11,11,11,11,11,11,]),'valor':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[13,13,51,51,51,51,90,13,100,102,51,113,51,117,118,13,100,51,51,51,51,100,160,90,13,13,118,13,13,13,13,13,197,13,13,13,13,51,13,13,13,224,225,230,13,13,13,13,230,241,]),'sentencia_If':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'sentencia_Switch':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'ciclo_for':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'funcion_Anonima':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'diccionario':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'Conjunto':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'funcion_flecha':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'funcion_Void':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'funcion':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'funcion_Data':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'estructura_List':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'Bool':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[41,41,41,41,41,41,41,41,101,41,41,41,41,41,41,41,101,41,41,41,41,101,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'tupla':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[42,42,55,55,55,55,55,42,55,55,55,55,55,55,119,42,55,55,55,55,55,55,55,55,42,42,55,42,42,42,42,42,55,42,42,42,42,55,42,42,42,55,55,55,42,42,42,42,55,55,]),'valores':([8,10,59,62,80,87,92,106,109,116,122,193,],[50,60,82,88,108,114,60,139,142,147,153,208,]),'operador':([13,51,90,100,102,113,117,118,160,197,224,225,230,241,],[64,64,64,64,64,64,148,64,64,64,64,64,64,64,]),'expresion':([64,148,],[91,172,]),'condicion':([75,103,127,],[99,136,159,]),'cuerpo_conjunto':([95,176,],[121,192,]),'conector':([99,136,159,],[127,127,127,]),'Comparador':([100,],[130,]),'caso':([164,239,],[180,242,]),'contador':([165,],[182,]),'else':([195,],[209,]),'cuerpo_Diccionario':([206,],[218,]),'duplas':([219,236,],[227,240,]),'dupla':([219,236,],[229,229,]),}\n_lr_goto = {}",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_action_items",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_action_items = {'RETURN':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[8,8,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,8,-47,-44,-72,-70,8,-46,-25,-73,-48,-23,-24,-68,-69,8,-79,-93,8,8,8,8,8,-1,8,8,8,8,8,-74,-71,-26,-75,8,-36,-37,-78,-92,-80,-27,8,8,-35,8,8,8,-94,-34,8,-87,-28,]),'PRINT':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[9,9,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,9,-47,-44,-72,-70,9,-46,-25,-73,-48,-23,-24,-68,-69,9,-79,-93,9,9,9,9,9,-1,9,9,9,9,9,-74,-71,-26,-75,9,-36,-37,-78,-92,-80,-27,9,9,-35,9,9,9,-94,-34,9,-87,-28,]),'VAR':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,77,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[14,14,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,14,105,-47,-44,-72,-70,14,-46,-25,-73,-48,-23,-24,-68,-69,14,-79,-93,14,14,14,14,14,-1,14,14,14,14,14,-74,-71,-26,-75,14,-36,-37,-78,-92,-80,-27,14,14,-35,14,14,14,-94,-34,14,-87,-28,]),'COMMENTLINE':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[15,15,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,15,-47,-44,-72,-70,15,-46,-25,-73,-48,-23,-24,-68,-69,15,-79,-93,15,15,15,15,15,-1,15,15,15,15,15,-74,-71,-26,-75,15,-36,-37,-78,-92,-80,-27,15,15,-35,15,15,15,-94,-34,15,-87,-28,]),'COMMENTBLOCK':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[16,16,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,16,-47,-44,-72,-70,16,-46,-25,-73,-48,-23,-24,-68,-69,16,-79,-93,16,16,16,16,16,-1,16,16,16,16,16,-74,-71,-26,-75,16,-36,-37,-78,-92,-80,-27,16,16,-35,16,16,16,-94,-34,16,-87,-28,]),'MAP':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[28,28,-1,-3,-4,-5,-6,-7,56,56,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,56,56,56,56,56,28,56,56,-47,-44,56,-72,-70,56,28,56,-46,56,-25,-73,56,56,56,-48,-23,-24,-68,-69,28,-79,-93,28,28,28,28,28,-1,28,28,28,28,28,-74,-71,56,-26,-75,28,-36,-37,-78,-92,-80,-27,28,28,-35,28,28,28,-94,-34,28,-87,-28,]),'DOUBLE':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[29,29,-1,-3,-4,-5,-6,-7,29,29,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,29,29,29,29,29,29,29,29,-47,-44,29,-72,-70,29,29,29,-46,29,-25,-73,29,29,29,-48,-23,-24,-68,-69,29,-79,-93,29,29,29,29,29,-1,29,29,29,29,29,-74,-71,29,-26,-75,29,-36,-37,-78,-92,-80,-27,29,29,-35,29,29,29,-94,-34,29,-87,-28,]),'STRING':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[30,30,-1,-3,-4,-5,-6,-7,30,30,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,30,30,30,30,30,30,30,30,-47,-44,30,-72,-70,30,30,30,-46,30,-25,-73,30,30,30,-48,-23,-24,-68,-69,30,-79,-93,30,30,30,30,30,-1,30,30,30,30,30,-74,-71,30,-26,-75,30,-36,-37,-78,-92,-80,-27,30,30,-35,30,30,30,-94,-34,30,-87,-28,]),'INT':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[31,31,-1,-3,-4,-5,-6,-7,31,31,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,31,31,31,31,31,31,31,31,-47,-44,31,-72,-70,31,31,31,-46,31,-25,-73,31,31,31,-48,-23,-24,-68,-69,31,-79,-93,31,31,31,31,31,-1,31,31,31,31,31,-74,-71,31,-26,-75,31,-36,-37,-78,-92,-80,-27,31,31,-35,31,31,31,-94,-34,31,-87,-28,]),'SET':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[32,32,-1,-3,-4,-5,-6,-7,57,57,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,57,57,57,57,57,32,57,57,-47,-44,57,-72,-70,57,32,57,-46,57,-25,-73,57,57,57,-48,-23,-24,-68,-69,32,-79,-93,32,32,32,32,32,-1,32,32,32,32,32,-74,-71,57,-26,-75,32,-36,-37,-78,-92,-80,-27,32,32,-35,32,32,32,-94,-34,32,-87,-28,]),'LIST':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[33,33,-1,-3,-4,-5,-6,-7,58,58,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,58,58,58,58,58,33,58,58,-47,-44,58,-72,-70,58,33,58,-46,58,-25,-73,58,58,58,-48,-23,-24,-68,-69,33,-79,-93,33,33,33,33,33,-1,33,33,33,33,33,-74,-71,58,-26,-75,33,-36,-37,-78,-92,-80,-27,33,33,-35,33,33,33,-94,-34,33,-87,-28,]),'BOOLEAN':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[34,34,-1,-3,-4,-5,-6,-7,34,34,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,34,34,34,34,34,34,34,34,-47,-44,34,-72,-70,34,34,34,-46,34,-25,-73,34,34,34,-48,-23,-24,-68,-69,34,-79,-93,34,34,34,34,34,-1,34,34,34,34,34,-74,-71,34,-26,-75,34,-36,-37,-78,-92,-80,-27,34,34,-35,34,34,34,-94,-34,34,-87,-28,]),'FINAL':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[35,35,-1,-3,-4,-5,-6,-7,35,35,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,35,35,35,35,35,35,35,35,-47,-44,35,-72,-70,35,35,35,-46,35,-25,-73,35,35,35,-48,-23,-24,-68,-69,35,-79,-93,35,35,35,35,35,-1,35,35,35,35,35,-74,-71,35,-26,-75,35,-36,-37,-78,-92,-80,-27,35,35,-35,35,35,35,-94,-34,35,-87,-28,]),'CONST':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[36,36,-1,-3,-4,-5,-6,-7,36,36,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,36,36,36,36,36,36,36,36,-47,-44,36,-72,-70,36,36,36,-46,36,-25,-73,36,36,36,-48,-23,-24,-68,-69,36,-79,-93,36,36,36,36,36,-1,36,36,36,36,36,-74,-71,36,-26,-75,36,-36,-37,-78,-92,-80,-27,36,36,-35,36,36,36,-94,-34,36,-87,-28,]),'DYNAMIC':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,70,72,73,74,77,80,81,85,87,90,91,92,98,106,108,109,111,115,116,120,122,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[37,37,-1,-3,-4,-5,-6,-7,37,37,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,37,37,37,37,37,37,37,37,-47,-44,37,-72,-70,37,37,37,-46,37,-25,-73,37,37,37,-48,-23,-24,-68,-69,37,-79,-93,37,37,37,37,37,-1,37,37,37,37,37,-74,-71,37,-26,-75,37,-36,-37,-78,-92,-80,-27,37,37,-35,37,37,37,-94,-34,37,-87,-28,]),'VARIABLE':([0,1,2,3,4,5,6,7,8,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,104,105,106,108,109,111,115,116,122,123,124,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,165,166,168,169,170,173,174,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[12,12,-1,-3,-4,-5,-6,-7,53,53,61,69,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-58,-59,-60,-61,71,-63,-64,-65,-66,-67,-52,-53,-54,-55,78,-49,-50,-2,-9,-45,81,-51,-56,-57,-58,-62,-63,53,53,89,53,-83,-84,-85,-86,12,53,53,53,-47,-44,53,53,-72,-70,53,53,12,53,137,138,53,-46,53,-25,-73,53,53,155,156,53,-32,-33,53,-39,-40,-43,-48,-23,-24,-68,53,-69,12,-79,-93,12,-38,-41,-42,183,53,12,12,12,12,191,-1,12,53,12,12,12,12,-74,-71,53,-26,-75,12,-36,-37,-78,-92,-80,-27,12,12,53,53,-35,53,12,12,12,-94,-34,12,-87,53,53,-28,]),'NUMBER':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[38,38,-1,-3,-4,-5,-6,-7,38,38,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,38,38,38,-83,-84,-85,-86,38,38,38,38,-47,-44,38,38,-72,-70,38,38,38,38,38,-46,38,-25,-73,38,38,38,-32,-33,38,-39,-40,-43,-48,-23,-24,-68,38,-69,38,-79,-93,38,-38,-41,-42,38,38,38,38,38,-1,38,38,38,38,38,38,-74,-71,38,-26,-75,38,-36,-37,-78,-92,-80,-27,38,38,38,38,-35,38,38,38,38,-94,-34,38,-87,38,38,-28,]),'FLOAT':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[39,39,-1,-3,-4,-5,-6,-7,39,39,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,39,39,39,-83,-84,-85,-86,39,39,39,39,-47,-44,39,39,-72,-70,39,39,39,39,39,-46,39,-25,-73,39,39,39,-32,-33,39,-39,-40,-43,-48,-23,-24,-68,39,-69,39,-79,-93,39,-38,-41,-42,39,39,39,39,39,-1,39,39,39,39,39,39,-74,-71,39,-26,-75,39,-36,-37,-78,-92,-80,-27,39,39,39,39,-35,39,39,39,39,-94,-34,39,-87,39,39,-28,]),'CHAINCHAR':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[40,40,-1,-3,-4,-5,-6,-7,40,40,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,40,40,40,-83,-84,-85,-86,40,40,40,40,-47,-44,40,40,-72,-70,40,40,40,40,40,-46,40,-25,-73,40,40,40,-32,-33,40,-39,-40,-43,-48,-23,-24,-68,40,-69,40,-79,-93,40,-38,-41,-42,40,40,40,40,40,-1,40,40,40,40,40,40,-74,-71,40,-26,-75,40,-36,-37,-78,-92,-80,-27,40,40,40,40,-35,40,40,40,40,-94,-34,40,-87,40,40,-28,]),'IF':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[43,43,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,43,-47,-44,-72,-70,43,-46,-25,-73,-48,-23,-24,-68,-69,43,-79,-93,43,43,43,43,43,-1,43,43,43,43,43,-74,-71,-26,-75,43,-36,-37,-78,-92,-80,-27,43,43,-35,43,43,43,-94,-34,43,-87,-28,]),'SWITCH':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[44,44,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,44,-47,-44,-72,-70,44,-46,-25,-73,-48,-23,-24,-68,-69,44,-79,-93,44,44,44,44,44,-1,44,44,44,44,44,-74,-71,-26,-75,44,-36,-37,-78,-92,-80,-27,44,44,-35,44,44,44,-94,-34,44,-87,-28,]),'FOR':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[45,45,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,45,-47,-44,-72,-70,45,-46,-25,-73,-48,-23,-24,-68,-69,45,-79,-93,45,45,45,45,45,-1,45,45,45,45,45,-74,-71,-26,-75,45,-36,-37,-78,-92,-80,-27,45,45,-35,45,45,45,-94,-34,45,-87,-28,]),'VOID':([0,1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,74,81,85,90,91,98,108,111,115,142,143,144,145,149,150,152,157,158,168,169,170,173,178,179,184,185,186,187,188,189,194,196,201,202,203,204,205,207,209,211,212,217,221,222,223,226,231,232,234,238,],[46,46,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,46,-47,-44,-72,-70,46,-46,-25,-73,-48,-23,-24,-68,-69,46,-79,-93,46,46,46,46,46,-1,46,46,46,46,46,-74,-71,-26,-75,46,-36,-37,-78,-92,-80,-27,46,46,-35,46,46,46,-94,-34,46,-87,-28,]),'TRUE':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[47,47,-1,-3,-4,-5,-6,-7,47,47,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,47,47,47,-83,-84,-85,-86,47,47,47,47,-47,-44,47,47,-72,-70,47,47,47,47,47,-46,47,-25,-73,47,47,47,-32,-33,47,-39,-40,-43,-48,-23,-24,-68,47,-69,47,-79,-93,47,-38,-41,-42,47,47,47,47,47,-1,47,47,47,47,47,47,-74,-71,47,-26,-75,47,-36,-37,-78,-92,-80,-27,47,47,47,47,-35,47,47,47,47,-94,-34,47,-87,47,47,-28,]),'FALSE':([0,1,2,3,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,59,62,64,65,66,67,68,74,75,76,80,81,85,86,87,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[48,48,-1,-3,-4,-5,-6,-7,48,48,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,48,48,48,-83,-84,-85,-86,48,48,48,48,-47,-44,48,48,-72,-70,48,48,48,48,48,-46,48,-25,-73,48,48,48,-32,-33,48,-39,-40,-43,-48,-23,-24,-68,48,-69,48,-79,-93,48,-38,-41,-42,48,48,48,48,48,-1,48,48,48,48,48,48,-74,-71,48,-26,-75,48,-36,-37,-78,-92,-80,-27,48,48,48,48,-35,48,48,48,48,-94,-34,48,-87,48,48,-28,]),'LPAREN':([0,1,2,3,4,5,6,7,8,9,10,12,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,43,44,45,47,48,49,50,51,53,54,55,59,61,62,64,65,66,67,68,74,75,76,78,79,80,81,85,86,87,89,90,91,92,93,98,103,106,108,109,111,115,116,122,127,128,129,130,132,133,134,142,143,144,145,148,149,150,152,157,158,161,162,163,166,168,169,170,173,178,179,181,184,185,186,187,188,189,193,194,196,201,202,203,204,205,207,209,211,212,214,216,217,219,221,222,223,226,231,232,234,236,237,238,],[10,10,-1,-3,-4,-5,-6,-7,10,59,10,62,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,75,76,77,-49,-50,-2,-9,-45,-51,-56,-57,10,87,10,92,-83,-84,-85,-86,10,10,10,106,107,10,-47,-44,10,10,116,-72,-70,10,10,10,10,10,-46,10,-25,-73,10,10,10,-32,-33,10,-39,-40,-43,-48,-23,-24,-68,92,-69,10,-79,-93,10,-38,-41,-42,10,10,10,10,10,-1,10,10,10,10,10,10,-74,-71,10,-26,-75,10,-36,-37,-78,-92,-80,-27,10,10,10,10,-35,10,10,10,10,-94,-34,10,-87,10,10,-28,]),'$end':([1,2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,81,85,90,91,108,111,115,142,143,144,145,149,152,157,188,189,194,196,202,203,204,205,207,209,217,226,231,234,238,],[0,-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,-47,-44,-72,-70,-46,-25,-73,-48,-23,-24,-68,-69,-79,-93,-74,-71,-26,-75,-36,-37,-78,-92,-80,-27,-35,-94,-34,-87,-28,]),'RBRACE':([2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,81,85,90,91,98,108,111,115,122,142,143,144,145,149,152,153,157,173,178,179,180,185,186,188,189,194,196,201,202,203,204,205,207,209,217,219,223,226,227,229,231,232,234,238,239,240,241,242,],[-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,-47,-44,-72,-70,125,-46,-25,-73,154,-48,-23,-24,-68,-69,-79,175,-93,190,194,195,196,202,203,-74,-71,-26,-75,217,-36,-37,-78,-92,-80,-27,-35,228,234,-94,235,-97,-34,238,-87,-28,-77,-98,-99,-76,]),'DOTCOMMA':([2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,81,83,85,90,91,101,108,110,111,112,113,115,118,119,121,125,136,142,143,144,145,149,152,154,157,159,160,171,175,187,188,189,190,192,194,196,202,203,204,205,207,209,217,218,220,226,228,231,233,234,235,238,],[-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,-47,111,-44,-72,-70,-31,-46,143,-25,144,145,-73,149,-57,152,157,165,-48,-23,-24,-68,-69,-79,-82,-93,-30,-29,188,-81,204,-74,-71,205,207,-26,-75,-36,-37,-78,-92,-80,-27,-35,226,231,-94,-96,-34,239,-87,-95,-28,]),'BREAK':([2,3,4,5,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,38,39,40,41,47,48,49,50,51,53,54,55,81,85,90,91,108,111,115,142,143,144,145,149,152,157,188,189,194,196,202,203,204,205,207,209,217,222,226,231,234,238,],[-1,-3,-4,-5,-6,-7,-8,-21,-22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-52,-53,-54,-55,-49,-50,-2,-9,-45,-51,-56,-57,-47,-44,-72,-70,-46,-25,-73,-48,-23,-24,-68,-69,-79,-93,-74,-71,-26,-75,-36,-37,-78,-92,-80,-27,-35,233,-94,-34,-87,-28,]),'PLUS':([5,12,13,38,39,40,41,42,47,48,51,53,54,55,84,85,90,91,100,101,102,113,117,118,119,160,172,183,189,197,199,224,225,230,241,],[-56,-51,65,-52,-53,-54,-55,-57,-49,-50,65,-51,-56,-57,-56,-44,65,-70,65,-55,65,65,65,65,-57,65,-70,199,-71,65,213,65,65,65,65,]),'MINUS':([5,12,13,38,39,40,41,42,47,48,51,53,54,55,84,85,90,91,100,101,102,113,117,118,119,160,172,183,189,197,200,224,225,230,241,],[-56,-51,66,-52,-53,-54,-55,-57,-49,-50,66,-51,-56,-57,-56,-44,66,-70,66,-55,66,66,66,66,-57,66,-70,200,-71,66,215,66,66,66,66,]),'TIMES':([5,12,13,38,39,40,41,42,47,48,51,53,54,55,84,85,90,91,100,101,102,113,117,118,119,160,172,189,197,224,225,230,241,],[-56,-51,67,-52,-53,-54,-55,-57,-49,-50,67,-51,-56,-57,-56,-44,67,-70,67,-55,67,67,67,67,-57,67,-70,-71,67,67,67,67,67,]),'DIVIDE':([5,12,13,38,39,40,41,42,47,48,51,53,54,55,84,85,90,91,100,101,102,113,117,118,119,160,172,189,197,224,225,230,241,],[-56,-51,68,-52,-53,-54,-55,-57,-49,-50,68,-51,-56,-57,-56,-44,68,-70,68,-55,68,68,68,68,-57,68,-70,-71,68,68,68,68,68,]),'DOT':([12,],[63,]),'LANGLE':([28,32,33,38,39,40,41,47,48,53,54,55,85,90,91,100,101,189,],[70,72,73,-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,132,-55,-71,]),'COMMA':([29,30,31,34,35,36,37,38,39,40,41,47,48,51,53,54,55,56,57,58,81,84,85,90,91,94,117,172,189,229,241,],[-59,-60,-61,-64,-65,-66,-67,-52,-53,-54,-55,-49,-50,80,-51,-56,-57,-58,-62,-63,109,-56,-44,-72,-70,120,80,-70,-71,236,-99,]),'RANGLE':([29,30,31,34,35,36,37,38,39,40,41,47,48,53,54,55,56,57,58,85,90,91,96,97,100,101,151,189,],[-59,-60,-61,-64,-65,-66,-67,-52,-53,-54,-55,-49,-50,-51,-56,-57,-58,-62,-63,-44,-72,-70,123,124,133,-55,174,-71,]),'RPAREN':([38,39,40,41,47,48,51,53,54,55,59,60,81,82,84,85,88,90,91,99,101,102,106,107,108,114,117,139,142,147,159,160,172,182,189,213,215,224,225,],[-52,-53,-54,-55,-49,-50,-45,-51,-56,-57,83,85,-47,110,112,-44,115,-72,-70,126,-31,135,140,141,-46,146,-45,167,-48,171,-30,-29,189,198,-71,-88,-90,-89,-91,]),'EQUALS':([38,39,40,41,47,48,53,54,55,61,69,71,85,90,91,100,101,131,132,133,137,138,155,156,189,191,199,200,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,86,93,95,-44,-72,-70,131,-55,161,162,163,86,166,176,177,-71,206,214,216,]),'NEQ':([38,39,40,41,47,48,53,54,55,85,90,91,100,101,189,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,134,-55,-71,]),'RBRACKET':([38,39,40,41,47,48,51,53,54,55,81,85,90,91,108,142,189,208,],[-52,-53,-54,-55,-49,-50,-45,-51,-56,-57,-47,-44,-72,-70,-46,-48,-71,220,]),'AND':([38,39,40,41,47,48,53,54,55,85,90,91,99,101,136,159,160,189,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,128,-31,128,128,-29,-71,]),'OR':([38,39,40,41,47,48,53,54,55,85,90,91,99,101,136,159,160,189,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,129,-31,129,129,-29,-71,]),'TWODOTS':([38,39,40,41,47,48,53,54,55,85,90,91,189,197,230,],[-52,-53,-54,-55,-49,-50,-51,-56,-57,-44,-72,-70,-71,211,237,]),'LBRACE':([42,85,95,119,126,135,140,141,167,176,198,206,210,],[74,-44,122,150,158,164,168,169,184,122,212,219,221,]),'MAIN':([46,],[79,]),'ARROWFUNCTION':([146,],[170,]),'CASE':([164,239,],[181,181,]),'LBRACKET':([177,],[193,]),'ELSE':([195,],[210,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'programa':([0,74,150,158,168,169,170,184,211,212,221,],[1,98,173,179,185,186,187,201,222,223,232,]),'cuerpo':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[2,49,2,49,2,178,2,2,2,49,49,2,49,49,49,49,2,2,2,49,49,49,]),'impresion':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'declaracion':([0,1,74,77,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[4,4,4,103,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'operacion':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[5,5,54,54,84,54,54,5,54,54,54,54,54,54,54,5,54,54,54,54,54,54,54,54,5,5,54,5,5,5,5,5,54,5,5,5,5,54,5,5,5,54,54,54,5,5,5,5,54,54,]),'comentario':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'estructuras_de_Control':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'tipo':([0,1,8,10,59,62,70,72,73,74,77,80,87,92,98,106,109,116,120,122,150,158,168,169,170,173,179,184,185,186,187,193,201,211,212,221,222,223,232,],[11,11,52,52,52,52,94,96,97,11,104,52,52,52,11,52,52,52,151,52,11,11,11,11,11,11,11,11,11,11,11,52,11,11,11,11,11,11,11,]),'valor':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[13,13,51,51,51,51,90,13,100,102,51,113,51,117,118,13,100,51,51,51,51,100,160,90,13,13,118,13,13,13,13,13,197,13,13,13,13,51,13,13,13,224,225,230,13,13,13,13,230,241,]),'sentencia_If':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'sentencia_Switch':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'ciclo_for':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'funcion_Anonima':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'diccionario':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'Conjunto':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'funcion_flecha':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'funcion_Void':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'funcion':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'funcion_Data':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'estructura_List':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'Bool':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[41,41,41,41,41,41,41,41,101,41,41,41,41,41,41,41,101,41,41,41,41,101,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'tupla':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[42,42,55,55,55,55,55,42,55,55,55,55,55,55,119,42,55,55,55,55,55,55,55,55,42,42,55,42,42,42,42,42,55,42,42,42,42,55,42,42,42,55,55,55,42,42,42,42,55,55,]),'valores':([8,10,59,62,80,87,92,106,109,116,122,193,],[50,60,82,88,108,114,60,139,142,147,153,208,]),'operador':([13,51,90,100,102,113,117,118,160,197,224,225,230,241,],[64,64,64,64,64,64,148,64,64,64,64,64,64,64,]),'expresion':([64,148,],[91,172,]),'condicion':([75,103,127,],[99,136,159,]),'cuerpo_conjunto':([95,176,],[121,192,]),'conector':([99,136,159,],[127,127,127,]),'Comparador':([100,],[130,]),'caso':([164,239,],[180,242,]),'contador':([165,],[182,]),'else':([195,],[209,]),'cuerpo_Diccionario':([206,],[218,]),'duplas':([219,236,],[227,240,]),'dupla':([219,236,],[229,229,]),}\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_action",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'programa':([0,74,150,158,168,169,170,184,211,212,221,],[1,98,173,179,185,186,187,201,222,223,232,]),'cuerpo':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[2,49,2,49,2,178,2,2,2,49,49,2,49,49,49,49,2,2,2,49,49,49,]),'impresion':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'declaracion':([0,1,74,77,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[4,4,4,103,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'operacion':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[5,5,54,54,84,54,54,5,54,54,54,54,54,54,54,5,54,54,54,54,54,54,54,54,5,5,54,5,5,5,5,5,54,5,5,5,5,54,5,5,5,54,54,54,5,5,5,5,54,54,]),'comentario':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'estructuras_de_Control':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'tipo':([0,1,8,10,59,62,70,72,73,74,77,80,87,92,98,106,109,116,120,122,150,158,168,169,170,173,179,184,185,186,187,193,201,211,212,221,222,223,232,],[11,11,52,52,52,52,94,96,97,11,104,52,52,52,11,52,52,52,151,52,11,11,11,11,11,11,11,11,11,11,11,52,11,11,11,11,11,11,11,]),'valor':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[13,13,51,51,51,51,90,13,100,102,51,113,51,117,118,13,100,51,51,51,51,100,160,90,13,13,118,13,13,13,13,13,197,13,13,13,13,51,13,13,13,224,225,230,13,13,13,13,230,241,]),'sentencia_If':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'sentencia_Switch':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'ciclo_for':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'funcion_Anonima':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'diccionario':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'Conjunto':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'funcion_flecha':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'funcion_Void':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'funcion':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'funcion_Data':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'estructura_List':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'Bool':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[41,41,41,41,41,41,41,41,101,41,41,41,41,41,41,41,101,41,41,41,41,101,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'tupla':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[42,42,55,55,55,55,55,42,55,55,55,55,55,55,119,42,55,55,55,55,55,55,55,55,42,42,55,42,42,42,42,42,55,42,42,42,42,55,42,42,42,55,55,55,42,42,42,42,55,55,]),'valores':([8,10,59,62,80,87,92,106,109,116,122,193,],[50,60,82,88,108,114,60,139,142,147,153,208,]),'operador':([13,51,90,100,102,113,117,118,160,197,224,225,230,241,],[64,64,64,64,64,64,148,64,64,64,64,64,64,64,]),'expresion':([64,148,],[91,172,]),'condicion':([75,103,127,],[99,136,159,]),'cuerpo_conjunto':([95,176,],[121,192,]),'conector':([99,136,159,],[127,127,127,]),'Comparador':([100,],[130,]),'caso':([164,239,],[180,242,]),'contador':([165,],[182,]),'else':([195,],[209,]),'cuerpo_Diccionario':([206,],[218,]),'duplas':([219,236,],[227,240,]),'dupla':([219,236,],[229,229,]),}\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_goto_items",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_goto_items = {'programa':([0,74,150,158,168,169,170,184,211,212,221,],[1,98,173,179,185,186,187,201,222,223,232,]),'cuerpo':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[2,49,2,49,2,178,2,2,2,49,49,2,49,49,49,49,2,2,2,49,49,49,]),'impresion':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'declaracion':([0,1,74,77,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[4,4,4,103,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'operacion':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[5,5,54,54,84,54,54,5,54,54,54,54,54,54,54,5,54,54,54,54,54,54,54,54,5,5,54,5,5,5,5,5,54,5,5,5,5,54,5,5,5,54,54,54,5,5,5,5,54,54,]),'comentario':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'estructuras_de_Control':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'tipo':([0,1,8,10,59,62,70,72,73,74,77,80,87,92,98,106,109,116,120,122,150,158,168,169,170,173,179,184,185,186,187,193,201,211,212,221,222,223,232,],[11,11,52,52,52,52,94,96,97,11,104,52,52,52,11,52,52,52,151,52,11,11,11,11,11,11,11,11,11,11,11,52,11,11,11,11,11,11,11,]),'valor':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[13,13,51,51,51,51,90,13,100,102,51,113,51,117,118,13,100,51,51,51,51,100,160,90,13,13,118,13,13,13,13,13,197,13,13,13,13,51,13,13,13,224,225,230,13,13,13,13,230,241,]),'sentencia_If':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'sentencia_Switch':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'ciclo_for':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'funcion_Anonima':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'diccionario':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'Conjunto':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'funcion_flecha':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'funcion_Void':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'funcion':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'funcion_Data':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'estructura_List':([0,1,74,98,150,158,168,169,170,173,179,184,185,186,187,201,211,212,221,222,223,232,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'Bool':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[41,41,41,41,41,41,41,41,101,41,41,41,41,41,41,41,101,41,41,41,41,101,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'tupla':([0,1,8,10,59,62,64,74,75,76,80,86,87,92,93,98,103,106,109,116,122,127,130,148,150,158,166,168,169,170,173,179,181,184,185,186,187,193,201,211,212,214,216,219,221,222,223,232,236,237,],[42,42,55,55,55,55,55,42,55,55,55,55,55,55,119,42,55,55,55,55,55,55,55,55,42,42,55,42,42,42,42,42,55,42,42,42,42,55,42,42,42,55,55,55,42,42,42,42,55,55,]),'valores':([8,10,59,62,80,87,92,106,109,116,122,193,],[50,60,82,88,108,114,60,139,142,147,153,208,]),'operador':([13,51,90,100,102,113,117,118,160,197,224,225,230,241,],[64,64,64,64,64,64,148,64,64,64,64,64,64,64,]),'expresion':([64,148,],[91,172,]),'condicion':([75,103,127,],[99,136,159,]),'cuerpo_conjunto':([95,176,],[121,192,]),'conector':([99,136,159,],[127,127,127,]),'Comparador':([100,],[130,]),'caso':([164,239,],[180,242,]),'contador':([165,],[182,]),'else':([195,],[209,]),'cuerpo_Diccionario':([206,],[218,]),'duplas':([219,236,],[227,240,]),'dupla':([219,236,],[229,229,]),}\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):\n       if not _x in _lr_goto: _lr_goto[_x] = {}\n       _lr_goto[_x][_k] = _y\ndel _lr_goto_items\n_lr_productions = [\n  (\"S' -> programa\",\"S'\",1,None,None,None),\n  ('programa -> cuerpo','programa',1,'p_programa','main.py',13),",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_goto",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):\n       if not _x in _lr_goto: _lr_goto[_x] = {}\n       _lr_goto[_x][_k] = _y\ndel _lr_goto_items\n_lr_productions = [\n  (\"S' -> programa\",\"S'\",1,None,None,None),\n  ('programa -> cuerpo','programa',1,'p_programa','main.py',13),\n  ('programa -> programa cuerpo','programa',2,'p_programa','main.py',14),",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_productions",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_productions = [\n  (\"S' -> programa\",\"S'\",1,None,None,None),\n  ('programa -> cuerpo','programa',1,'p_programa','main.py',13),\n  ('programa -> programa cuerpo','programa',2,'p_programa','main.py',14),\n  ('cuerpo -> impresion','cuerpo',1,'p_cuerpo','main.py',22),\n  ('cuerpo -> declaracion','cuerpo',1,'p_cuerpo','main.py',23),\n  ('cuerpo -> operacion','cuerpo',1,'p_cuerpo','main.py',24),\n  ('cuerpo -> comentario','cuerpo',1,'p_cuerpo','main.py',25),\n  ('cuerpo -> estructuras_de_Control','cuerpo',1,'p_cuerpo','main.py',26),\n  ('cuerpo -> RETURN','cuerpo',1,'p_cuerpo','main.py',27),",
        "detail": "parsetab",
        "documentation": {}
    }
]