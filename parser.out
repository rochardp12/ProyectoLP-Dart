Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ADMIRATION
    AS
    CATCH
    CLASS
    DEF
    DEFAULT
    DOLLAR
    ELIF
    ENUM
    EXTENDS
    FINALLY
    IN
    INTEGERDIVISION
    INTERFACE
    IS
    METHOD
    MOD
    MODULE
    NEW
    NULL
    PRIVATE
    PROTECTED
    PUBLIC
    STATIC
    SUPER
    THIS
    TRY
    TYPEDEF
    WHILE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> cuerpo
Rule 2     programa -> programa cuerpo
Rule 3     cuerpo -> impresion
Rule 4     cuerpo -> declaracion
Rule 5     cuerpo -> operacion
Rule 6     cuerpo -> comentario
Rule 7     cuerpo -> estructuras_de_Control
Rule 8     cuerpo -> RETURN
Rule 9     cuerpo -> RETURN valores
Rule 10    estructuras_de_Control -> sentencia_If
Rule 11    estructuras_de_Control -> sentencia_Switch
Rule 12    estructuras_de_Control -> ciclo_for
Rule 13    estructuras_de_Control -> funcion_Anonima
Rule 14    estructuras_de_Control -> diccionario
Rule 15    estructuras_de_Control -> Conjunto
Rule 16    estructuras_de_Control -> funcion_flecha
Rule 17    estructuras_de_Control -> funcion_Void
Rule 18    estructuras_de_Control -> funcion
Rule 19    estructuras_de_Control -> funcion_Data
Rule 20    estructuras_de_Control -> estructura_List
Rule 21    comentario -> COMMENTLINE
Rule 22    comentario -> COMMENTBLOCK
Rule 23    impresion -> PRINT LPAREN valores RPAREN DOTCOMMA
Rule 24    impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA
Rule 25    impresion -> PRINT LPAREN RPAREN DOTCOMMA
Rule 26    sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
Rule 27    sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
Rule 28    else -> ELSE LBRACE programa RBRACE
Rule 29    condicion -> valor Comparador valor
Rule 30    condicion -> condicion conector condicion
Rule 31    condicion -> Bool
Rule 32    conector -> AND
Rule 33    conector -> OR
Rule 34    estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
Rule 35    funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
Rule 36    funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
Rule 37    funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
Rule 38    Comparador -> EQUALS EQUALS
Rule 39    Comparador -> LANGLE
Rule 40    Comparador -> RANGLE
Rule 41    Comparador -> LANGLE EQUALS
Rule 42    Comparador -> RANGLE EQUALS
Rule 43    Comparador -> NEQ
Rule 44    tupla -> LPAREN valores RPAREN
Rule 45    valores -> valor
Rule 46    valores -> valor COMMA valores
Rule 47    valores -> tipo VARIABLE
Rule 48    valores -> tipo VARIABLE COMMA valores
Rule 49    Bool -> TRUE
Rule 50    Bool -> FALSE
Rule 51    valor -> VARIABLE
Rule 52    valor -> NUMBER
Rule 53    valor -> FLOAT
Rule 54    valor -> CHAINCHAR
Rule 55    valor -> Bool
Rule 56    valor -> operacion
Rule 57    valor -> tupla
Rule 58    tipo -> MAP
Rule 59    tipo -> DOUBLE
Rule 60    tipo -> STRING
Rule 61    tipo -> INT
Rule 62    tipo -> SET
Rule 63    tipo -> LIST
Rule 64    tipo -> BOOLEAN
Rule 65    tipo -> FINAL
Rule 66    tipo -> CONST
Rule 67    tipo -> DYNAMIC
Rule 68    declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA
Rule 69    declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA
Rule 70    operacion -> valor operador expresion
Rule 71    expresion -> LPAREN valor operador expresion RPAREN
Rule 72    expresion -> valor
Rule 73    funcion -> VARIABLE LPAREN valores RPAREN
Rule 74    funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
Rule 75    sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
Rule 76    caso -> CASE valor TWODOTS programa BREAK DOTCOMMA caso
Rule 77    caso -> CASE valor TWODOTS programa BREAK DOTCOMMA
Rule 78    funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
Rule 79    Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
Rule 80    Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
Rule 81    cuerpo_conjunto -> LBRACE valores RBRACE
Rule 82    cuerpo_conjunto -> LBRACE RBRACE
Rule 83    operador -> PLUS
Rule 84    operador -> MINUS
Rule 85    operador -> TIMES
Rule 86    operador -> DIVIDE
Rule 87    ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
Rule 88    contador -> VARIABLE PLUS PLUS
Rule 89    contador -> VARIABLE PLUS EQUALS valor
Rule 90    contador -> VARIABLE MINUS MINUS
Rule 91    contador -> VARIABLE MINUS EQUALS valor
Rule 92    funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
Rule 93    funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA
Rule 94    diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
Rule 95    cuerpo_Diccionario -> LBRACE duplas RBRACE
Rule 96    cuerpo_Diccionario -> LBRACE RBRACE
Rule 97    duplas -> dupla
Rule 98    duplas -> dupla COMMA duplas
Rule 99    dupla -> valor TWODOTS valor

Terminals, with rules where they appear

ABSTRACT             : 
ADMIRATION           : 
AND                  : 32
ARROWFUNCTION        : 78
AS                   : 
BOOLEAN              : 64
BREAK                : 76 77
CASE                 : 76 77
CATCH                : 
CHAINCHAR            : 54
CLASS                : 
COMMA                : 46 48 94 98
COMMENTBLOCK         : 22
COMMENTLINE          : 21
CONST                : 66
DEF                  : 
DEFAULT              : 
DIVIDE               : 86
DOLLAR               : 
DOT                  : 74
DOTCOMMA             : 23 24 25 34 68 69 74 76 77 78 79 80 87 92 93 94
DOUBLE               : 59
DYNAMIC              : 67
ELIF                 : 
ELSE                 : 28
ENUM                 : 
EQUALS               : 34 38 38 41 42 68 69 79 80 89 91 92 94
EXTENDS              : 
FALSE                : 50
FINAL                : 65
FINALLY              : 
FLOAT                : 53
FOR                  : 87
IF                   : 26 27
IN                   : 
INT                  : 61
INTEGERDIVISION      : 
INTERFACE            : 
IS                   : 
LANGLE               : 34 39 41 80 94
LBRACE               : 26 27 28 35 36 37 75 81 82 87 92 93 95 96
LBRACKET             : 34
LIST                 : 34 63
LPAREN               : 23 24 25 26 27 35 36 37 44 71 73 74 75 78 87
MAIN                 : 37
MAP                  : 58 94
METHOD               : 
MINUS                : 84 90 90 91
MOD                  : 
MODULE               : 
NEQ                  : 43
NEW                  : 
NULL                 : 
NUMBER               : 52
OR                   : 33
PLUS                 : 83 88 88 89
PRINT                : 23 24 25
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
RANGLE               : 34 40 42 80 94
RBRACE               : 26 27 28 35 36 37 75 81 82 87 92 93 95 96
RBRACKET             : 34
RETURN               : 8 9
RPAREN               : 23 24 25 26 27 35 36 37 44 71 73 74 75 78 87
SET                  : 62 79 80
STATIC               : 
STRING               : 60
SUPER                : 
SWITCH               : 75
THIS                 : 
TIMES                : 85
TRUE                 : 49
TRY                  : 
TWODOTS              : 76 77 99
TYPEDEF              : 
VAR                  : 69 92
VARIABLE             : 34 35 36 47 48 51 68 69 73 74 74 78 79 80 88 89 90 91 92 94
VOID                 : 35 36 37
WHILE                : 
error                : 

Nonterminals, with rules where they appear

Bool                 : 31 55
Comparador           : 29
Conjunto             : 15
caso                 : 75 76
ciclo_for            : 12
comentario           : 6
condicion            : 26 27 30 30 87
conector             : 30
contador             : 87
cuerpo               : 1 2 26 27
cuerpo_Diccionario   : 94
cuerpo_conjunto      : 79 80
declaracion          : 4 87
diccionario          : 14
dupla                : 97 98
duplas               : 95 98
else                 : 27
estructura_List      : 20
estructuras_de_Control : 7
expresion            : 70 71
funcion              : 18
funcion_Anonima      : 13
funcion_Data         : 19
funcion_Void         : 17
funcion_flecha       : 16
impresion            : 3
operacion            : 5 24 56
operador             : 70 71
programa             : 2 28 35 36 37 76 77 78 87 92 93 0
sentencia_If         : 10
sentencia_Switch     : 11
tipo                 : 34 47 48 68 78 80 94 94
tupla                : 57 92 93
valor                : 29 29 45 46 68 69 70 71 72 75 76 77 89 91 99 99
valores              : 9 23 34 35 44 46 48 73 74 78 81

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    programa                       shift and go to state 1
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 1

    (0) S' -> programa .
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 2

    (1) programa -> cuerpo .

    RETURN          reduce using rule 1 (programa -> cuerpo .)
    PRINT           reduce using rule 1 (programa -> cuerpo .)
    VAR             reduce using rule 1 (programa -> cuerpo .)
    COMMENTLINE     reduce using rule 1 (programa -> cuerpo .)
    COMMENTBLOCK    reduce using rule 1 (programa -> cuerpo .)
    MAP             reduce using rule 1 (programa -> cuerpo .)
    DOUBLE          reduce using rule 1 (programa -> cuerpo .)
    STRING          reduce using rule 1 (programa -> cuerpo .)
    INT             reduce using rule 1 (programa -> cuerpo .)
    SET             reduce using rule 1 (programa -> cuerpo .)
    LIST            reduce using rule 1 (programa -> cuerpo .)
    BOOLEAN         reduce using rule 1 (programa -> cuerpo .)
    FINAL           reduce using rule 1 (programa -> cuerpo .)
    CONST           reduce using rule 1 (programa -> cuerpo .)
    DYNAMIC         reduce using rule 1 (programa -> cuerpo .)
    VARIABLE        reduce using rule 1 (programa -> cuerpo .)
    NUMBER          reduce using rule 1 (programa -> cuerpo .)
    FLOAT           reduce using rule 1 (programa -> cuerpo .)
    CHAINCHAR       reduce using rule 1 (programa -> cuerpo .)
    IF              reduce using rule 1 (programa -> cuerpo .)
    SWITCH          reduce using rule 1 (programa -> cuerpo .)
    FOR             reduce using rule 1 (programa -> cuerpo .)
    VOID            reduce using rule 1 (programa -> cuerpo .)
    TRUE            reduce using rule 1 (programa -> cuerpo .)
    FALSE           reduce using rule 1 (programa -> cuerpo .)
    LPAREN          reduce using rule 1 (programa -> cuerpo .)
    $end            reduce using rule 1 (programa -> cuerpo .)
    RBRACE          reduce using rule 1 (programa -> cuerpo .)
    DOTCOMMA        reduce using rule 1 (programa -> cuerpo .)
    BREAK           reduce using rule 1 (programa -> cuerpo .)


state 3

    (3) cuerpo -> impresion .

    RETURN          reduce using rule 3 (cuerpo -> impresion .)
    PRINT           reduce using rule 3 (cuerpo -> impresion .)
    VAR             reduce using rule 3 (cuerpo -> impresion .)
    COMMENTLINE     reduce using rule 3 (cuerpo -> impresion .)
    COMMENTBLOCK    reduce using rule 3 (cuerpo -> impresion .)
    MAP             reduce using rule 3 (cuerpo -> impresion .)
    DOUBLE          reduce using rule 3 (cuerpo -> impresion .)
    STRING          reduce using rule 3 (cuerpo -> impresion .)
    INT             reduce using rule 3 (cuerpo -> impresion .)
    SET             reduce using rule 3 (cuerpo -> impresion .)
    LIST            reduce using rule 3 (cuerpo -> impresion .)
    BOOLEAN         reduce using rule 3 (cuerpo -> impresion .)
    FINAL           reduce using rule 3 (cuerpo -> impresion .)
    CONST           reduce using rule 3 (cuerpo -> impresion .)
    DYNAMIC         reduce using rule 3 (cuerpo -> impresion .)
    VARIABLE        reduce using rule 3 (cuerpo -> impresion .)
    NUMBER          reduce using rule 3 (cuerpo -> impresion .)
    FLOAT           reduce using rule 3 (cuerpo -> impresion .)
    CHAINCHAR       reduce using rule 3 (cuerpo -> impresion .)
    IF              reduce using rule 3 (cuerpo -> impresion .)
    SWITCH          reduce using rule 3 (cuerpo -> impresion .)
    FOR             reduce using rule 3 (cuerpo -> impresion .)
    VOID            reduce using rule 3 (cuerpo -> impresion .)
    TRUE            reduce using rule 3 (cuerpo -> impresion .)
    FALSE           reduce using rule 3 (cuerpo -> impresion .)
    LPAREN          reduce using rule 3 (cuerpo -> impresion .)
    $end            reduce using rule 3 (cuerpo -> impresion .)
    RBRACE          reduce using rule 3 (cuerpo -> impresion .)
    DOTCOMMA        reduce using rule 3 (cuerpo -> impresion .)
    BREAK           reduce using rule 3 (cuerpo -> impresion .)


state 4

    (4) cuerpo -> declaracion .

    RETURN          reduce using rule 4 (cuerpo -> declaracion .)
    PRINT           reduce using rule 4 (cuerpo -> declaracion .)
    VAR             reduce using rule 4 (cuerpo -> declaracion .)
    COMMENTLINE     reduce using rule 4 (cuerpo -> declaracion .)
    COMMENTBLOCK    reduce using rule 4 (cuerpo -> declaracion .)
    MAP             reduce using rule 4 (cuerpo -> declaracion .)
    DOUBLE          reduce using rule 4 (cuerpo -> declaracion .)
    STRING          reduce using rule 4 (cuerpo -> declaracion .)
    INT             reduce using rule 4 (cuerpo -> declaracion .)
    SET             reduce using rule 4 (cuerpo -> declaracion .)
    LIST            reduce using rule 4 (cuerpo -> declaracion .)
    BOOLEAN         reduce using rule 4 (cuerpo -> declaracion .)
    FINAL           reduce using rule 4 (cuerpo -> declaracion .)
    CONST           reduce using rule 4 (cuerpo -> declaracion .)
    DYNAMIC         reduce using rule 4 (cuerpo -> declaracion .)
    VARIABLE        reduce using rule 4 (cuerpo -> declaracion .)
    NUMBER          reduce using rule 4 (cuerpo -> declaracion .)
    FLOAT           reduce using rule 4 (cuerpo -> declaracion .)
    CHAINCHAR       reduce using rule 4 (cuerpo -> declaracion .)
    IF              reduce using rule 4 (cuerpo -> declaracion .)
    SWITCH          reduce using rule 4 (cuerpo -> declaracion .)
    FOR             reduce using rule 4 (cuerpo -> declaracion .)
    VOID            reduce using rule 4 (cuerpo -> declaracion .)
    TRUE            reduce using rule 4 (cuerpo -> declaracion .)
    FALSE           reduce using rule 4 (cuerpo -> declaracion .)
    LPAREN          reduce using rule 4 (cuerpo -> declaracion .)
    $end            reduce using rule 4 (cuerpo -> declaracion .)
    RBRACE          reduce using rule 4 (cuerpo -> declaracion .)
    DOTCOMMA        reduce using rule 4 (cuerpo -> declaracion .)
    BREAK           reduce using rule 4 (cuerpo -> declaracion .)


state 5

    (5) cuerpo -> operacion .
    (56) valor -> operacion .

    RETURN          reduce using rule 5 (cuerpo -> operacion .)
    PRINT           reduce using rule 5 (cuerpo -> operacion .)
    VAR             reduce using rule 5 (cuerpo -> operacion .)
    COMMENTLINE     reduce using rule 5 (cuerpo -> operacion .)
    COMMENTBLOCK    reduce using rule 5 (cuerpo -> operacion .)
    MAP             reduce using rule 5 (cuerpo -> operacion .)
    DOUBLE          reduce using rule 5 (cuerpo -> operacion .)
    STRING          reduce using rule 5 (cuerpo -> operacion .)
    INT             reduce using rule 5 (cuerpo -> operacion .)
    SET             reduce using rule 5 (cuerpo -> operacion .)
    LIST            reduce using rule 5 (cuerpo -> operacion .)
    BOOLEAN         reduce using rule 5 (cuerpo -> operacion .)
    FINAL           reduce using rule 5 (cuerpo -> operacion .)
    CONST           reduce using rule 5 (cuerpo -> operacion .)
    DYNAMIC         reduce using rule 5 (cuerpo -> operacion .)
    VARIABLE        reduce using rule 5 (cuerpo -> operacion .)
    NUMBER          reduce using rule 5 (cuerpo -> operacion .)
    FLOAT           reduce using rule 5 (cuerpo -> operacion .)
    CHAINCHAR       reduce using rule 5 (cuerpo -> operacion .)
    IF              reduce using rule 5 (cuerpo -> operacion .)
    SWITCH          reduce using rule 5 (cuerpo -> operacion .)
    FOR             reduce using rule 5 (cuerpo -> operacion .)
    VOID            reduce using rule 5 (cuerpo -> operacion .)
    TRUE            reduce using rule 5 (cuerpo -> operacion .)
    FALSE           reduce using rule 5 (cuerpo -> operacion .)
    LPAREN          reduce using rule 5 (cuerpo -> operacion .)
    $end            reduce using rule 5 (cuerpo -> operacion .)
    RBRACE          reduce using rule 5 (cuerpo -> operacion .)
    DOTCOMMA        reduce using rule 5 (cuerpo -> operacion .)
    BREAK           reduce using rule 5 (cuerpo -> operacion .)
    PLUS            reduce using rule 56 (valor -> operacion .)
    MINUS           reduce using rule 56 (valor -> operacion .)
    TIMES           reduce using rule 56 (valor -> operacion .)
    DIVIDE          reduce using rule 56 (valor -> operacion .)


state 6

    (6) cuerpo -> comentario .

    RETURN          reduce using rule 6 (cuerpo -> comentario .)
    PRINT           reduce using rule 6 (cuerpo -> comentario .)
    VAR             reduce using rule 6 (cuerpo -> comentario .)
    COMMENTLINE     reduce using rule 6 (cuerpo -> comentario .)
    COMMENTBLOCK    reduce using rule 6 (cuerpo -> comentario .)
    MAP             reduce using rule 6 (cuerpo -> comentario .)
    DOUBLE          reduce using rule 6 (cuerpo -> comentario .)
    STRING          reduce using rule 6 (cuerpo -> comentario .)
    INT             reduce using rule 6 (cuerpo -> comentario .)
    SET             reduce using rule 6 (cuerpo -> comentario .)
    LIST            reduce using rule 6 (cuerpo -> comentario .)
    BOOLEAN         reduce using rule 6 (cuerpo -> comentario .)
    FINAL           reduce using rule 6 (cuerpo -> comentario .)
    CONST           reduce using rule 6 (cuerpo -> comentario .)
    DYNAMIC         reduce using rule 6 (cuerpo -> comentario .)
    VARIABLE        reduce using rule 6 (cuerpo -> comentario .)
    NUMBER          reduce using rule 6 (cuerpo -> comentario .)
    FLOAT           reduce using rule 6 (cuerpo -> comentario .)
    CHAINCHAR       reduce using rule 6 (cuerpo -> comentario .)
    IF              reduce using rule 6 (cuerpo -> comentario .)
    SWITCH          reduce using rule 6 (cuerpo -> comentario .)
    FOR             reduce using rule 6 (cuerpo -> comentario .)
    VOID            reduce using rule 6 (cuerpo -> comentario .)
    TRUE            reduce using rule 6 (cuerpo -> comentario .)
    FALSE           reduce using rule 6 (cuerpo -> comentario .)
    LPAREN          reduce using rule 6 (cuerpo -> comentario .)
    $end            reduce using rule 6 (cuerpo -> comentario .)
    RBRACE          reduce using rule 6 (cuerpo -> comentario .)
    DOTCOMMA        reduce using rule 6 (cuerpo -> comentario .)
    BREAK           reduce using rule 6 (cuerpo -> comentario .)


state 7

    (7) cuerpo -> estructuras_de_Control .

    RETURN          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    PRINT           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    VAR             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    COMMENTLINE     reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    COMMENTBLOCK    reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    MAP             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    DOUBLE          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    STRING          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    INT             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    SET             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    LIST            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    BOOLEAN         reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    FINAL           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    CONST           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    DYNAMIC         reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    VARIABLE        reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    NUMBER          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    FLOAT           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    CHAINCHAR       reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    IF              reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    SWITCH          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    FOR             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    VOID            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    TRUE            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    FALSE           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    LPAREN          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    $end            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    RBRACE          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    DOTCOMMA        reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    BREAK           reduce using rule 7 (cuerpo -> estructuras_de_Control .)


state 8

    (8) cuerpo -> RETURN .
    (9) cuerpo -> RETURN . valores
    (45) valores -> . valor
    (46) valores -> . valor COMMA valores
    (47) valores -> . tipo VARIABLE
    (48) valores -> . tipo VARIABLE COMMA valores
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAINCHAR resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for DYNAMIC resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    RETURN          reduce using rule 8 (cuerpo -> RETURN .)
    PRINT           reduce using rule 8 (cuerpo -> RETURN .)
    VAR             reduce using rule 8 (cuerpo -> RETURN .)
    COMMENTLINE     reduce using rule 8 (cuerpo -> RETURN .)
    COMMENTBLOCK    reduce using rule 8 (cuerpo -> RETURN .)
    IF              reduce using rule 8 (cuerpo -> RETURN .)
    SWITCH          reduce using rule 8 (cuerpo -> RETURN .)
    FOR             reduce using rule 8 (cuerpo -> RETURN .)
    VOID            reduce using rule 8 (cuerpo -> RETURN .)
    $end            reduce using rule 8 (cuerpo -> RETURN .)
    RBRACE          reduce using rule 8 (cuerpo -> RETURN .)
    DOTCOMMA        reduce using rule 8 (cuerpo -> RETURN .)
    BREAK           reduce using rule 8 (cuerpo -> RETURN .)
    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    MAP             shift and go to state 56
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 57
    LIST            shift and go to state 58
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

  ! MAP             [ reduce using rule 8 (cuerpo -> RETURN .) ]
  ! DOUBLE          [ reduce using rule 8 (cuerpo -> RETURN .) ]
  ! STRING          [ reduce using rule 8 (cuerpo -> RETURN .) ]
  ! INT             [ reduce using rule 8 (cuerpo -> RETURN .) ]
  ! SET             [ reduce using rule 8 (cuerpo -> RETURN .) ]
  ! LIST            [ reduce using rule 8 (cuerpo -> RETURN .) ]
  ! BOOLEAN         [ reduce using rule 8 (cuerpo -> RETURN .) ]
  ! FINAL           [ reduce using rule 8 (cuerpo -> RETURN .) ]
  ! CONST           [ reduce using rule 8 (cuerpo -> RETURN .) ]
  ! DYNAMIC         [ reduce using rule 8 (cuerpo -> RETURN .) ]
  ! VARIABLE        [ reduce using rule 8 (cuerpo -> RETURN .) ]
  ! NUMBER          [ reduce using rule 8 (cuerpo -> RETURN .) ]
  ! FLOAT           [ reduce using rule 8 (cuerpo -> RETURN .) ]
  ! CHAINCHAR       [ reduce using rule 8 (cuerpo -> RETURN .) ]
  ! TRUE            [ reduce using rule 8 (cuerpo -> RETURN .) ]
  ! FALSE           [ reduce using rule 8 (cuerpo -> RETURN .) ]
  ! LPAREN          [ reduce using rule 8 (cuerpo -> RETURN .) ]

    valores                        shift and go to state 50
    valor                          shift and go to state 51
    tipo                           shift and go to state 52
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 9

    (23) impresion -> PRINT . LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> PRINT . LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> PRINT . LPAREN RPAREN DOTCOMMA

    LPAREN          shift and go to state 59


state 10

    (44) tupla -> LPAREN . valores RPAREN
    (45) valores -> . valor
    (46) valores -> . valor COMMA valores
    (47) valores -> . tipo VARIABLE
    (48) valores -> . tipo VARIABLE COMMA valores
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    MAP             shift and go to state 56
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 57
    LIST            shift and go to state 58
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    valores                        shift and go to state 60
    valor                          shift and go to state 51
    tipo                           shift and go to state 52
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 11

    (68) declaracion -> tipo . VARIABLE EQUALS valor DOTCOMMA
    (78) funcion_flecha -> tipo . VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA

    VARIABLE        shift and go to state 61


state 12

    (51) valor -> VARIABLE .
    (73) funcion -> VARIABLE . LPAREN valores RPAREN
    (74) funcion_Data -> VARIABLE . DOT VARIABLE LPAREN valores RPAREN DOTCOMMA

    PLUS            reduce using rule 51 (valor -> VARIABLE .)
    MINUS           reduce using rule 51 (valor -> VARIABLE .)
    TIMES           reduce using rule 51 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 51 (valor -> VARIABLE .)
    LPAREN          shift and go to state 62
    DOT             shift and go to state 63


state 13

    (70) operacion -> valor . operador expresion
    (83) operador -> . PLUS
    (84) operador -> . MINUS
    (85) operador -> . TIMES
    (86) operador -> . DIVIDE

    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68

    operador                       shift and go to state 64

state 14

    (69) declaracion -> VAR . VARIABLE EQUALS valor DOTCOMMA
    (92) funcion_Anonima -> VAR . VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA

    VARIABLE        shift and go to state 69


state 15

    (21) comentario -> COMMENTLINE .

    RETURN          reduce using rule 21 (comentario -> COMMENTLINE .)
    PRINT           reduce using rule 21 (comentario -> COMMENTLINE .)
    VAR             reduce using rule 21 (comentario -> COMMENTLINE .)
    COMMENTLINE     reduce using rule 21 (comentario -> COMMENTLINE .)
    COMMENTBLOCK    reduce using rule 21 (comentario -> COMMENTLINE .)
    MAP             reduce using rule 21 (comentario -> COMMENTLINE .)
    DOUBLE          reduce using rule 21 (comentario -> COMMENTLINE .)
    STRING          reduce using rule 21 (comentario -> COMMENTLINE .)
    INT             reduce using rule 21 (comentario -> COMMENTLINE .)
    SET             reduce using rule 21 (comentario -> COMMENTLINE .)
    LIST            reduce using rule 21 (comentario -> COMMENTLINE .)
    BOOLEAN         reduce using rule 21 (comentario -> COMMENTLINE .)
    FINAL           reduce using rule 21 (comentario -> COMMENTLINE .)
    CONST           reduce using rule 21 (comentario -> COMMENTLINE .)
    DYNAMIC         reduce using rule 21 (comentario -> COMMENTLINE .)
    VARIABLE        reduce using rule 21 (comentario -> COMMENTLINE .)
    NUMBER          reduce using rule 21 (comentario -> COMMENTLINE .)
    FLOAT           reduce using rule 21 (comentario -> COMMENTLINE .)
    CHAINCHAR       reduce using rule 21 (comentario -> COMMENTLINE .)
    IF              reduce using rule 21 (comentario -> COMMENTLINE .)
    SWITCH          reduce using rule 21 (comentario -> COMMENTLINE .)
    FOR             reduce using rule 21 (comentario -> COMMENTLINE .)
    VOID            reduce using rule 21 (comentario -> COMMENTLINE .)
    TRUE            reduce using rule 21 (comentario -> COMMENTLINE .)
    FALSE           reduce using rule 21 (comentario -> COMMENTLINE .)
    LPAREN          reduce using rule 21 (comentario -> COMMENTLINE .)
    $end            reduce using rule 21 (comentario -> COMMENTLINE .)
    RBRACE          reduce using rule 21 (comentario -> COMMENTLINE .)
    DOTCOMMA        reduce using rule 21 (comentario -> COMMENTLINE .)
    BREAK           reduce using rule 21 (comentario -> COMMENTLINE .)


state 16

    (22) comentario -> COMMENTBLOCK .

    RETURN          reduce using rule 22 (comentario -> COMMENTBLOCK .)
    PRINT           reduce using rule 22 (comentario -> COMMENTBLOCK .)
    VAR             reduce using rule 22 (comentario -> COMMENTBLOCK .)
    COMMENTLINE     reduce using rule 22 (comentario -> COMMENTBLOCK .)
    COMMENTBLOCK    reduce using rule 22 (comentario -> COMMENTBLOCK .)
    MAP             reduce using rule 22 (comentario -> COMMENTBLOCK .)
    DOUBLE          reduce using rule 22 (comentario -> COMMENTBLOCK .)
    STRING          reduce using rule 22 (comentario -> COMMENTBLOCK .)
    INT             reduce using rule 22 (comentario -> COMMENTBLOCK .)
    SET             reduce using rule 22 (comentario -> COMMENTBLOCK .)
    LIST            reduce using rule 22 (comentario -> COMMENTBLOCK .)
    BOOLEAN         reduce using rule 22 (comentario -> COMMENTBLOCK .)
    FINAL           reduce using rule 22 (comentario -> COMMENTBLOCK .)
    CONST           reduce using rule 22 (comentario -> COMMENTBLOCK .)
    DYNAMIC         reduce using rule 22 (comentario -> COMMENTBLOCK .)
    VARIABLE        reduce using rule 22 (comentario -> COMMENTBLOCK .)
    NUMBER          reduce using rule 22 (comentario -> COMMENTBLOCK .)
    FLOAT           reduce using rule 22 (comentario -> COMMENTBLOCK .)
    CHAINCHAR       reduce using rule 22 (comentario -> COMMENTBLOCK .)
    IF              reduce using rule 22 (comentario -> COMMENTBLOCK .)
    SWITCH          reduce using rule 22 (comentario -> COMMENTBLOCK .)
    FOR             reduce using rule 22 (comentario -> COMMENTBLOCK .)
    VOID            reduce using rule 22 (comentario -> COMMENTBLOCK .)
    TRUE            reduce using rule 22 (comentario -> COMMENTBLOCK .)
    FALSE           reduce using rule 22 (comentario -> COMMENTBLOCK .)
    LPAREN          reduce using rule 22 (comentario -> COMMENTBLOCK .)
    $end            reduce using rule 22 (comentario -> COMMENTBLOCK .)
    RBRACE          reduce using rule 22 (comentario -> COMMENTBLOCK .)
    DOTCOMMA        reduce using rule 22 (comentario -> COMMENTBLOCK .)
    BREAK           reduce using rule 22 (comentario -> COMMENTBLOCK .)


state 17

    (10) estructuras_de_Control -> sentencia_If .

    RETURN          reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    PRINT           reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    VAR             reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    COMMENTLINE     reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    COMMENTBLOCK    reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    MAP             reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    DOUBLE          reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    STRING          reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    INT             reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    SET             reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    LIST            reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    BOOLEAN         reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    FINAL           reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    CONST           reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    DYNAMIC         reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    VARIABLE        reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    NUMBER          reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    FLOAT           reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    CHAINCHAR       reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    IF              reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    SWITCH          reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    FOR             reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    VOID            reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    TRUE            reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    FALSE           reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    LPAREN          reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    $end            reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    RBRACE          reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    DOTCOMMA        reduce using rule 10 (estructuras_de_Control -> sentencia_If .)
    BREAK           reduce using rule 10 (estructuras_de_Control -> sentencia_If .)


state 18

    (11) estructuras_de_Control -> sentencia_Switch .

    RETURN          reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    PRINT           reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    VAR             reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    COMMENTLINE     reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    COMMENTBLOCK    reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    MAP             reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    DOUBLE          reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    STRING          reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    INT             reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    SET             reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    LIST            reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    BOOLEAN         reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    FINAL           reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    CONST           reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    DYNAMIC         reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    VARIABLE        reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    NUMBER          reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    FLOAT           reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    CHAINCHAR       reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    IF              reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    SWITCH          reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    FOR             reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    VOID            reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    TRUE            reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    FALSE           reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    LPAREN          reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    $end            reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    RBRACE          reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    DOTCOMMA        reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)
    BREAK           reduce using rule 11 (estructuras_de_Control -> sentencia_Switch .)


state 19

    (12) estructuras_de_Control -> ciclo_for .

    RETURN          reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    PRINT           reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    VAR             reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    COMMENTLINE     reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    COMMENTBLOCK    reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    MAP             reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    DOUBLE          reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    STRING          reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    INT             reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    SET             reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    LIST            reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    BOOLEAN         reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    FINAL           reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    CONST           reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    DYNAMIC         reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    VARIABLE        reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    NUMBER          reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    FLOAT           reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    CHAINCHAR       reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    IF              reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    SWITCH          reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    FOR             reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    VOID            reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    TRUE            reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    FALSE           reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    LPAREN          reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    $end            reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    RBRACE          reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    DOTCOMMA        reduce using rule 12 (estructuras_de_Control -> ciclo_for .)
    BREAK           reduce using rule 12 (estructuras_de_Control -> ciclo_for .)


state 20

    (13) estructuras_de_Control -> funcion_Anonima .

    RETURN          reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    PRINT           reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    VAR             reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    COMMENTLINE     reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    COMMENTBLOCK    reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    MAP             reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    DOUBLE          reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    STRING          reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    INT             reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    SET             reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    LIST            reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    BOOLEAN         reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    FINAL           reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    CONST           reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    DYNAMIC         reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    VARIABLE        reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    NUMBER          reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    FLOAT           reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    CHAINCHAR       reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    IF              reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    SWITCH          reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    FOR             reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    VOID            reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    TRUE            reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    FALSE           reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    LPAREN          reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    $end            reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    RBRACE          reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    DOTCOMMA        reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)
    BREAK           reduce using rule 13 (estructuras_de_Control -> funcion_Anonima .)


state 21

    (14) estructuras_de_Control -> diccionario .

    RETURN          reduce using rule 14 (estructuras_de_Control -> diccionario .)
    PRINT           reduce using rule 14 (estructuras_de_Control -> diccionario .)
    VAR             reduce using rule 14 (estructuras_de_Control -> diccionario .)
    COMMENTLINE     reduce using rule 14 (estructuras_de_Control -> diccionario .)
    COMMENTBLOCK    reduce using rule 14 (estructuras_de_Control -> diccionario .)
    MAP             reduce using rule 14 (estructuras_de_Control -> diccionario .)
    DOUBLE          reduce using rule 14 (estructuras_de_Control -> diccionario .)
    STRING          reduce using rule 14 (estructuras_de_Control -> diccionario .)
    INT             reduce using rule 14 (estructuras_de_Control -> diccionario .)
    SET             reduce using rule 14 (estructuras_de_Control -> diccionario .)
    LIST            reduce using rule 14 (estructuras_de_Control -> diccionario .)
    BOOLEAN         reduce using rule 14 (estructuras_de_Control -> diccionario .)
    FINAL           reduce using rule 14 (estructuras_de_Control -> diccionario .)
    CONST           reduce using rule 14 (estructuras_de_Control -> diccionario .)
    DYNAMIC         reduce using rule 14 (estructuras_de_Control -> diccionario .)
    VARIABLE        reduce using rule 14 (estructuras_de_Control -> diccionario .)
    NUMBER          reduce using rule 14 (estructuras_de_Control -> diccionario .)
    FLOAT           reduce using rule 14 (estructuras_de_Control -> diccionario .)
    CHAINCHAR       reduce using rule 14 (estructuras_de_Control -> diccionario .)
    IF              reduce using rule 14 (estructuras_de_Control -> diccionario .)
    SWITCH          reduce using rule 14 (estructuras_de_Control -> diccionario .)
    FOR             reduce using rule 14 (estructuras_de_Control -> diccionario .)
    VOID            reduce using rule 14 (estructuras_de_Control -> diccionario .)
    TRUE            reduce using rule 14 (estructuras_de_Control -> diccionario .)
    FALSE           reduce using rule 14 (estructuras_de_Control -> diccionario .)
    LPAREN          reduce using rule 14 (estructuras_de_Control -> diccionario .)
    $end            reduce using rule 14 (estructuras_de_Control -> diccionario .)
    RBRACE          reduce using rule 14 (estructuras_de_Control -> diccionario .)
    DOTCOMMA        reduce using rule 14 (estructuras_de_Control -> diccionario .)
    BREAK           reduce using rule 14 (estructuras_de_Control -> diccionario .)


state 22

    (15) estructuras_de_Control -> Conjunto .

    RETURN          reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    PRINT           reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    VAR             reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    COMMENTLINE     reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    COMMENTBLOCK    reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    MAP             reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    DOUBLE          reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    STRING          reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    INT             reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    SET             reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    LIST            reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    BOOLEAN         reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    FINAL           reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    CONST           reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    DYNAMIC         reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    VARIABLE        reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    NUMBER          reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    FLOAT           reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    CHAINCHAR       reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    IF              reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    SWITCH          reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    FOR             reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    VOID            reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    TRUE            reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    FALSE           reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    LPAREN          reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    $end            reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    RBRACE          reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    DOTCOMMA        reduce using rule 15 (estructuras_de_Control -> Conjunto .)
    BREAK           reduce using rule 15 (estructuras_de_Control -> Conjunto .)


state 23

    (16) estructuras_de_Control -> funcion_flecha .

    RETURN          reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    PRINT           reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    VAR             reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    COMMENTLINE     reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    COMMENTBLOCK    reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    MAP             reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    DOUBLE          reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    STRING          reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    INT             reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    SET             reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    LIST            reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    BOOLEAN         reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    FINAL           reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    CONST           reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    DYNAMIC         reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    VARIABLE        reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    NUMBER          reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    FLOAT           reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    CHAINCHAR       reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    IF              reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    SWITCH          reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    FOR             reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    VOID            reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    TRUE            reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    FALSE           reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    LPAREN          reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    $end            reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    RBRACE          reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    DOTCOMMA        reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)
    BREAK           reduce using rule 16 (estructuras_de_Control -> funcion_flecha .)


state 24

    (17) estructuras_de_Control -> funcion_Void .

    RETURN          reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    PRINT           reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    VAR             reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    COMMENTLINE     reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    COMMENTBLOCK    reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    MAP             reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    DOUBLE          reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    STRING          reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    INT             reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    SET             reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    LIST            reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    BOOLEAN         reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    FINAL           reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    CONST           reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    DYNAMIC         reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    VARIABLE        reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    NUMBER          reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    FLOAT           reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    CHAINCHAR       reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    IF              reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    SWITCH          reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    FOR             reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    VOID            reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    TRUE            reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    FALSE           reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    LPAREN          reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    $end            reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    RBRACE          reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    DOTCOMMA        reduce using rule 17 (estructuras_de_Control -> funcion_Void .)
    BREAK           reduce using rule 17 (estructuras_de_Control -> funcion_Void .)


state 25

    (18) estructuras_de_Control -> funcion .

    RETURN          reduce using rule 18 (estructuras_de_Control -> funcion .)
    PRINT           reduce using rule 18 (estructuras_de_Control -> funcion .)
    VAR             reduce using rule 18 (estructuras_de_Control -> funcion .)
    COMMENTLINE     reduce using rule 18 (estructuras_de_Control -> funcion .)
    COMMENTBLOCK    reduce using rule 18 (estructuras_de_Control -> funcion .)
    MAP             reduce using rule 18 (estructuras_de_Control -> funcion .)
    DOUBLE          reduce using rule 18 (estructuras_de_Control -> funcion .)
    STRING          reduce using rule 18 (estructuras_de_Control -> funcion .)
    INT             reduce using rule 18 (estructuras_de_Control -> funcion .)
    SET             reduce using rule 18 (estructuras_de_Control -> funcion .)
    LIST            reduce using rule 18 (estructuras_de_Control -> funcion .)
    BOOLEAN         reduce using rule 18 (estructuras_de_Control -> funcion .)
    FINAL           reduce using rule 18 (estructuras_de_Control -> funcion .)
    CONST           reduce using rule 18 (estructuras_de_Control -> funcion .)
    DYNAMIC         reduce using rule 18 (estructuras_de_Control -> funcion .)
    VARIABLE        reduce using rule 18 (estructuras_de_Control -> funcion .)
    NUMBER          reduce using rule 18 (estructuras_de_Control -> funcion .)
    FLOAT           reduce using rule 18 (estructuras_de_Control -> funcion .)
    CHAINCHAR       reduce using rule 18 (estructuras_de_Control -> funcion .)
    IF              reduce using rule 18 (estructuras_de_Control -> funcion .)
    SWITCH          reduce using rule 18 (estructuras_de_Control -> funcion .)
    FOR             reduce using rule 18 (estructuras_de_Control -> funcion .)
    VOID            reduce using rule 18 (estructuras_de_Control -> funcion .)
    TRUE            reduce using rule 18 (estructuras_de_Control -> funcion .)
    FALSE           reduce using rule 18 (estructuras_de_Control -> funcion .)
    LPAREN          reduce using rule 18 (estructuras_de_Control -> funcion .)
    $end            reduce using rule 18 (estructuras_de_Control -> funcion .)
    RBRACE          reduce using rule 18 (estructuras_de_Control -> funcion .)
    DOTCOMMA        reduce using rule 18 (estructuras_de_Control -> funcion .)
    BREAK           reduce using rule 18 (estructuras_de_Control -> funcion .)


state 26

    (19) estructuras_de_Control -> funcion_Data .

    RETURN          reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    PRINT           reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    VAR             reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    COMMENTLINE     reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    COMMENTBLOCK    reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    MAP             reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    DOUBLE          reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    STRING          reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    INT             reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    SET             reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    LIST            reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    BOOLEAN         reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    FINAL           reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    CONST           reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    DYNAMIC         reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    VARIABLE        reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    NUMBER          reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    FLOAT           reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    CHAINCHAR       reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    IF              reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    SWITCH          reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    FOR             reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    VOID            reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    TRUE            reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    FALSE           reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    LPAREN          reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    $end            reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    RBRACE          reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    DOTCOMMA        reduce using rule 19 (estructuras_de_Control -> funcion_Data .)
    BREAK           reduce using rule 19 (estructuras_de_Control -> funcion_Data .)


state 27

    (20) estructuras_de_Control -> estructura_List .

    RETURN          reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    PRINT           reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    VAR             reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    COMMENTLINE     reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    COMMENTBLOCK    reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    MAP             reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    DOUBLE          reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    STRING          reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    INT             reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    SET             reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    LIST            reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    BOOLEAN         reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    FINAL           reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    CONST           reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    DYNAMIC         reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    VARIABLE        reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    NUMBER          reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    FLOAT           reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    CHAINCHAR       reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    IF              reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    SWITCH          reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    FOR             reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    VOID            reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    TRUE            reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    FALSE           reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    LPAREN          reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    $end            reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    RBRACE          reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    DOTCOMMA        reduce using rule 20 (estructuras_de_Control -> estructura_List .)
    BREAK           reduce using rule 20 (estructuras_de_Control -> estructura_List .)


state 28

    (58) tipo -> MAP .
    (94) diccionario -> MAP . LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    VARIABLE        reduce using rule 58 (tipo -> MAP .)
    LANGLE          shift and go to state 70


state 29

    (59) tipo -> DOUBLE .

    VARIABLE        reduce using rule 59 (tipo -> DOUBLE .)
    COMMA           reduce using rule 59 (tipo -> DOUBLE .)
    RANGLE          reduce using rule 59 (tipo -> DOUBLE .)


state 30

    (60) tipo -> STRING .

    VARIABLE        reduce using rule 60 (tipo -> STRING .)
    COMMA           reduce using rule 60 (tipo -> STRING .)
    RANGLE          reduce using rule 60 (tipo -> STRING .)


state 31

    (61) tipo -> INT .

    VARIABLE        reduce using rule 61 (tipo -> INT .)
    COMMA           reduce using rule 61 (tipo -> INT .)
    RANGLE          reduce using rule 61 (tipo -> INT .)


state 32

    (62) tipo -> SET .
    (79) Conjunto -> SET . VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> SET . LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA

  ! shift/reduce conflict for VARIABLE resolved as shift
    VARIABLE        shift and go to state 71
    LANGLE          shift and go to state 72

  ! VARIABLE        [ reduce using rule 62 (tipo -> SET .) ]


state 33

    (63) tipo -> LIST .
    (34) estructura_List -> LIST . LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA

    VARIABLE        reduce using rule 63 (tipo -> LIST .)
    LANGLE          shift and go to state 73


state 34

    (64) tipo -> BOOLEAN .

    VARIABLE        reduce using rule 64 (tipo -> BOOLEAN .)
    COMMA           reduce using rule 64 (tipo -> BOOLEAN .)
    RANGLE          reduce using rule 64 (tipo -> BOOLEAN .)


state 35

    (65) tipo -> FINAL .

    VARIABLE        reduce using rule 65 (tipo -> FINAL .)
    COMMA           reduce using rule 65 (tipo -> FINAL .)
    RANGLE          reduce using rule 65 (tipo -> FINAL .)


state 36

    (66) tipo -> CONST .

    VARIABLE        reduce using rule 66 (tipo -> CONST .)
    COMMA           reduce using rule 66 (tipo -> CONST .)
    RANGLE          reduce using rule 66 (tipo -> CONST .)


state 37

    (67) tipo -> DYNAMIC .

    VARIABLE        reduce using rule 67 (tipo -> DYNAMIC .)
    COMMA           reduce using rule 67 (tipo -> DYNAMIC .)
    RANGLE          reduce using rule 67 (tipo -> DYNAMIC .)


state 38

    (52) valor -> NUMBER .

    PLUS            reduce using rule 52 (valor -> NUMBER .)
    MINUS           reduce using rule 52 (valor -> NUMBER .)
    TIMES           reduce using rule 52 (valor -> NUMBER .)
    DIVIDE          reduce using rule 52 (valor -> NUMBER .)
    COMMA           reduce using rule 52 (valor -> NUMBER .)
    RETURN          reduce using rule 52 (valor -> NUMBER .)
    PRINT           reduce using rule 52 (valor -> NUMBER .)
    VAR             reduce using rule 52 (valor -> NUMBER .)
    COMMENTLINE     reduce using rule 52 (valor -> NUMBER .)
    COMMENTBLOCK    reduce using rule 52 (valor -> NUMBER .)
    MAP             reduce using rule 52 (valor -> NUMBER .)
    DOUBLE          reduce using rule 52 (valor -> NUMBER .)
    STRING          reduce using rule 52 (valor -> NUMBER .)
    INT             reduce using rule 52 (valor -> NUMBER .)
    SET             reduce using rule 52 (valor -> NUMBER .)
    LIST            reduce using rule 52 (valor -> NUMBER .)
    BOOLEAN         reduce using rule 52 (valor -> NUMBER .)
    FINAL           reduce using rule 52 (valor -> NUMBER .)
    CONST           reduce using rule 52 (valor -> NUMBER .)
    DYNAMIC         reduce using rule 52 (valor -> NUMBER .)
    VARIABLE        reduce using rule 52 (valor -> NUMBER .)
    NUMBER          reduce using rule 52 (valor -> NUMBER .)
    FLOAT           reduce using rule 52 (valor -> NUMBER .)
    CHAINCHAR       reduce using rule 52 (valor -> NUMBER .)
    IF              reduce using rule 52 (valor -> NUMBER .)
    SWITCH          reduce using rule 52 (valor -> NUMBER .)
    FOR             reduce using rule 52 (valor -> NUMBER .)
    VOID            reduce using rule 52 (valor -> NUMBER .)
    TRUE            reduce using rule 52 (valor -> NUMBER .)
    FALSE           reduce using rule 52 (valor -> NUMBER .)
    LPAREN          reduce using rule 52 (valor -> NUMBER .)
    $end            reduce using rule 52 (valor -> NUMBER .)
    RBRACE          reduce using rule 52 (valor -> NUMBER .)
    DOTCOMMA        reduce using rule 52 (valor -> NUMBER .)
    BREAK           reduce using rule 52 (valor -> NUMBER .)
    RPAREN          reduce using rule 52 (valor -> NUMBER .)
    EQUALS          reduce using rule 52 (valor -> NUMBER .)
    LANGLE          reduce using rule 52 (valor -> NUMBER .)
    RANGLE          reduce using rule 52 (valor -> NUMBER .)
    NEQ             reduce using rule 52 (valor -> NUMBER .)
    RBRACKET        reduce using rule 52 (valor -> NUMBER .)
    AND             reduce using rule 52 (valor -> NUMBER .)
    OR              reduce using rule 52 (valor -> NUMBER .)
    TWODOTS         reduce using rule 52 (valor -> NUMBER .)


state 39

    (53) valor -> FLOAT .

    PLUS            reduce using rule 53 (valor -> FLOAT .)
    MINUS           reduce using rule 53 (valor -> FLOAT .)
    TIMES           reduce using rule 53 (valor -> FLOAT .)
    DIVIDE          reduce using rule 53 (valor -> FLOAT .)
    COMMA           reduce using rule 53 (valor -> FLOAT .)
    RETURN          reduce using rule 53 (valor -> FLOAT .)
    PRINT           reduce using rule 53 (valor -> FLOAT .)
    VAR             reduce using rule 53 (valor -> FLOAT .)
    COMMENTLINE     reduce using rule 53 (valor -> FLOAT .)
    COMMENTBLOCK    reduce using rule 53 (valor -> FLOAT .)
    MAP             reduce using rule 53 (valor -> FLOAT .)
    DOUBLE          reduce using rule 53 (valor -> FLOAT .)
    STRING          reduce using rule 53 (valor -> FLOAT .)
    INT             reduce using rule 53 (valor -> FLOAT .)
    SET             reduce using rule 53 (valor -> FLOAT .)
    LIST            reduce using rule 53 (valor -> FLOAT .)
    BOOLEAN         reduce using rule 53 (valor -> FLOAT .)
    FINAL           reduce using rule 53 (valor -> FLOAT .)
    CONST           reduce using rule 53 (valor -> FLOAT .)
    DYNAMIC         reduce using rule 53 (valor -> FLOAT .)
    VARIABLE        reduce using rule 53 (valor -> FLOAT .)
    NUMBER          reduce using rule 53 (valor -> FLOAT .)
    FLOAT           reduce using rule 53 (valor -> FLOAT .)
    CHAINCHAR       reduce using rule 53 (valor -> FLOAT .)
    IF              reduce using rule 53 (valor -> FLOAT .)
    SWITCH          reduce using rule 53 (valor -> FLOAT .)
    FOR             reduce using rule 53 (valor -> FLOAT .)
    VOID            reduce using rule 53 (valor -> FLOAT .)
    TRUE            reduce using rule 53 (valor -> FLOAT .)
    FALSE           reduce using rule 53 (valor -> FLOAT .)
    LPAREN          reduce using rule 53 (valor -> FLOAT .)
    $end            reduce using rule 53 (valor -> FLOAT .)
    RBRACE          reduce using rule 53 (valor -> FLOAT .)
    DOTCOMMA        reduce using rule 53 (valor -> FLOAT .)
    BREAK           reduce using rule 53 (valor -> FLOAT .)
    RPAREN          reduce using rule 53 (valor -> FLOAT .)
    EQUALS          reduce using rule 53 (valor -> FLOAT .)
    LANGLE          reduce using rule 53 (valor -> FLOAT .)
    RANGLE          reduce using rule 53 (valor -> FLOAT .)
    NEQ             reduce using rule 53 (valor -> FLOAT .)
    RBRACKET        reduce using rule 53 (valor -> FLOAT .)
    AND             reduce using rule 53 (valor -> FLOAT .)
    OR              reduce using rule 53 (valor -> FLOAT .)
    TWODOTS         reduce using rule 53 (valor -> FLOAT .)


state 40

    (54) valor -> CHAINCHAR .

    PLUS            reduce using rule 54 (valor -> CHAINCHAR .)
    MINUS           reduce using rule 54 (valor -> CHAINCHAR .)
    TIMES           reduce using rule 54 (valor -> CHAINCHAR .)
    DIVIDE          reduce using rule 54 (valor -> CHAINCHAR .)
    COMMA           reduce using rule 54 (valor -> CHAINCHAR .)
    RETURN          reduce using rule 54 (valor -> CHAINCHAR .)
    PRINT           reduce using rule 54 (valor -> CHAINCHAR .)
    VAR             reduce using rule 54 (valor -> CHAINCHAR .)
    COMMENTLINE     reduce using rule 54 (valor -> CHAINCHAR .)
    COMMENTBLOCK    reduce using rule 54 (valor -> CHAINCHAR .)
    MAP             reduce using rule 54 (valor -> CHAINCHAR .)
    DOUBLE          reduce using rule 54 (valor -> CHAINCHAR .)
    STRING          reduce using rule 54 (valor -> CHAINCHAR .)
    INT             reduce using rule 54 (valor -> CHAINCHAR .)
    SET             reduce using rule 54 (valor -> CHAINCHAR .)
    LIST            reduce using rule 54 (valor -> CHAINCHAR .)
    BOOLEAN         reduce using rule 54 (valor -> CHAINCHAR .)
    FINAL           reduce using rule 54 (valor -> CHAINCHAR .)
    CONST           reduce using rule 54 (valor -> CHAINCHAR .)
    DYNAMIC         reduce using rule 54 (valor -> CHAINCHAR .)
    VARIABLE        reduce using rule 54 (valor -> CHAINCHAR .)
    NUMBER          reduce using rule 54 (valor -> CHAINCHAR .)
    FLOAT           reduce using rule 54 (valor -> CHAINCHAR .)
    CHAINCHAR       reduce using rule 54 (valor -> CHAINCHAR .)
    IF              reduce using rule 54 (valor -> CHAINCHAR .)
    SWITCH          reduce using rule 54 (valor -> CHAINCHAR .)
    FOR             reduce using rule 54 (valor -> CHAINCHAR .)
    VOID            reduce using rule 54 (valor -> CHAINCHAR .)
    TRUE            reduce using rule 54 (valor -> CHAINCHAR .)
    FALSE           reduce using rule 54 (valor -> CHAINCHAR .)
    LPAREN          reduce using rule 54 (valor -> CHAINCHAR .)
    $end            reduce using rule 54 (valor -> CHAINCHAR .)
    RBRACE          reduce using rule 54 (valor -> CHAINCHAR .)
    DOTCOMMA        reduce using rule 54 (valor -> CHAINCHAR .)
    BREAK           reduce using rule 54 (valor -> CHAINCHAR .)
    RPAREN          reduce using rule 54 (valor -> CHAINCHAR .)
    EQUALS          reduce using rule 54 (valor -> CHAINCHAR .)
    LANGLE          reduce using rule 54 (valor -> CHAINCHAR .)
    RANGLE          reduce using rule 54 (valor -> CHAINCHAR .)
    NEQ             reduce using rule 54 (valor -> CHAINCHAR .)
    RBRACKET        reduce using rule 54 (valor -> CHAINCHAR .)
    AND             reduce using rule 54 (valor -> CHAINCHAR .)
    OR              reduce using rule 54 (valor -> CHAINCHAR .)
    TWODOTS         reduce using rule 54 (valor -> CHAINCHAR .)


state 41

    (55) valor -> Bool .

    PLUS            reduce using rule 55 (valor -> Bool .)
    MINUS           reduce using rule 55 (valor -> Bool .)
    TIMES           reduce using rule 55 (valor -> Bool .)
    DIVIDE          reduce using rule 55 (valor -> Bool .)
    COMMA           reduce using rule 55 (valor -> Bool .)
    RETURN          reduce using rule 55 (valor -> Bool .)
    PRINT           reduce using rule 55 (valor -> Bool .)
    VAR             reduce using rule 55 (valor -> Bool .)
    COMMENTLINE     reduce using rule 55 (valor -> Bool .)
    COMMENTBLOCK    reduce using rule 55 (valor -> Bool .)
    MAP             reduce using rule 55 (valor -> Bool .)
    DOUBLE          reduce using rule 55 (valor -> Bool .)
    STRING          reduce using rule 55 (valor -> Bool .)
    INT             reduce using rule 55 (valor -> Bool .)
    SET             reduce using rule 55 (valor -> Bool .)
    LIST            reduce using rule 55 (valor -> Bool .)
    BOOLEAN         reduce using rule 55 (valor -> Bool .)
    FINAL           reduce using rule 55 (valor -> Bool .)
    CONST           reduce using rule 55 (valor -> Bool .)
    DYNAMIC         reduce using rule 55 (valor -> Bool .)
    VARIABLE        reduce using rule 55 (valor -> Bool .)
    NUMBER          reduce using rule 55 (valor -> Bool .)
    FLOAT           reduce using rule 55 (valor -> Bool .)
    CHAINCHAR       reduce using rule 55 (valor -> Bool .)
    IF              reduce using rule 55 (valor -> Bool .)
    SWITCH          reduce using rule 55 (valor -> Bool .)
    FOR             reduce using rule 55 (valor -> Bool .)
    VOID            reduce using rule 55 (valor -> Bool .)
    TRUE            reduce using rule 55 (valor -> Bool .)
    FALSE           reduce using rule 55 (valor -> Bool .)
    LPAREN          reduce using rule 55 (valor -> Bool .)
    $end            reduce using rule 55 (valor -> Bool .)
    RBRACE          reduce using rule 55 (valor -> Bool .)
    DOTCOMMA        reduce using rule 55 (valor -> Bool .)
    BREAK           reduce using rule 55 (valor -> Bool .)
    RPAREN          reduce using rule 55 (valor -> Bool .)
    EQUALS          reduce using rule 55 (valor -> Bool .)
    LANGLE          reduce using rule 55 (valor -> Bool .)
    RANGLE          reduce using rule 55 (valor -> Bool .)
    NEQ             reduce using rule 55 (valor -> Bool .)
    RBRACKET        reduce using rule 55 (valor -> Bool .)
    AND             reduce using rule 55 (valor -> Bool .)
    OR              reduce using rule 55 (valor -> Bool .)
    TWODOTS         reduce using rule 55 (valor -> Bool .)


state 42

    (57) valor -> tupla .
    (93) funcion_Anonima -> tupla . LBRACE programa RBRACE DOTCOMMA

    PLUS            reduce using rule 57 (valor -> tupla .)
    MINUS           reduce using rule 57 (valor -> tupla .)
    TIMES           reduce using rule 57 (valor -> tupla .)
    DIVIDE          reduce using rule 57 (valor -> tupla .)
    LBRACE          shift and go to state 74


state 43

    (26) sentencia_If -> IF . LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> IF . LPAREN condicion RPAREN LBRACE cuerpo RBRACE else

    LPAREN          shift and go to state 75


state 44

    (75) sentencia_Switch -> SWITCH . LPAREN valor RPAREN LBRACE caso RBRACE

    LPAREN          shift and go to state 76


state 45

    (87) ciclo_for -> FOR . LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE

    LPAREN          shift and go to state 77


state 46

    (35) funcion_Void -> VOID . VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> VOID . VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> VOID . MAIN LPAREN RPAREN LBRACE programa RBRACE

    VARIABLE        shift and go to state 78
    MAIN            shift and go to state 79


state 47

    (49) Bool -> TRUE .

    PLUS            reduce using rule 49 (Bool -> TRUE .)
    MINUS           reduce using rule 49 (Bool -> TRUE .)
    TIMES           reduce using rule 49 (Bool -> TRUE .)
    DIVIDE          reduce using rule 49 (Bool -> TRUE .)
    COMMA           reduce using rule 49 (Bool -> TRUE .)
    RETURN          reduce using rule 49 (Bool -> TRUE .)
    PRINT           reduce using rule 49 (Bool -> TRUE .)
    VAR             reduce using rule 49 (Bool -> TRUE .)
    COMMENTLINE     reduce using rule 49 (Bool -> TRUE .)
    COMMENTBLOCK    reduce using rule 49 (Bool -> TRUE .)
    MAP             reduce using rule 49 (Bool -> TRUE .)
    DOUBLE          reduce using rule 49 (Bool -> TRUE .)
    STRING          reduce using rule 49 (Bool -> TRUE .)
    INT             reduce using rule 49 (Bool -> TRUE .)
    SET             reduce using rule 49 (Bool -> TRUE .)
    LIST            reduce using rule 49 (Bool -> TRUE .)
    BOOLEAN         reduce using rule 49 (Bool -> TRUE .)
    FINAL           reduce using rule 49 (Bool -> TRUE .)
    CONST           reduce using rule 49 (Bool -> TRUE .)
    DYNAMIC         reduce using rule 49 (Bool -> TRUE .)
    VARIABLE        reduce using rule 49 (Bool -> TRUE .)
    NUMBER          reduce using rule 49 (Bool -> TRUE .)
    FLOAT           reduce using rule 49 (Bool -> TRUE .)
    CHAINCHAR       reduce using rule 49 (Bool -> TRUE .)
    IF              reduce using rule 49 (Bool -> TRUE .)
    SWITCH          reduce using rule 49 (Bool -> TRUE .)
    FOR             reduce using rule 49 (Bool -> TRUE .)
    VOID            reduce using rule 49 (Bool -> TRUE .)
    TRUE            reduce using rule 49 (Bool -> TRUE .)
    FALSE           reduce using rule 49 (Bool -> TRUE .)
    LPAREN          reduce using rule 49 (Bool -> TRUE .)
    $end            reduce using rule 49 (Bool -> TRUE .)
    RBRACE          reduce using rule 49 (Bool -> TRUE .)
    DOTCOMMA        reduce using rule 49 (Bool -> TRUE .)
    BREAK           reduce using rule 49 (Bool -> TRUE .)
    RPAREN          reduce using rule 49 (Bool -> TRUE .)
    EQUALS          reduce using rule 49 (Bool -> TRUE .)
    LANGLE          reduce using rule 49 (Bool -> TRUE .)
    RANGLE          reduce using rule 49 (Bool -> TRUE .)
    NEQ             reduce using rule 49 (Bool -> TRUE .)
    RBRACKET        reduce using rule 49 (Bool -> TRUE .)
    AND             reduce using rule 49 (Bool -> TRUE .)
    OR              reduce using rule 49 (Bool -> TRUE .)
    TWODOTS         reduce using rule 49 (Bool -> TRUE .)


state 48

    (50) Bool -> FALSE .

    PLUS            reduce using rule 50 (Bool -> FALSE .)
    MINUS           reduce using rule 50 (Bool -> FALSE .)
    TIMES           reduce using rule 50 (Bool -> FALSE .)
    DIVIDE          reduce using rule 50 (Bool -> FALSE .)
    COMMA           reduce using rule 50 (Bool -> FALSE .)
    RETURN          reduce using rule 50 (Bool -> FALSE .)
    PRINT           reduce using rule 50 (Bool -> FALSE .)
    VAR             reduce using rule 50 (Bool -> FALSE .)
    COMMENTLINE     reduce using rule 50 (Bool -> FALSE .)
    COMMENTBLOCK    reduce using rule 50 (Bool -> FALSE .)
    MAP             reduce using rule 50 (Bool -> FALSE .)
    DOUBLE          reduce using rule 50 (Bool -> FALSE .)
    STRING          reduce using rule 50 (Bool -> FALSE .)
    INT             reduce using rule 50 (Bool -> FALSE .)
    SET             reduce using rule 50 (Bool -> FALSE .)
    LIST            reduce using rule 50 (Bool -> FALSE .)
    BOOLEAN         reduce using rule 50 (Bool -> FALSE .)
    FINAL           reduce using rule 50 (Bool -> FALSE .)
    CONST           reduce using rule 50 (Bool -> FALSE .)
    DYNAMIC         reduce using rule 50 (Bool -> FALSE .)
    VARIABLE        reduce using rule 50 (Bool -> FALSE .)
    NUMBER          reduce using rule 50 (Bool -> FALSE .)
    FLOAT           reduce using rule 50 (Bool -> FALSE .)
    CHAINCHAR       reduce using rule 50 (Bool -> FALSE .)
    IF              reduce using rule 50 (Bool -> FALSE .)
    SWITCH          reduce using rule 50 (Bool -> FALSE .)
    FOR             reduce using rule 50 (Bool -> FALSE .)
    VOID            reduce using rule 50 (Bool -> FALSE .)
    TRUE            reduce using rule 50 (Bool -> FALSE .)
    FALSE           reduce using rule 50 (Bool -> FALSE .)
    LPAREN          reduce using rule 50 (Bool -> FALSE .)
    $end            reduce using rule 50 (Bool -> FALSE .)
    RBRACE          reduce using rule 50 (Bool -> FALSE .)
    DOTCOMMA        reduce using rule 50 (Bool -> FALSE .)
    BREAK           reduce using rule 50 (Bool -> FALSE .)
    RPAREN          reduce using rule 50 (Bool -> FALSE .)
    EQUALS          reduce using rule 50 (Bool -> FALSE .)
    LANGLE          reduce using rule 50 (Bool -> FALSE .)
    RANGLE          reduce using rule 50 (Bool -> FALSE .)
    NEQ             reduce using rule 50 (Bool -> FALSE .)
    RBRACKET        reduce using rule 50 (Bool -> FALSE .)
    AND             reduce using rule 50 (Bool -> FALSE .)
    OR              reduce using rule 50 (Bool -> FALSE .)
    TWODOTS         reduce using rule 50 (Bool -> FALSE .)


state 49

    (2) programa -> programa cuerpo .

    RETURN          reduce using rule 2 (programa -> programa cuerpo .)
    PRINT           reduce using rule 2 (programa -> programa cuerpo .)
    VAR             reduce using rule 2 (programa -> programa cuerpo .)
    COMMENTLINE     reduce using rule 2 (programa -> programa cuerpo .)
    COMMENTBLOCK    reduce using rule 2 (programa -> programa cuerpo .)
    MAP             reduce using rule 2 (programa -> programa cuerpo .)
    DOUBLE          reduce using rule 2 (programa -> programa cuerpo .)
    STRING          reduce using rule 2 (programa -> programa cuerpo .)
    INT             reduce using rule 2 (programa -> programa cuerpo .)
    SET             reduce using rule 2 (programa -> programa cuerpo .)
    LIST            reduce using rule 2 (programa -> programa cuerpo .)
    BOOLEAN         reduce using rule 2 (programa -> programa cuerpo .)
    FINAL           reduce using rule 2 (programa -> programa cuerpo .)
    CONST           reduce using rule 2 (programa -> programa cuerpo .)
    DYNAMIC         reduce using rule 2 (programa -> programa cuerpo .)
    VARIABLE        reduce using rule 2 (programa -> programa cuerpo .)
    NUMBER          reduce using rule 2 (programa -> programa cuerpo .)
    FLOAT           reduce using rule 2 (programa -> programa cuerpo .)
    CHAINCHAR       reduce using rule 2 (programa -> programa cuerpo .)
    IF              reduce using rule 2 (programa -> programa cuerpo .)
    SWITCH          reduce using rule 2 (programa -> programa cuerpo .)
    FOR             reduce using rule 2 (programa -> programa cuerpo .)
    VOID            reduce using rule 2 (programa -> programa cuerpo .)
    TRUE            reduce using rule 2 (programa -> programa cuerpo .)
    FALSE           reduce using rule 2 (programa -> programa cuerpo .)
    LPAREN          reduce using rule 2 (programa -> programa cuerpo .)
    $end            reduce using rule 2 (programa -> programa cuerpo .)
    RBRACE          reduce using rule 2 (programa -> programa cuerpo .)
    DOTCOMMA        reduce using rule 2 (programa -> programa cuerpo .)
    BREAK           reduce using rule 2 (programa -> programa cuerpo .)


state 50

    (9) cuerpo -> RETURN valores .

    RETURN          reduce using rule 9 (cuerpo -> RETURN valores .)
    PRINT           reduce using rule 9 (cuerpo -> RETURN valores .)
    VAR             reduce using rule 9 (cuerpo -> RETURN valores .)
    COMMENTLINE     reduce using rule 9 (cuerpo -> RETURN valores .)
    COMMENTBLOCK    reduce using rule 9 (cuerpo -> RETURN valores .)
    MAP             reduce using rule 9 (cuerpo -> RETURN valores .)
    DOUBLE          reduce using rule 9 (cuerpo -> RETURN valores .)
    STRING          reduce using rule 9 (cuerpo -> RETURN valores .)
    INT             reduce using rule 9 (cuerpo -> RETURN valores .)
    SET             reduce using rule 9 (cuerpo -> RETURN valores .)
    LIST            reduce using rule 9 (cuerpo -> RETURN valores .)
    BOOLEAN         reduce using rule 9 (cuerpo -> RETURN valores .)
    FINAL           reduce using rule 9 (cuerpo -> RETURN valores .)
    CONST           reduce using rule 9 (cuerpo -> RETURN valores .)
    DYNAMIC         reduce using rule 9 (cuerpo -> RETURN valores .)
    VARIABLE        reduce using rule 9 (cuerpo -> RETURN valores .)
    NUMBER          reduce using rule 9 (cuerpo -> RETURN valores .)
    FLOAT           reduce using rule 9 (cuerpo -> RETURN valores .)
    CHAINCHAR       reduce using rule 9 (cuerpo -> RETURN valores .)
    IF              reduce using rule 9 (cuerpo -> RETURN valores .)
    SWITCH          reduce using rule 9 (cuerpo -> RETURN valores .)
    FOR             reduce using rule 9 (cuerpo -> RETURN valores .)
    VOID            reduce using rule 9 (cuerpo -> RETURN valores .)
    TRUE            reduce using rule 9 (cuerpo -> RETURN valores .)
    FALSE           reduce using rule 9 (cuerpo -> RETURN valores .)
    LPAREN          reduce using rule 9 (cuerpo -> RETURN valores .)
    $end            reduce using rule 9 (cuerpo -> RETURN valores .)
    RBRACE          reduce using rule 9 (cuerpo -> RETURN valores .)
    DOTCOMMA        reduce using rule 9 (cuerpo -> RETURN valores .)
    BREAK           reduce using rule 9 (cuerpo -> RETURN valores .)


state 51

    (45) valores -> valor .
    (46) valores -> valor . COMMA valores
    (70) operacion -> valor . operador expresion
    (83) operador -> . PLUS
    (84) operador -> . MINUS
    (85) operador -> . TIMES
    (86) operador -> . DIVIDE

    RETURN          reduce using rule 45 (valores -> valor .)
    PRINT           reduce using rule 45 (valores -> valor .)
    VAR             reduce using rule 45 (valores -> valor .)
    COMMENTLINE     reduce using rule 45 (valores -> valor .)
    COMMENTBLOCK    reduce using rule 45 (valores -> valor .)
    MAP             reduce using rule 45 (valores -> valor .)
    DOUBLE          reduce using rule 45 (valores -> valor .)
    STRING          reduce using rule 45 (valores -> valor .)
    INT             reduce using rule 45 (valores -> valor .)
    SET             reduce using rule 45 (valores -> valor .)
    LIST            reduce using rule 45 (valores -> valor .)
    BOOLEAN         reduce using rule 45 (valores -> valor .)
    FINAL           reduce using rule 45 (valores -> valor .)
    CONST           reduce using rule 45 (valores -> valor .)
    DYNAMIC         reduce using rule 45 (valores -> valor .)
    VARIABLE        reduce using rule 45 (valores -> valor .)
    NUMBER          reduce using rule 45 (valores -> valor .)
    FLOAT           reduce using rule 45 (valores -> valor .)
    CHAINCHAR       reduce using rule 45 (valores -> valor .)
    IF              reduce using rule 45 (valores -> valor .)
    SWITCH          reduce using rule 45 (valores -> valor .)
    FOR             reduce using rule 45 (valores -> valor .)
    VOID            reduce using rule 45 (valores -> valor .)
    TRUE            reduce using rule 45 (valores -> valor .)
    FALSE           reduce using rule 45 (valores -> valor .)
    LPAREN          reduce using rule 45 (valores -> valor .)
    $end            reduce using rule 45 (valores -> valor .)
    RBRACE          reduce using rule 45 (valores -> valor .)
    DOTCOMMA        reduce using rule 45 (valores -> valor .)
    BREAK           reduce using rule 45 (valores -> valor .)
    RPAREN          reduce using rule 45 (valores -> valor .)
    RBRACKET        reduce using rule 45 (valores -> valor .)
    COMMA           shift and go to state 80
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68

    operador                       shift and go to state 64

state 52

    (47) valores -> tipo . VARIABLE
    (48) valores -> tipo . VARIABLE COMMA valores

    VARIABLE        shift and go to state 81


state 53

    (51) valor -> VARIABLE .

    COMMA           reduce using rule 51 (valor -> VARIABLE .)
    PLUS            reduce using rule 51 (valor -> VARIABLE .)
    MINUS           reduce using rule 51 (valor -> VARIABLE .)
    TIMES           reduce using rule 51 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 51 (valor -> VARIABLE .)
    RETURN          reduce using rule 51 (valor -> VARIABLE .)
    PRINT           reduce using rule 51 (valor -> VARIABLE .)
    VAR             reduce using rule 51 (valor -> VARIABLE .)
    COMMENTLINE     reduce using rule 51 (valor -> VARIABLE .)
    COMMENTBLOCK    reduce using rule 51 (valor -> VARIABLE .)
    MAP             reduce using rule 51 (valor -> VARIABLE .)
    DOUBLE          reduce using rule 51 (valor -> VARIABLE .)
    STRING          reduce using rule 51 (valor -> VARIABLE .)
    INT             reduce using rule 51 (valor -> VARIABLE .)
    SET             reduce using rule 51 (valor -> VARIABLE .)
    LIST            reduce using rule 51 (valor -> VARIABLE .)
    BOOLEAN         reduce using rule 51 (valor -> VARIABLE .)
    FINAL           reduce using rule 51 (valor -> VARIABLE .)
    CONST           reduce using rule 51 (valor -> VARIABLE .)
    DYNAMIC         reduce using rule 51 (valor -> VARIABLE .)
    VARIABLE        reduce using rule 51 (valor -> VARIABLE .)
    NUMBER          reduce using rule 51 (valor -> VARIABLE .)
    FLOAT           reduce using rule 51 (valor -> VARIABLE .)
    CHAINCHAR       reduce using rule 51 (valor -> VARIABLE .)
    IF              reduce using rule 51 (valor -> VARIABLE .)
    SWITCH          reduce using rule 51 (valor -> VARIABLE .)
    FOR             reduce using rule 51 (valor -> VARIABLE .)
    VOID            reduce using rule 51 (valor -> VARIABLE .)
    TRUE            reduce using rule 51 (valor -> VARIABLE .)
    FALSE           reduce using rule 51 (valor -> VARIABLE .)
    LPAREN          reduce using rule 51 (valor -> VARIABLE .)
    $end            reduce using rule 51 (valor -> VARIABLE .)
    RBRACE          reduce using rule 51 (valor -> VARIABLE .)
    DOTCOMMA        reduce using rule 51 (valor -> VARIABLE .)
    BREAK           reduce using rule 51 (valor -> VARIABLE .)
    RPAREN          reduce using rule 51 (valor -> VARIABLE .)
    EQUALS          reduce using rule 51 (valor -> VARIABLE .)
    LANGLE          reduce using rule 51 (valor -> VARIABLE .)
    RANGLE          reduce using rule 51 (valor -> VARIABLE .)
    NEQ             reduce using rule 51 (valor -> VARIABLE .)
    RBRACKET        reduce using rule 51 (valor -> VARIABLE .)
    AND             reduce using rule 51 (valor -> VARIABLE .)
    OR              reduce using rule 51 (valor -> VARIABLE .)
    TWODOTS         reduce using rule 51 (valor -> VARIABLE .)


state 54

    (56) valor -> operacion .

    COMMA           reduce using rule 56 (valor -> operacion .)
    PLUS            reduce using rule 56 (valor -> operacion .)
    MINUS           reduce using rule 56 (valor -> operacion .)
    TIMES           reduce using rule 56 (valor -> operacion .)
    DIVIDE          reduce using rule 56 (valor -> operacion .)
    RETURN          reduce using rule 56 (valor -> operacion .)
    PRINT           reduce using rule 56 (valor -> operacion .)
    VAR             reduce using rule 56 (valor -> operacion .)
    COMMENTLINE     reduce using rule 56 (valor -> operacion .)
    COMMENTBLOCK    reduce using rule 56 (valor -> operacion .)
    MAP             reduce using rule 56 (valor -> operacion .)
    DOUBLE          reduce using rule 56 (valor -> operacion .)
    STRING          reduce using rule 56 (valor -> operacion .)
    INT             reduce using rule 56 (valor -> operacion .)
    SET             reduce using rule 56 (valor -> operacion .)
    LIST            reduce using rule 56 (valor -> operacion .)
    BOOLEAN         reduce using rule 56 (valor -> operacion .)
    FINAL           reduce using rule 56 (valor -> operacion .)
    CONST           reduce using rule 56 (valor -> operacion .)
    DYNAMIC         reduce using rule 56 (valor -> operacion .)
    VARIABLE        reduce using rule 56 (valor -> operacion .)
    NUMBER          reduce using rule 56 (valor -> operacion .)
    FLOAT           reduce using rule 56 (valor -> operacion .)
    CHAINCHAR       reduce using rule 56 (valor -> operacion .)
    IF              reduce using rule 56 (valor -> operacion .)
    SWITCH          reduce using rule 56 (valor -> operacion .)
    FOR             reduce using rule 56 (valor -> operacion .)
    VOID            reduce using rule 56 (valor -> operacion .)
    TRUE            reduce using rule 56 (valor -> operacion .)
    FALSE           reduce using rule 56 (valor -> operacion .)
    LPAREN          reduce using rule 56 (valor -> operacion .)
    $end            reduce using rule 56 (valor -> operacion .)
    RBRACE          reduce using rule 56 (valor -> operacion .)
    DOTCOMMA        reduce using rule 56 (valor -> operacion .)
    BREAK           reduce using rule 56 (valor -> operacion .)
    RPAREN          reduce using rule 56 (valor -> operacion .)
    EQUALS          reduce using rule 56 (valor -> operacion .)
    LANGLE          reduce using rule 56 (valor -> operacion .)
    RANGLE          reduce using rule 56 (valor -> operacion .)
    NEQ             reduce using rule 56 (valor -> operacion .)
    RBRACKET        reduce using rule 56 (valor -> operacion .)
    AND             reduce using rule 56 (valor -> operacion .)
    OR              reduce using rule 56 (valor -> operacion .)
    TWODOTS         reduce using rule 56 (valor -> operacion .)


state 55

    (57) valor -> tupla .

    COMMA           reduce using rule 57 (valor -> tupla .)
    PLUS            reduce using rule 57 (valor -> tupla .)
    MINUS           reduce using rule 57 (valor -> tupla .)
    TIMES           reduce using rule 57 (valor -> tupla .)
    DIVIDE          reduce using rule 57 (valor -> tupla .)
    RETURN          reduce using rule 57 (valor -> tupla .)
    PRINT           reduce using rule 57 (valor -> tupla .)
    VAR             reduce using rule 57 (valor -> tupla .)
    COMMENTLINE     reduce using rule 57 (valor -> tupla .)
    COMMENTBLOCK    reduce using rule 57 (valor -> tupla .)
    MAP             reduce using rule 57 (valor -> tupla .)
    DOUBLE          reduce using rule 57 (valor -> tupla .)
    STRING          reduce using rule 57 (valor -> tupla .)
    INT             reduce using rule 57 (valor -> tupla .)
    SET             reduce using rule 57 (valor -> tupla .)
    LIST            reduce using rule 57 (valor -> tupla .)
    BOOLEAN         reduce using rule 57 (valor -> tupla .)
    FINAL           reduce using rule 57 (valor -> tupla .)
    CONST           reduce using rule 57 (valor -> tupla .)
    DYNAMIC         reduce using rule 57 (valor -> tupla .)
    VARIABLE        reduce using rule 57 (valor -> tupla .)
    NUMBER          reduce using rule 57 (valor -> tupla .)
    FLOAT           reduce using rule 57 (valor -> tupla .)
    CHAINCHAR       reduce using rule 57 (valor -> tupla .)
    IF              reduce using rule 57 (valor -> tupla .)
    SWITCH          reduce using rule 57 (valor -> tupla .)
    FOR             reduce using rule 57 (valor -> tupla .)
    VOID            reduce using rule 57 (valor -> tupla .)
    TRUE            reduce using rule 57 (valor -> tupla .)
    FALSE           reduce using rule 57 (valor -> tupla .)
    LPAREN          reduce using rule 57 (valor -> tupla .)
    $end            reduce using rule 57 (valor -> tupla .)
    RBRACE          reduce using rule 57 (valor -> tupla .)
    DOTCOMMA        reduce using rule 57 (valor -> tupla .)
    BREAK           reduce using rule 57 (valor -> tupla .)
    RPAREN          reduce using rule 57 (valor -> tupla .)
    EQUALS          reduce using rule 57 (valor -> tupla .)
    LANGLE          reduce using rule 57 (valor -> tupla .)
    RANGLE          reduce using rule 57 (valor -> tupla .)
    NEQ             reduce using rule 57 (valor -> tupla .)
    RBRACKET        reduce using rule 57 (valor -> tupla .)
    AND             reduce using rule 57 (valor -> tupla .)
    OR              reduce using rule 57 (valor -> tupla .)
    TWODOTS         reduce using rule 57 (valor -> tupla .)


state 56

    (58) tipo -> MAP .

    VARIABLE        reduce using rule 58 (tipo -> MAP .)
    COMMA           reduce using rule 58 (tipo -> MAP .)
    RANGLE          reduce using rule 58 (tipo -> MAP .)


state 57

    (62) tipo -> SET .

    VARIABLE        reduce using rule 62 (tipo -> SET .)
    COMMA           reduce using rule 62 (tipo -> SET .)
    RANGLE          reduce using rule 62 (tipo -> SET .)


state 58

    (63) tipo -> LIST .

    VARIABLE        reduce using rule 63 (tipo -> LIST .)
    COMMA           reduce using rule 63 (tipo -> LIST .)
    RANGLE          reduce using rule 63 (tipo -> LIST .)


state 59

    (23) impresion -> PRINT LPAREN . valores RPAREN DOTCOMMA
    (24) impresion -> PRINT LPAREN . operacion RPAREN DOTCOMMA
    (25) impresion -> PRINT LPAREN . RPAREN DOTCOMMA
    (45) valores -> . valor
    (46) valores -> . valor COMMA valores
    (47) valores -> . tipo VARIABLE
    (48) valores -> . tipo VARIABLE COMMA valores
    (70) operacion -> . valor operador expresion
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RPAREN          shift and go to state 83
    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    MAP             shift and go to state 56
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 57
    LIST            shift and go to state 58
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    valores                        shift and go to state 82
    operacion                      shift and go to state 84
    valor                          shift and go to state 51
    tipo                           shift and go to state 52
    Bool                           shift and go to state 41
    tupla                          shift and go to state 55

state 60

    (44) tupla -> LPAREN valores . RPAREN

    RPAREN          shift and go to state 85


state 61

    (68) declaracion -> tipo VARIABLE . EQUALS valor DOTCOMMA
    (78) funcion_flecha -> tipo VARIABLE . LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA

    EQUALS          shift and go to state 86
    LPAREN          shift and go to state 87


state 62

    (73) funcion -> VARIABLE LPAREN . valores RPAREN
    (45) valores -> . valor
    (46) valores -> . valor COMMA valores
    (47) valores -> . tipo VARIABLE
    (48) valores -> . tipo VARIABLE COMMA valores
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    MAP             shift and go to state 56
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 57
    LIST            shift and go to state 58
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    valores                        shift and go to state 88
    valor                          shift and go to state 51
    tipo                           shift and go to state 52
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 63

    (74) funcion_Data -> VARIABLE DOT . VARIABLE LPAREN valores RPAREN DOTCOMMA

    VARIABLE        shift and go to state 89


state 64

    (70) operacion -> valor operador . expresion
    (71) expresion -> . LPAREN valor operador expresion RPAREN
    (72) expresion -> . valor
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    LPAREN          shift and go to state 92
    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    valor                          shift and go to state 90
    expresion                      shift and go to state 91
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 65

    (83) operador -> PLUS .

    LPAREN          reduce using rule 83 (operador -> PLUS .)
    VARIABLE        reduce using rule 83 (operador -> PLUS .)
    NUMBER          reduce using rule 83 (operador -> PLUS .)
    FLOAT           reduce using rule 83 (operador -> PLUS .)
    CHAINCHAR       reduce using rule 83 (operador -> PLUS .)
    TRUE            reduce using rule 83 (operador -> PLUS .)
    FALSE           reduce using rule 83 (operador -> PLUS .)


state 66

    (84) operador -> MINUS .

    LPAREN          reduce using rule 84 (operador -> MINUS .)
    VARIABLE        reduce using rule 84 (operador -> MINUS .)
    NUMBER          reduce using rule 84 (operador -> MINUS .)
    FLOAT           reduce using rule 84 (operador -> MINUS .)
    CHAINCHAR       reduce using rule 84 (operador -> MINUS .)
    TRUE            reduce using rule 84 (operador -> MINUS .)
    FALSE           reduce using rule 84 (operador -> MINUS .)


state 67

    (85) operador -> TIMES .

    LPAREN          reduce using rule 85 (operador -> TIMES .)
    VARIABLE        reduce using rule 85 (operador -> TIMES .)
    NUMBER          reduce using rule 85 (operador -> TIMES .)
    FLOAT           reduce using rule 85 (operador -> TIMES .)
    CHAINCHAR       reduce using rule 85 (operador -> TIMES .)
    TRUE            reduce using rule 85 (operador -> TIMES .)
    FALSE           reduce using rule 85 (operador -> TIMES .)


state 68

    (86) operador -> DIVIDE .

    LPAREN          reduce using rule 86 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 86 (operador -> DIVIDE .)
    NUMBER          reduce using rule 86 (operador -> DIVIDE .)
    FLOAT           reduce using rule 86 (operador -> DIVIDE .)
    CHAINCHAR       reduce using rule 86 (operador -> DIVIDE .)
    TRUE            reduce using rule 86 (operador -> DIVIDE .)
    FALSE           reduce using rule 86 (operador -> DIVIDE .)


state 69

    (69) declaracion -> VAR VARIABLE . EQUALS valor DOTCOMMA
    (92) funcion_Anonima -> VAR VARIABLE . EQUALS tupla LBRACE programa RBRACE DOTCOMMA

    EQUALS          shift and go to state 93


state 70

    (94) diccionario -> MAP LANGLE . tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC

    MAP             shift and go to state 56
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 57
    LIST            shift and go to state 58
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37

    tipo                           shift and go to state 94

state 71

    (79) Conjunto -> SET VARIABLE . EQUALS cuerpo_conjunto DOTCOMMA

    EQUALS          shift and go to state 95


state 72

    (80) Conjunto -> SET LANGLE . tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC

    MAP             shift and go to state 56
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 57
    LIST            shift and go to state 58
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37

    tipo                           shift and go to state 96

state 73

    (34) estructura_List -> LIST LANGLE . tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC

    MAP             shift and go to state 56
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 57
    LIST            shift and go to state 58
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37

    tipo                           shift and go to state 97

state 74

    (93) funcion_Anonima -> tupla LBRACE . programa RBRACE DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    tupla                          shift and go to state 42
    programa                       shift and go to state 98
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41

state 75

    (26) sentencia_If -> IF LPAREN . condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> IF LPAREN . condicion RPAREN LBRACE cuerpo RBRACE else
    (29) condicion -> . valor Comparador valor
    (30) condicion -> . condicion conector condicion
    (31) condicion -> . Bool
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    condicion                      shift and go to state 99
    valor                          shift and go to state 100
    Bool                           shift and go to state 101
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 76

    (75) sentencia_Switch -> SWITCH LPAREN . valor RPAREN LBRACE caso RBRACE
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    valor                          shift and go to state 102
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 77

    (87) ciclo_for -> FOR LPAREN . declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC

    VAR             shift and go to state 105
    MAP             shift and go to state 56
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 57
    LIST            shift and go to state 58
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37

    declaracion                    shift and go to state 103
    tipo                           shift and go to state 104

state 78

    (35) funcion_Void -> VOID VARIABLE . LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> VOID VARIABLE . LPAREN RPAREN LBRACE programa RBRACE

    LPAREN          shift and go to state 106


state 79

    (37) funcion_Void -> VOID MAIN . LPAREN RPAREN LBRACE programa RBRACE

    LPAREN          shift and go to state 107


state 80

    (46) valores -> valor COMMA . valores
    (45) valores -> . valor
    (46) valores -> . valor COMMA valores
    (47) valores -> . tipo VARIABLE
    (48) valores -> . tipo VARIABLE COMMA valores
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    MAP             shift and go to state 56
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 57
    LIST            shift and go to state 58
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    valor                          shift and go to state 51
    valores                        shift and go to state 108
    tipo                           shift and go to state 52
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 81

    (47) valores -> tipo VARIABLE .
    (48) valores -> tipo VARIABLE . COMMA valores

    RETURN          reduce using rule 47 (valores -> tipo VARIABLE .)
    PRINT           reduce using rule 47 (valores -> tipo VARIABLE .)
    VAR             reduce using rule 47 (valores -> tipo VARIABLE .)
    COMMENTLINE     reduce using rule 47 (valores -> tipo VARIABLE .)
    COMMENTBLOCK    reduce using rule 47 (valores -> tipo VARIABLE .)
    MAP             reduce using rule 47 (valores -> tipo VARIABLE .)
    DOUBLE          reduce using rule 47 (valores -> tipo VARIABLE .)
    STRING          reduce using rule 47 (valores -> tipo VARIABLE .)
    INT             reduce using rule 47 (valores -> tipo VARIABLE .)
    SET             reduce using rule 47 (valores -> tipo VARIABLE .)
    LIST            reduce using rule 47 (valores -> tipo VARIABLE .)
    BOOLEAN         reduce using rule 47 (valores -> tipo VARIABLE .)
    FINAL           reduce using rule 47 (valores -> tipo VARIABLE .)
    CONST           reduce using rule 47 (valores -> tipo VARIABLE .)
    DYNAMIC         reduce using rule 47 (valores -> tipo VARIABLE .)
    VARIABLE        reduce using rule 47 (valores -> tipo VARIABLE .)
    NUMBER          reduce using rule 47 (valores -> tipo VARIABLE .)
    FLOAT           reduce using rule 47 (valores -> tipo VARIABLE .)
    CHAINCHAR       reduce using rule 47 (valores -> tipo VARIABLE .)
    IF              reduce using rule 47 (valores -> tipo VARIABLE .)
    SWITCH          reduce using rule 47 (valores -> tipo VARIABLE .)
    FOR             reduce using rule 47 (valores -> tipo VARIABLE .)
    VOID            reduce using rule 47 (valores -> tipo VARIABLE .)
    TRUE            reduce using rule 47 (valores -> tipo VARIABLE .)
    FALSE           reduce using rule 47 (valores -> tipo VARIABLE .)
    LPAREN          reduce using rule 47 (valores -> tipo VARIABLE .)
    $end            reduce using rule 47 (valores -> tipo VARIABLE .)
    RBRACE          reduce using rule 47 (valores -> tipo VARIABLE .)
    DOTCOMMA        reduce using rule 47 (valores -> tipo VARIABLE .)
    BREAK           reduce using rule 47 (valores -> tipo VARIABLE .)
    RPAREN          reduce using rule 47 (valores -> tipo VARIABLE .)
    RBRACKET        reduce using rule 47 (valores -> tipo VARIABLE .)
    COMMA           shift and go to state 109


state 82

    (23) impresion -> PRINT LPAREN valores . RPAREN DOTCOMMA

    RPAREN          shift and go to state 110


state 83

    (25) impresion -> PRINT LPAREN RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 111


state 84

    (24) impresion -> PRINT LPAREN operacion . RPAREN DOTCOMMA
    (56) valor -> operacion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 112
    COMMA           reduce using rule 56 (valor -> operacion .)
    PLUS            reduce using rule 56 (valor -> operacion .)
    MINUS           reduce using rule 56 (valor -> operacion .)
    TIMES           reduce using rule 56 (valor -> operacion .)
    DIVIDE          reduce using rule 56 (valor -> operacion .)

  ! RPAREN          [ reduce using rule 56 (valor -> operacion .) ]


state 85

    (44) tupla -> LPAREN valores RPAREN .

    LBRACE          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    PLUS            reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    MINUS           reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    TIMES           reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    DIVIDE          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    COMMA           reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    RETURN          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    PRINT           reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    VAR             reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    COMMENTLINE     reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    COMMENTBLOCK    reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    MAP             reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    DOUBLE          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    STRING          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    INT             reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    SET             reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    LIST            reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    BOOLEAN         reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    FINAL           reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    CONST           reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    DYNAMIC         reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    VARIABLE        reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    NUMBER          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    FLOAT           reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    CHAINCHAR       reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    IF              reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    SWITCH          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    FOR             reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    VOID            reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    TRUE            reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    FALSE           reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    LPAREN          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    $end            reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    RBRACE          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    DOTCOMMA        reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    BREAK           reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    RPAREN          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    EQUALS          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    LANGLE          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    RANGLE          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    NEQ             reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    RBRACKET        reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    AND             reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    OR              reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    TWODOTS         reduce using rule 44 (tupla -> LPAREN valores RPAREN .)


state 86

    (68) declaracion -> tipo VARIABLE EQUALS . valor DOTCOMMA
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    valor                          shift and go to state 113
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 87

    (78) funcion_flecha -> tipo VARIABLE LPAREN . valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (45) valores -> . valor
    (46) valores -> . valor COMMA valores
    (47) valores -> . tipo VARIABLE
    (48) valores -> . tipo VARIABLE COMMA valores
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    MAP             shift and go to state 56
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 57
    LIST            shift and go to state 58
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    tipo                           shift and go to state 52
    valores                        shift and go to state 114
    valor                          shift and go to state 51
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 88

    (73) funcion -> VARIABLE LPAREN valores . RPAREN

    RPAREN          shift and go to state 115


state 89

    (74) funcion_Data -> VARIABLE DOT VARIABLE . LPAREN valores RPAREN DOTCOMMA

    LPAREN          shift and go to state 116


state 90

    (72) expresion -> valor .
    (70) operacion -> valor . operador expresion
    (83) operador -> . PLUS
    (84) operador -> . MINUS
    (85) operador -> . TIMES
    (86) operador -> . DIVIDE

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    RETURN          reduce using rule 72 (expresion -> valor .)
    PRINT           reduce using rule 72 (expresion -> valor .)
    VAR             reduce using rule 72 (expresion -> valor .)
    COMMENTLINE     reduce using rule 72 (expresion -> valor .)
    COMMENTBLOCK    reduce using rule 72 (expresion -> valor .)
    MAP             reduce using rule 72 (expresion -> valor .)
    DOUBLE          reduce using rule 72 (expresion -> valor .)
    STRING          reduce using rule 72 (expresion -> valor .)
    INT             reduce using rule 72 (expresion -> valor .)
    SET             reduce using rule 72 (expresion -> valor .)
    LIST            reduce using rule 72 (expresion -> valor .)
    BOOLEAN         reduce using rule 72 (expresion -> valor .)
    FINAL           reduce using rule 72 (expresion -> valor .)
    CONST           reduce using rule 72 (expresion -> valor .)
    DYNAMIC         reduce using rule 72 (expresion -> valor .)
    VARIABLE        reduce using rule 72 (expresion -> valor .)
    NUMBER          reduce using rule 72 (expresion -> valor .)
    FLOAT           reduce using rule 72 (expresion -> valor .)
    CHAINCHAR       reduce using rule 72 (expresion -> valor .)
    IF              reduce using rule 72 (expresion -> valor .)
    SWITCH          reduce using rule 72 (expresion -> valor .)
    FOR             reduce using rule 72 (expresion -> valor .)
    VOID            reduce using rule 72 (expresion -> valor .)
    TRUE            reduce using rule 72 (expresion -> valor .)
    FALSE           reduce using rule 72 (expresion -> valor .)
    LPAREN          reduce using rule 72 (expresion -> valor .)
    $end            reduce using rule 72 (expresion -> valor .)
    COMMA           reduce using rule 72 (expresion -> valor .)
    RBRACE          reduce using rule 72 (expresion -> valor .)
    DOTCOMMA        reduce using rule 72 (expresion -> valor .)
    BREAK           reduce using rule 72 (expresion -> valor .)
    RPAREN          reduce using rule 72 (expresion -> valor .)
    EQUALS          reduce using rule 72 (expresion -> valor .)
    LANGLE          reduce using rule 72 (expresion -> valor .)
    RANGLE          reduce using rule 72 (expresion -> valor .)
    NEQ             reduce using rule 72 (expresion -> valor .)
    RBRACKET        reduce using rule 72 (expresion -> valor .)
    AND             reduce using rule 72 (expresion -> valor .)
    OR              reduce using rule 72 (expresion -> valor .)
    TWODOTS         reduce using rule 72 (expresion -> valor .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68

  ! PLUS            [ reduce using rule 72 (expresion -> valor .) ]
  ! MINUS           [ reduce using rule 72 (expresion -> valor .) ]
  ! TIMES           [ reduce using rule 72 (expresion -> valor .) ]
  ! DIVIDE          [ reduce using rule 72 (expresion -> valor .) ]

    operador                       shift and go to state 64

state 91

    (70) operacion -> valor operador expresion .

    RETURN          reduce using rule 70 (operacion -> valor operador expresion .)
    PRINT           reduce using rule 70 (operacion -> valor operador expresion .)
    VAR             reduce using rule 70 (operacion -> valor operador expresion .)
    COMMENTLINE     reduce using rule 70 (operacion -> valor operador expresion .)
    COMMENTBLOCK    reduce using rule 70 (operacion -> valor operador expresion .)
    MAP             reduce using rule 70 (operacion -> valor operador expresion .)
    DOUBLE          reduce using rule 70 (operacion -> valor operador expresion .)
    STRING          reduce using rule 70 (operacion -> valor operador expresion .)
    INT             reduce using rule 70 (operacion -> valor operador expresion .)
    SET             reduce using rule 70 (operacion -> valor operador expresion .)
    LIST            reduce using rule 70 (operacion -> valor operador expresion .)
    BOOLEAN         reduce using rule 70 (operacion -> valor operador expresion .)
    FINAL           reduce using rule 70 (operacion -> valor operador expresion .)
    CONST           reduce using rule 70 (operacion -> valor operador expresion .)
    DYNAMIC         reduce using rule 70 (operacion -> valor operador expresion .)
    VARIABLE        reduce using rule 70 (operacion -> valor operador expresion .)
    NUMBER          reduce using rule 70 (operacion -> valor operador expresion .)
    FLOAT           reduce using rule 70 (operacion -> valor operador expresion .)
    CHAINCHAR       reduce using rule 70 (operacion -> valor operador expresion .)
    IF              reduce using rule 70 (operacion -> valor operador expresion .)
    SWITCH          reduce using rule 70 (operacion -> valor operador expresion .)
    FOR             reduce using rule 70 (operacion -> valor operador expresion .)
    VOID            reduce using rule 70 (operacion -> valor operador expresion .)
    TRUE            reduce using rule 70 (operacion -> valor operador expresion .)
    FALSE           reduce using rule 70 (operacion -> valor operador expresion .)
    LPAREN          reduce using rule 70 (operacion -> valor operador expresion .)
    $end            reduce using rule 70 (operacion -> valor operador expresion .)
    PLUS            reduce using rule 70 (operacion -> valor operador expresion .)
    MINUS           reduce using rule 70 (operacion -> valor operador expresion .)
    TIMES           reduce using rule 70 (operacion -> valor operador expresion .)
    DIVIDE          reduce using rule 70 (operacion -> valor operador expresion .)
    COMMA           reduce using rule 70 (operacion -> valor operador expresion .)
    RBRACE          reduce using rule 70 (operacion -> valor operador expresion .)
    DOTCOMMA        reduce using rule 70 (operacion -> valor operador expresion .)
    BREAK           reduce using rule 70 (operacion -> valor operador expresion .)
    RPAREN          reduce using rule 70 (operacion -> valor operador expresion .)
    EQUALS          reduce using rule 70 (operacion -> valor operador expresion .)
    LANGLE          reduce using rule 70 (operacion -> valor operador expresion .)
    RANGLE          reduce using rule 70 (operacion -> valor operador expresion .)
    NEQ             reduce using rule 70 (operacion -> valor operador expresion .)
    RBRACKET        reduce using rule 70 (operacion -> valor operador expresion .)
    AND             reduce using rule 70 (operacion -> valor operador expresion .)
    OR              reduce using rule 70 (operacion -> valor operador expresion .)
    TWODOTS         reduce using rule 70 (operacion -> valor operador expresion .)


state 92

    (71) expresion -> LPAREN . valor operador expresion RPAREN
    (44) tupla -> LPAREN . valores RPAREN
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (45) valores -> . valor
    (46) valores -> . valor COMMA valores
    (47) valores -> . tipo VARIABLE
    (48) valores -> . tipo VARIABLE COMMA valores
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10
    MAP             shift and go to state 56
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 57
    LIST            shift and go to state 58
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37

    valor                          shift and go to state 117
    valores                        shift and go to state 60
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55
    tipo                           shift and go to state 52

state 93

    (69) declaracion -> VAR VARIABLE EQUALS . valor DOTCOMMA
    (92) funcion_Anonima -> VAR VARIABLE EQUALS . tupla LBRACE programa RBRACE DOTCOMMA
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (44) tupla -> . LPAREN valores RPAREN
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    LPAREN          shift and go to state 10
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    valor                          shift and go to state 118
    tupla                          shift and go to state 119
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54

state 94

    (94) diccionario -> MAP LANGLE tipo . COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    COMMA           shift and go to state 120


state 95

    (79) Conjunto -> SET VARIABLE EQUALS . cuerpo_conjunto DOTCOMMA
    (81) cuerpo_conjunto -> . LBRACE valores RBRACE
    (82) cuerpo_conjunto -> . LBRACE RBRACE

    LBRACE          shift and go to state 122

    cuerpo_conjunto                shift and go to state 121

state 96

    (80) Conjunto -> SET LANGLE tipo . RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA

    RANGLE          shift and go to state 123


state 97

    (34) estructura_List -> LIST LANGLE tipo . RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA

    RANGLE          shift and go to state 124


state 98

    (93) funcion_Anonima -> tupla LBRACE programa . RBRACE DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 125
    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    tupla                          shift and go to state 42
    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41

state 99

    (26) sentencia_If -> IF LPAREN condicion . RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> IF LPAREN condicion . RPAREN LBRACE cuerpo RBRACE else
    (30) condicion -> condicion . conector condicion
    (32) conector -> . AND
    (33) conector -> . OR

    RPAREN          shift and go to state 126
    AND             shift and go to state 128
    OR              shift and go to state 129

    conector                       shift and go to state 127

state 100

    (29) condicion -> valor . Comparador valor
    (70) operacion -> valor . operador expresion
    (38) Comparador -> . EQUALS EQUALS
    (39) Comparador -> . LANGLE
    (40) Comparador -> . RANGLE
    (41) Comparador -> . LANGLE EQUALS
    (42) Comparador -> . RANGLE EQUALS
    (43) Comparador -> . NEQ
    (83) operador -> . PLUS
    (84) operador -> . MINUS
    (85) operador -> . TIMES
    (86) operador -> . DIVIDE

    EQUALS          shift and go to state 131
    LANGLE          shift and go to state 132
    RANGLE          shift and go to state 133
    NEQ             shift and go to state 134
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68

    Comparador                     shift and go to state 130
    operador                       shift and go to state 64

state 101

    (31) condicion -> Bool .
    (55) valor -> Bool .

    RPAREN          reduce using rule 31 (condicion -> Bool .)
    AND             reduce using rule 31 (condicion -> Bool .)
    OR              reduce using rule 31 (condicion -> Bool .)
    DOTCOMMA        reduce using rule 31 (condicion -> Bool .)
    EQUALS          reduce using rule 55 (valor -> Bool .)
    LANGLE          reduce using rule 55 (valor -> Bool .)
    RANGLE          reduce using rule 55 (valor -> Bool .)
    NEQ             reduce using rule 55 (valor -> Bool .)
    PLUS            reduce using rule 55 (valor -> Bool .)
    MINUS           reduce using rule 55 (valor -> Bool .)
    TIMES           reduce using rule 55 (valor -> Bool .)
    DIVIDE          reduce using rule 55 (valor -> Bool .)


state 102

    (75) sentencia_Switch -> SWITCH LPAREN valor . RPAREN LBRACE caso RBRACE
    (70) operacion -> valor . operador expresion
    (83) operador -> . PLUS
    (84) operador -> . MINUS
    (85) operador -> . TIMES
    (86) operador -> . DIVIDE

    RPAREN          shift and go to state 135
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68

    operador                       shift and go to state 64

state 103

    (87) ciclo_for -> FOR LPAREN declaracion . condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (29) condicion -> . valor Comparador valor
    (30) condicion -> . condicion conector condicion
    (31) condicion -> . Bool
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    condicion                      shift and go to state 136
    valor                          shift and go to state 100
    Bool                           shift and go to state 101
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 104

    (68) declaracion -> tipo . VARIABLE EQUALS valor DOTCOMMA

    VARIABLE        shift and go to state 137


state 105

    (69) declaracion -> VAR . VARIABLE EQUALS valor DOTCOMMA

    VARIABLE        shift and go to state 138


state 106

    (35) funcion_Void -> VOID VARIABLE LPAREN . valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> VOID VARIABLE LPAREN . RPAREN LBRACE programa RBRACE
    (45) valores -> . valor
    (46) valores -> . valor COMMA valores
    (47) valores -> . tipo VARIABLE
    (48) valores -> . tipo VARIABLE COMMA valores
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    RPAREN          shift and go to state 140
    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    MAP             shift and go to state 56
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 57
    LIST            shift and go to state 58
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    valores                        shift and go to state 139
    valor                          shift and go to state 51
    tipo                           shift and go to state 52
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 107

    (37) funcion_Void -> VOID MAIN LPAREN . RPAREN LBRACE programa RBRACE

    RPAREN          shift and go to state 141


state 108

    (46) valores -> valor COMMA valores .

    RETURN          reduce using rule 46 (valores -> valor COMMA valores .)
    PRINT           reduce using rule 46 (valores -> valor COMMA valores .)
    VAR             reduce using rule 46 (valores -> valor COMMA valores .)
    COMMENTLINE     reduce using rule 46 (valores -> valor COMMA valores .)
    COMMENTBLOCK    reduce using rule 46 (valores -> valor COMMA valores .)
    MAP             reduce using rule 46 (valores -> valor COMMA valores .)
    DOUBLE          reduce using rule 46 (valores -> valor COMMA valores .)
    STRING          reduce using rule 46 (valores -> valor COMMA valores .)
    INT             reduce using rule 46 (valores -> valor COMMA valores .)
    SET             reduce using rule 46 (valores -> valor COMMA valores .)
    LIST            reduce using rule 46 (valores -> valor COMMA valores .)
    BOOLEAN         reduce using rule 46 (valores -> valor COMMA valores .)
    FINAL           reduce using rule 46 (valores -> valor COMMA valores .)
    CONST           reduce using rule 46 (valores -> valor COMMA valores .)
    DYNAMIC         reduce using rule 46 (valores -> valor COMMA valores .)
    VARIABLE        reduce using rule 46 (valores -> valor COMMA valores .)
    NUMBER          reduce using rule 46 (valores -> valor COMMA valores .)
    FLOAT           reduce using rule 46 (valores -> valor COMMA valores .)
    CHAINCHAR       reduce using rule 46 (valores -> valor COMMA valores .)
    IF              reduce using rule 46 (valores -> valor COMMA valores .)
    SWITCH          reduce using rule 46 (valores -> valor COMMA valores .)
    FOR             reduce using rule 46 (valores -> valor COMMA valores .)
    VOID            reduce using rule 46 (valores -> valor COMMA valores .)
    TRUE            reduce using rule 46 (valores -> valor COMMA valores .)
    FALSE           reduce using rule 46 (valores -> valor COMMA valores .)
    LPAREN          reduce using rule 46 (valores -> valor COMMA valores .)
    $end            reduce using rule 46 (valores -> valor COMMA valores .)
    RBRACE          reduce using rule 46 (valores -> valor COMMA valores .)
    DOTCOMMA        reduce using rule 46 (valores -> valor COMMA valores .)
    BREAK           reduce using rule 46 (valores -> valor COMMA valores .)
    RPAREN          reduce using rule 46 (valores -> valor COMMA valores .)
    RBRACKET        reduce using rule 46 (valores -> valor COMMA valores .)


state 109

    (48) valores -> tipo VARIABLE COMMA . valores
    (45) valores -> . valor
    (46) valores -> . valor COMMA valores
    (47) valores -> . tipo VARIABLE
    (48) valores -> . tipo VARIABLE COMMA valores
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    MAP             shift and go to state 56
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 57
    LIST            shift and go to state 58
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    tipo                           shift and go to state 52
    valores                        shift and go to state 142
    valor                          shift and go to state 51
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 110

    (23) impresion -> PRINT LPAREN valores RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 143


state 111

    (25) impresion -> PRINT LPAREN RPAREN DOTCOMMA .

    RETURN          reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    PRINT           reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    VAR             reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    MAP             reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    STRING          reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    INT             reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    SET             reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    LIST            reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    FINAL           reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    CONST           reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    DYNAMIC         reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    IF              reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    FOR             reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    VOID            reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    TRUE            reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    FALSE           reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    $end            reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    BREAK           reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)


state 112

    (24) impresion -> PRINT LPAREN operacion RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 144


state 113

    (68) declaracion -> tipo VARIABLE EQUALS valor . DOTCOMMA
    (70) operacion -> valor . operador expresion
    (83) operador -> . PLUS
    (84) operador -> . MINUS
    (85) operador -> . TIMES
    (86) operador -> . DIVIDE

    DOTCOMMA        shift and go to state 145
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68

    operador                       shift and go to state 64

state 114

    (78) funcion_flecha -> tipo VARIABLE LPAREN valores . RPAREN ARROWFUNCTION programa DOTCOMMA

    RPAREN          shift and go to state 146


state 115

    (73) funcion -> VARIABLE LPAREN valores RPAREN .

    RETURN          reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    PRINT           reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    VAR             reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    COMMENTLINE     reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    COMMENTBLOCK    reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    MAP             reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    DOUBLE          reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    STRING          reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    INT             reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    SET             reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    LIST            reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    BOOLEAN         reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    FINAL           reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    CONST           reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    DYNAMIC         reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    VARIABLE        reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    NUMBER          reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    FLOAT           reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    CHAINCHAR       reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    IF              reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    SWITCH          reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    FOR             reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    VOID            reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    TRUE            reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    FALSE           reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    LPAREN          reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    $end            reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    RBRACE          reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    DOTCOMMA        reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)
    BREAK           reduce using rule 73 (funcion -> VARIABLE LPAREN valores RPAREN .)


state 116

    (74) funcion_Data -> VARIABLE DOT VARIABLE LPAREN . valores RPAREN DOTCOMMA
    (45) valores -> . valor
    (46) valores -> . valor COMMA valores
    (47) valores -> . tipo VARIABLE
    (48) valores -> . tipo VARIABLE COMMA valores
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    MAP             shift and go to state 56
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 57
    LIST            shift and go to state 58
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    valores                        shift and go to state 147
    valor                          shift and go to state 51
    tipo                           shift and go to state 52
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 117

    (71) expresion -> LPAREN valor . operador expresion RPAREN
    (45) valores -> valor .
    (46) valores -> valor . COMMA valores
    (70) operacion -> valor . operador expresion
    (83) operador -> . PLUS
    (84) operador -> . MINUS
    (85) operador -> . TIMES
    (86) operador -> . DIVIDE

    RPAREN          reduce using rule 45 (valores -> valor .)
    COMMA           shift and go to state 80
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68

    operador                       shift and go to state 148

state 118

    (69) declaracion -> VAR VARIABLE EQUALS valor . DOTCOMMA
    (70) operacion -> valor . operador expresion
    (83) operador -> . PLUS
    (84) operador -> . MINUS
    (85) operador -> . TIMES
    (86) operador -> . DIVIDE

    DOTCOMMA        shift and go to state 149
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68

    operador                       shift and go to state 64

state 119

    (92) funcion_Anonima -> VAR VARIABLE EQUALS tupla . LBRACE programa RBRACE DOTCOMMA
    (57) valor -> tupla .

    LBRACE          shift and go to state 150
    DOTCOMMA        reduce using rule 57 (valor -> tupla .)
    PLUS            reduce using rule 57 (valor -> tupla .)
    MINUS           reduce using rule 57 (valor -> tupla .)
    TIMES           reduce using rule 57 (valor -> tupla .)
    DIVIDE          reduce using rule 57 (valor -> tupla .)


state 120

    (94) diccionario -> MAP LANGLE tipo COMMA . tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC

    MAP             shift and go to state 56
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 57
    LIST            shift and go to state 58
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37

    tipo                           shift and go to state 151

state 121

    (79) Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto . DOTCOMMA

    DOTCOMMA        shift and go to state 152


state 122

    (81) cuerpo_conjunto -> LBRACE . valores RBRACE
    (82) cuerpo_conjunto -> LBRACE . RBRACE
    (45) valores -> . valor
    (46) valores -> . valor COMMA valores
    (47) valores -> . tipo VARIABLE
    (48) valores -> . tipo VARIABLE COMMA valores
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 154
    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    MAP             shift and go to state 56
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 57
    LIST            shift and go to state 58
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    valores                        shift and go to state 153
    valor                          shift and go to state 51
    tipo                           shift and go to state 52
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 123

    (80) Conjunto -> SET LANGLE tipo RANGLE . VARIABLE EQUALS cuerpo_conjunto DOTCOMMA

    VARIABLE        shift and go to state 155


state 124

    (34) estructura_List -> LIST LANGLE tipo RANGLE . VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA

    VARIABLE        shift and go to state 156


state 125

    (93) funcion_Anonima -> tupla LBRACE programa RBRACE . DOTCOMMA

    DOTCOMMA        shift and go to state 157


state 126

    (26) sentencia_If -> IF LPAREN condicion RPAREN . LBRACE cuerpo RBRACE
    (27) sentencia_If -> IF LPAREN condicion RPAREN . LBRACE cuerpo RBRACE else

    LBRACE          shift and go to state 158


state 127

    (30) condicion -> condicion conector . condicion
    (29) condicion -> . valor Comparador valor
    (30) condicion -> . condicion conector condicion
    (31) condicion -> . Bool
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    condicion                      shift and go to state 159
    valor                          shift and go to state 100
    Bool                           shift and go to state 101
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 128

    (32) conector -> AND .

    VARIABLE        reduce using rule 32 (conector -> AND .)
    NUMBER          reduce using rule 32 (conector -> AND .)
    FLOAT           reduce using rule 32 (conector -> AND .)
    CHAINCHAR       reduce using rule 32 (conector -> AND .)
    TRUE            reduce using rule 32 (conector -> AND .)
    FALSE           reduce using rule 32 (conector -> AND .)
    LPAREN          reduce using rule 32 (conector -> AND .)


state 129

    (33) conector -> OR .

    VARIABLE        reduce using rule 33 (conector -> OR .)
    NUMBER          reduce using rule 33 (conector -> OR .)
    FLOAT           reduce using rule 33 (conector -> OR .)
    CHAINCHAR       reduce using rule 33 (conector -> OR .)
    TRUE            reduce using rule 33 (conector -> OR .)
    FALSE           reduce using rule 33 (conector -> OR .)
    LPAREN          reduce using rule 33 (conector -> OR .)


state 130

    (29) condicion -> valor Comparador . valor
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    valor                          shift and go to state 160
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 131

    (38) Comparador -> EQUALS . EQUALS

    EQUALS          shift and go to state 161


state 132

    (39) Comparador -> LANGLE .
    (41) Comparador -> LANGLE . EQUALS

    VARIABLE        reduce using rule 39 (Comparador -> LANGLE .)
    NUMBER          reduce using rule 39 (Comparador -> LANGLE .)
    FLOAT           reduce using rule 39 (Comparador -> LANGLE .)
    CHAINCHAR       reduce using rule 39 (Comparador -> LANGLE .)
    TRUE            reduce using rule 39 (Comparador -> LANGLE .)
    FALSE           reduce using rule 39 (Comparador -> LANGLE .)
    LPAREN          reduce using rule 39 (Comparador -> LANGLE .)
    EQUALS          shift and go to state 162


state 133

    (40) Comparador -> RANGLE .
    (42) Comparador -> RANGLE . EQUALS

    VARIABLE        reduce using rule 40 (Comparador -> RANGLE .)
    NUMBER          reduce using rule 40 (Comparador -> RANGLE .)
    FLOAT           reduce using rule 40 (Comparador -> RANGLE .)
    CHAINCHAR       reduce using rule 40 (Comparador -> RANGLE .)
    TRUE            reduce using rule 40 (Comparador -> RANGLE .)
    FALSE           reduce using rule 40 (Comparador -> RANGLE .)
    LPAREN          reduce using rule 40 (Comparador -> RANGLE .)
    EQUALS          shift and go to state 163


state 134

    (43) Comparador -> NEQ .

    VARIABLE        reduce using rule 43 (Comparador -> NEQ .)
    NUMBER          reduce using rule 43 (Comparador -> NEQ .)
    FLOAT           reduce using rule 43 (Comparador -> NEQ .)
    CHAINCHAR       reduce using rule 43 (Comparador -> NEQ .)
    TRUE            reduce using rule 43 (Comparador -> NEQ .)
    FALSE           reduce using rule 43 (Comparador -> NEQ .)
    LPAREN          reduce using rule 43 (Comparador -> NEQ .)


state 135

    (75) sentencia_Switch -> SWITCH LPAREN valor RPAREN . LBRACE caso RBRACE

    LBRACE          shift and go to state 164


state 136

    (87) ciclo_for -> FOR LPAREN declaracion condicion . DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (30) condicion -> condicion . conector condicion
    (32) conector -> . AND
    (33) conector -> . OR

    DOTCOMMA        shift and go to state 165
    AND             shift and go to state 128
    OR              shift and go to state 129

    conector                       shift and go to state 127

state 137

    (68) declaracion -> tipo VARIABLE . EQUALS valor DOTCOMMA

    EQUALS          shift and go to state 86


state 138

    (69) declaracion -> VAR VARIABLE . EQUALS valor DOTCOMMA

    EQUALS          shift and go to state 166


state 139

    (35) funcion_Void -> VOID VARIABLE LPAREN valores . RPAREN LBRACE programa RBRACE

    RPAREN          shift and go to state 167


state 140

    (36) funcion_Void -> VOID VARIABLE LPAREN RPAREN . LBRACE programa RBRACE

    LBRACE          shift and go to state 168


state 141

    (37) funcion_Void -> VOID MAIN LPAREN RPAREN . LBRACE programa RBRACE

    LBRACE          shift and go to state 169


state 142

    (48) valores -> tipo VARIABLE COMMA valores .

    RETURN          reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    PRINT           reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    VAR             reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    COMMENTLINE     reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    COMMENTBLOCK    reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    MAP             reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    DOUBLE          reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    STRING          reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    INT             reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    SET             reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    LIST            reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    BOOLEAN         reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    FINAL           reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    CONST           reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    DYNAMIC         reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    VARIABLE        reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    NUMBER          reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    FLOAT           reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    CHAINCHAR       reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    IF              reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    SWITCH          reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    FOR             reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    VOID            reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    TRUE            reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    FALSE           reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    LPAREN          reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    $end            reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    RBRACE          reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    DOTCOMMA        reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    BREAK           reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    RPAREN          reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)
    RBRACKET        reduce using rule 48 (valores -> tipo VARIABLE COMMA valores .)


state 143

    (23) impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .

    RETURN          reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    PRINT           reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    VAR             reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    MAP             reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    STRING          reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    INT             reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    SET             reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    LIST            reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    FINAL           reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    CONST           reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    DYNAMIC         reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    IF              reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    FOR             reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    VOID            reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    TRUE            reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    FALSE           reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    $end            reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    BREAK           reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)


state 144

    (24) impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .

    RETURN          reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    PRINT           reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    VAR             reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    MAP             reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    STRING          reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    INT             reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    SET             reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    LIST            reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    FINAL           reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    CONST           reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    DYNAMIC         reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    IF              reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    FOR             reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    VOID            reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    TRUE            reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    FALSE           reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    $end            reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    BREAK           reduce using rule 24 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)


state 145

    (68) declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .

    RETURN          reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    PRINT           reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    VAR             reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTLINE     reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    MAP             reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    DOUBLE          reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    STRING          reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    INT             reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    SET             reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    LIST            reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    BOOLEAN         reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    FINAL           reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    CONST           reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    DYNAMIC         reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    VARIABLE        reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    NUMBER          reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    FLOAT           reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    CHAINCHAR       reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    IF              reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    SWITCH          reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    FOR             reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    VOID            reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    TRUE            reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    FALSE           reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    LPAREN          reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    $end            reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    RBRACE          reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    DOTCOMMA        reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    BREAK           reduce using rule 68 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)


state 146

    (78) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN . ARROWFUNCTION programa DOTCOMMA

    ARROWFUNCTION   shift and go to state 170


state 147

    (74) funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores . RPAREN DOTCOMMA

    RPAREN          shift and go to state 171


state 148

    (71) expresion -> LPAREN valor operador . expresion RPAREN
    (70) operacion -> valor operador . expresion
    (71) expresion -> . LPAREN valor operador expresion RPAREN
    (72) expresion -> . valor
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    LPAREN          shift and go to state 92
    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    valor                          shift and go to state 90
    expresion                      shift and go to state 172
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 149

    (69) declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .

    RETURN          reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    PRINT           reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    VAR             reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTLINE     reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    MAP             reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    DOUBLE          reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    STRING          reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    INT             reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    SET             reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    LIST            reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    BOOLEAN         reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    FINAL           reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    CONST           reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    DYNAMIC         reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    VARIABLE        reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    NUMBER          reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    FLOAT           reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    CHAINCHAR       reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    IF              reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    SWITCH          reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    FOR             reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    VOID            reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    TRUE            reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    FALSE           reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    LPAREN          reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    $end            reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    RBRACE          reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    DOTCOMMA        reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    BREAK           reduce using rule 69 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)


state 150

    (92) funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE . programa RBRACE DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    tupla                          shift and go to state 42
    programa                       shift and go to state 173
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41

state 151

    (94) diccionario -> MAP LANGLE tipo COMMA tipo . RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    RANGLE          shift and go to state 174


state 152

    (79) Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .

    RETURN          reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    PRINT           reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VAR             reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTLINE     reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    MAP             reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOUBLE          reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    STRING          reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    INT             reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SET             reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LIST            reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BOOLEAN         reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FINAL           reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    CONST           reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DYNAMIC         reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VARIABLE        reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    NUMBER          reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FLOAT           reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    CHAINCHAR       reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    IF              reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SWITCH          reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FOR             reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VOID            reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    TRUE            reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FALSE           reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LPAREN          reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    $end            reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    RBRACE          reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOTCOMMA        reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BREAK           reduce using rule 79 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)


state 153

    (81) cuerpo_conjunto -> LBRACE valores . RBRACE

    RBRACE          shift and go to state 175


state 154

    (82) cuerpo_conjunto -> LBRACE RBRACE .

    DOTCOMMA        reduce using rule 82 (cuerpo_conjunto -> LBRACE RBRACE .)


state 155

    (80) Conjunto -> SET LANGLE tipo RANGLE VARIABLE . EQUALS cuerpo_conjunto DOTCOMMA

    EQUALS          shift and go to state 176


state 156

    (34) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE . EQUALS LBRACKET valores RBRACKET DOTCOMMA

    EQUALS          shift and go to state 177


state 157

    (93) funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .

    RETURN          reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    PRINT           reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    VAR             reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTLINE     reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    MAP             reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    DOUBLE          reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    STRING          reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    INT             reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    SET             reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    LIST            reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    BOOLEAN         reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    FINAL           reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    CONST           reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    DYNAMIC         reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    VARIABLE        reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    NUMBER          reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    FLOAT           reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    CHAINCHAR       reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    IF              reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    SWITCH          reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    FOR             reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    VOID            reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    TRUE            reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    FALSE           reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    LPAREN          reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    $end            reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    RBRACE          reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    DOTCOMMA        reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    BREAK           reduce using rule 93 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)


state 158

    (26) sentencia_If -> IF LPAREN condicion RPAREN LBRACE . cuerpo RBRACE
    (27) sentencia_If -> IF LPAREN condicion RPAREN LBRACE . cuerpo RBRACE else
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    cuerpo                         shift and go to state 178
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 159

    (30) condicion -> condicion conector condicion .
    (30) condicion -> condicion . conector condicion
    (32) conector -> . AND
    (33) conector -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          reduce using rule 30 (condicion -> condicion conector condicion .)
    DOTCOMMA        reduce using rule 30 (condicion -> condicion conector condicion .)
    AND             shift and go to state 128
    OR              shift and go to state 129

  ! AND             [ reduce using rule 30 (condicion -> condicion conector condicion .) ]
  ! OR              [ reduce using rule 30 (condicion -> condicion conector condicion .) ]

    conector                       shift and go to state 127

state 160

    (29) condicion -> valor Comparador valor .
    (70) operacion -> valor . operador expresion
    (83) operador -> . PLUS
    (84) operador -> . MINUS
    (85) operador -> . TIMES
    (86) operador -> . DIVIDE

    RPAREN          reduce using rule 29 (condicion -> valor Comparador valor .)
    AND             reduce using rule 29 (condicion -> valor Comparador valor .)
    OR              reduce using rule 29 (condicion -> valor Comparador valor .)
    DOTCOMMA        reduce using rule 29 (condicion -> valor Comparador valor .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68

    operador                       shift and go to state 64

state 161

    (38) Comparador -> EQUALS EQUALS .

    VARIABLE        reduce using rule 38 (Comparador -> EQUALS EQUALS .)
    NUMBER          reduce using rule 38 (Comparador -> EQUALS EQUALS .)
    FLOAT           reduce using rule 38 (Comparador -> EQUALS EQUALS .)
    CHAINCHAR       reduce using rule 38 (Comparador -> EQUALS EQUALS .)
    TRUE            reduce using rule 38 (Comparador -> EQUALS EQUALS .)
    FALSE           reduce using rule 38 (Comparador -> EQUALS EQUALS .)
    LPAREN          reduce using rule 38 (Comparador -> EQUALS EQUALS .)


state 162

    (41) Comparador -> LANGLE EQUALS .

    VARIABLE        reduce using rule 41 (Comparador -> LANGLE EQUALS .)
    NUMBER          reduce using rule 41 (Comparador -> LANGLE EQUALS .)
    FLOAT           reduce using rule 41 (Comparador -> LANGLE EQUALS .)
    CHAINCHAR       reduce using rule 41 (Comparador -> LANGLE EQUALS .)
    TRUE            reduce using rule 41 (Comparador -> LANGLE EQUALS .)
    FALSE           reduce using rule 41 (Comparador -> LANGLE EQUALS .)
    LPAREN          reduce using rule 41 (Comparador -> LANGLE EQUALS .)


state 163

    (42) Comparador -> RANGLE EQUALS .

    VARIABLE        reduce using rule 42 (Comparador -> RANGLE EQUALS .)
    NUMBER          reduce using rule 42 (Comparador -> RANGLE EQUALS .)
    FLOAT           reduce using rule 42 (Comparador -> RANGLE EQUALS .)
    CHAINCHAR       reduce using rule 42 (Comparador -> RANGLE EQUALS .)
    TRUE            reduce using rule 42 (Comparador -> RANGLE EQUALS .)
    FALSE           reduce using rule 42 (Comparador -> RANGLE EQUALS .)
    LPAREN          reduce using rule 42 (Comparador -> RANGLE EQUALS .)


state 164

    (75) sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE . caso RBRACE
    (76) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA caso
    (77) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA

    CASE            shift and go to state 180

    caso                           shift and go to state 179

state 165

    (87) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA . contador RPAREN LBRACE programa RBRACE
    (88) contador -> . VARIABLE PLUS PLUS
    (89) contador -> . VARIABLE PLUS EQUALS valor
    (90) contador -> . VARIABLE MINUS MINUS
    (91) contador -> . VARIABLE MINUS EQUALS valor

    VARIABLE        shift and go to state 182

    contador                       shift and go to state 181

state 166

    (69) declaracion -> VAR VARIABLE EQUALS . valor DOTCOMMA
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    valor                          shift and go to state 118
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 167

    (35) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN . LBRACE programa RBRACE

    LBRACE          shift and go to state 183


state 168

    (36) funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    programa                       shift and go to state 184
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 169

    (37) funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    programa                       shift and go to state 185
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 170

    (78) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION . programa DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    tipo                           shift and go to state 11
    programa                       shift and go to state 186
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 171

    (74) funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 187


state 172

    (71) expresion -> LPAREN valor operador expresion . RPAREN
    (70) operacion -> valor operador expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 188
    COMMA           reduce using rule 70 (operacion -> valor operador expresion .)
    PLUS            reduce using rule 70 (operacion -> valor operador expresion .)
    MINUS           reduce using rule 70 (operacion -> valor operador expresion .)
    TIMES           reduce using rule 70 (operacion -> valor operador expresion .)
    DIVIDE          reduce using rule 70 (operacion -> valor operador expresion .)

  ! RPAREN          [ reduce using rule 70 (operacion -> valor operador expresion .) ]


state 173

    (92) funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa . RBRACE DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 189
    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    tupla                          shift and go to state 42
    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41

state 174

    (94) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE . VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    VARIABLE        shift and go to state 190


state 175

    (81) cuerpo_conjunto -> LBRACE valores RBRACE .

    DOTCOMMA        reduce using rule 81 (cuerpo_conjunto -> LBRACE valores RBRACE .)


state 176

    (80) Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS . cuerpo_conjunto DOTCOMMA
    (81) cuerpo_conjunto -> . LBRACE valores RBRACE
    (82) cuerpo_conjunto -> . LBRACE RBRACE

    LBRACE          shift and go to state 122

    cuerpo_conjunto                shift and go to state 191

state 177

    (34) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS . LBRACKET valores RBRACKET DOTCOMMA

    LBRACKET        shift and go to state 192


state 178

    (26) sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo . RBRACE
    (27) sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo . RBRACE else

    RBRACE          shift and go to state 193


state 179

    (75) sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso . RBRACE

    RBRACE          shift and go to state 194


state 180

    (76) caso -> CASE . valor TWODOTS programa BREAK DOTCOMMA caso
    (77) caso -> CASE . valor TWODOTS programa BREAK DOTCOMMA
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    valor                          shift and go to state 195
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 181

    (87) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador . RPAREN LBRACE programa RBRACE

    RPAREN          shift and go to state 196


state 182

    (88) contador -> VARIABLE . PLUS PLUS
    (89) contador -> VARIABLE . PLUS EQUALS valor
    (90) contador -> VARIABLE . MINUS MINUS
    (91) contador -> VARIABLE . MINUS EQUALS valor

    PLUS            shift and go to state 197
    MINUS           shift and go to state 198


state 183

    (35) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    programa                       shift and go to state 199
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 184

    (36) funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 200
    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 185

    (37) funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 201
    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 186

    (78) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa . DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    DOTCOMMA        shift and go to state 202
    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    tipo                           shift and go to state 11
    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 187

    (74) funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .

    RETURN          reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    PRINT           reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    VAR             reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    MAP             reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    STRING          reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    INT             reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    SET             reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    LIST            reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    FINAL           reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    CONST           reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    DYNAMIC         reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    IF              reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    FOR             reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    VOID            reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    TRUE            reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    FALSE           reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    $end            reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    BREAK           reduce using rule 74 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)


state 188

    (71) expresion -> LPAREN valor operador expresion RPAREN .

    RETURN          reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    PRINT           reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    VAR             reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    COMMENTLINE     reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    COMMENTBLOCK    reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    MAP             reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    DOUBLE          reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    STRING          reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    INT             reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    SET             reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    LIST            reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    BOOLEAN         reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    FINAL           reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    CONST           reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    DYNAMIC         reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    VARIABLE        reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    NUMBER          reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    FLOAT           reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    CHAINCHAR       reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    IF              reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    SWITCH          reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    FOR             reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    VOID            reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    TRUE            reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    FALSE           reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    LPAREN          reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    $end            reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    PLUS            reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    MINUS           reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    TIMES           reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    DIVIDE          reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    COMMA           reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    RBRACE          reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    DOTCOMMA        reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    BREAK           reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    RPAREN          reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    EQUALS          reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    LANGLE          reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    RANGLE          reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    NEQ             reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    RBRACKET        reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    AND             reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    OR              reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)
    TWODOTS         reduce using rule 71 (expresion -> LPAREN valor operador expresion RPAREN .)


state 189

    (92) funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE . DOTCOMMA

    DOTCOMMA        shift and go to state 203


state 190

    (94) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE . EQUALS cuerpo_Diccionario DOTCOMMA

    EQUALS          shift and go to state 204


state 191

    (80) Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto . DOTCOMMA

    DOTCOMMA        shift and go to state 205


state 192

    (34) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET . valores RBRACKET DOTCOMMA
    (45) valores -> . valor
    (46) valores -> . valor COMMA valores
    (47) valores -> . tipo VARIABLE
    (48) valores -> . tipo VARIABLE COMMA valores
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    MAP             shift and go to state 56
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 57
    LIST            shift and go to state 58
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    tipo                           shift and go to state 52
    valores                        shift and go to state 206
    valor                          shift and go to state 51
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 193

    (26) sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .
    (27) sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE . else
    (28) else -> . ELSE LBRACE programa RBRACE

    RETURN          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PRINT           reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    VAR             reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    COMMENTLINE     reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    COMMENTBLOCK    reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    MAP             reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DOUBLE          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    STRING          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    INT             reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SET             reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    LIST            reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    BOOLEAN         reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FINAL           reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    CONST           reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DYNAMIC         reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    VARIABLE        reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    NUMBER          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FLOAT           reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    CHAINCHAR       reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IF              reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SWITCH          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FOR             reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    VOID            reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    TRUE            reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FALSE           reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    LPAREN          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    $end            reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DOTCOMMA        reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    BREAK           reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    ELSE            shift and go to state 208

    else                           shift and go to state 207

state 194

    (75) sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .

    RETURN          reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    PRINT           reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    VAR             reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    COMMENTLINE     reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    COMMENTBLOCK    reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    MAP             reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    DOUBLE          reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    STRING          reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    INT             reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    SET             reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    LIST            reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    BOOLEAN         reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    FINAL           reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    CONST           reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    DYNAMIC         reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    VARIABLE        reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    NUMBER          reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    FLOAT           reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    CHAINCHAR       reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    IF              reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    SWITCH          reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    FOR             reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    VOID            reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    TRUE            reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    FALSE           reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    LPAREN          reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    $end            reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    RBRACE          reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    DOTCOMMA        reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    BREAK           reduce using rule 75 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)


state 195

    (76) caso -> CASE valor . TWODOTS programa BREAK DOTCOMMA caso
    (77) caso -> CASE valor . TWODOTS programa BREAK DOTCOMMA
    (70) operacion -> valor . operador expresion
    (83) operador -> . PLUS
    (84) operador -> . MINUS
    (85) operador -> . TIMES
    (86) operador -> . DIVIDE

    TWODOTS         shift and go to state 209
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68

    operador                       shift and go to state 64

state 196

    (87) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN . LBRACE programa RBRACE

    LBRACE          shift and go to state 210


state 197

    (88) contador -> VARIABLE PLUS . PLUS
    (89) contador -> VARIABLE PLUS . EQUALS valor

    PLUS            shift and go to state 211
    EQUALS          shift and go to state 212


state 198

    (90) contador -> VARIABLE MINUS . MINUS
    (91) contador -> VARIABLE MINUS . EQUALS valor

    MINUS           shift and go to state 213
    EQUALS          shift and go to state 214


state 199

    (35) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 215
    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 200

    (36) funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .

    RETURN          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    PRINT           reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    VAR             reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    MAP             reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    STRING          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    INT             reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    SET             reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    LIST            reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    FINAL           reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    CONST           reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    DYNAMIC         reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    NUMBER          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    FLOAT           reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    IF              reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    SWITCH          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    FOR             reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    VOID            reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    TRUE            reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    FALSE           reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    LPAREN          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    $end            reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    RBRACE          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    BREAK           reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)


state 201

    (37) funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .

    RETURN          reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    PRINT           reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    VAR             reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    MAP             reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    STRING          reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    INT             reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    SET             reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    LIST            reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    FINAL           reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    CONST           reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    DYNAMIC         reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    NUMBER          reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    FLOAT           reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    IF              reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    SWITCH          reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    FOR             reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    VOID            reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    TRUE            reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    FALSE           reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    LPAREN          reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    $end            reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    RBRACE          reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    BREAK           reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)


state 202

    (78) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .

    RETURN          reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    PRINT           reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    VAR             reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    COMMENTLINE     reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    MAP             reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    DOUBLE          reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    STRING          reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    INT             reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    SET             reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    LIST            reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    BOOLEAN         reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FINAL           reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    CONST           reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    DYNAMIC         reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    VARIABLE        reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    NUMBER          reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FLOAT           reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    CHAINCHAR       reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    IF              reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    SWITCH          reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FOR             reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    VOID            reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    TRUE            reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FALSE           reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    LPAREN          reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    $end            reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    RBRACE          reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    DOTCOMMA        reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    BREAK           reduce using rule 78 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)


state 203

    (92) funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .

    RETURN          reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    PRINT           reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    VAR             reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTLINE     reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    MAP             reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    DOUBLE          reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    STRING          reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    INT             reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    SET             reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    LIST            reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    BOOLEAN         reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    FINAL           reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    CONST           reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    DYNAMIC         reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    VARIABLE        reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    NUMBER          reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    FLOAT           reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    CHAINCHAR       reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    IF              reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    SWITCH          reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    FOR             reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    VOID            reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    TRUE            reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    FALSE           reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    LPAREN          reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    $end            reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    RBRACE          reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    DOTCOMMA        reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    BREAK           reduce using rule 92 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)


state 204

    (94) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS . cuerpo_Diccionario DOTCOMMA
    (95) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (96) cuerpo_Diccionario -> . LBRACE RBRACE

    LBRACE          shift and go to state 217

    cuerpo_Diccionario             shift and go to state 216

state 205

    (80) Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .

    RETURN          reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    PRINT           reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VAR             reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTLINE     reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    MAP             reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOUBLE          reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    STRING          reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    INT             reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SET             reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LIST            reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BOOLEAN         reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FINAL           reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    CONST           reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DYNAMIC         reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VARIABLE        reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    NUMBER          reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FLOAT           reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    CHAINCHAR       reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    IF              reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SWITCH          reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FOR             reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VOID            reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    TRUE            reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FALSE           reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LPAREN          reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    $end            reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    RBRACE          reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOTCOMMA        reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BREAK           reduce using rule 80 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)


state 206

    (34) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores . RBRACKET DOTCOMMA

    RBRACKET        shift and go to state 218


state 207

    (27) sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .

    RETURN          reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    PRINT           reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    VAR             reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    COMMENTLINE     reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    COMMENTBLOCK    reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    MAP             reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    DOUBLE          reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    STRING          reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    INT             reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    SET             reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    LIST            reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    BOOLEAN         reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    FINAL           reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    CONST           reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    DYNAMIC         reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    VARIABLE        reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    NUMBER          reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    FLOAT           reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    CHAINCHAR       reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    IF              reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    SWITCH          reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    FOR             reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    VOID            reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    TRUE            reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    FALSE           reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    LPAREN          reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    $end            reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    RBRACE          reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    DOTCOMMA        reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)
    BREAK           reduce using rule 27 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else .)


state 208

    (28) else -> ELSE . LBRACE programa RBRACE

    LBRACE          shift and go to state 219


state 209

    (76) caso -> CASE valor TWODOTS . programa BREAK DOTCOMMA caso
    (77) caso -> CASE valor TWODOTS . programa BREAK DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    valor                          shift and go to state 13
    programa                       shift and go to state 220
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 210

    (87) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    declaracion                    shift and go to state 4
    programa                       shift and go to state 221
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 211

    (88) contador -> VARIABLE PLUS PLUS .

    RPAREN          reduce using rule 88 (contador -> VARIABLE PLUS PLUS .)


state 212

    (89) contador -> VARIABLE PLUS EQUALS . valor
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    valor                          shift and go to state 222
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 213

    (90) contador -> VARIABLE MINUS MINUS .

    RPAREN          reduce using rule 90 (contador -> VARIABLE MINUS MINUS .)


state 214

    (91) contador -> VARIABLE MINUS EQUALS . valor
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    valor                          shift and go to state 223
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 215

    (35) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .

    RETURN          reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    PRINT           reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    VAR             reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    MAP             reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    STRING          reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    INT             reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    SET             reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    LIST            reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    FINAL           reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    CONST           reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    DYNAMIC         reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    NUMBER          reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    FLOAT           reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    IF              reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    SWITCH          reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    FOR             reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    VOID            reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    TRUE            reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    FALSE           reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    LPAREN          reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    $end            reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    RBRACE          reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    BREAK           reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)


state 216

    (94) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario . DOTCOMMA

    DOTCOMMA        shift and go to state 224


state 217

    (95) cuerpo_Diccionario -> LBRACE . duplas RBRACE
    (96) cuerpo_Diccionario -> LBRACE . RBRACE
    (97) duplas -> . dupla
    (98) duplas -> . dupla COMMA duplas
    (99) dupla -> . valor TWODOTS valor
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 226
    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    duplas                         shift and go to state 225
    dupla                          shift and go to state 227
    valor                          shift and go to state 228
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 218

    (34) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET . DOTCOMMA

    DOTCOMMA        shift and go to state 229


state 219

    (28) else -> ELSE LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    programa                       shift and go to state 230
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 220

    (76) caso -> CASE valor TWODOTS programa . BREAK DOTCOMMA caso
    (77) caso -> CASE valor TWODOTS programa . BREAK DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    BREAK           shift and go to state 231
    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    valor                          shift and go to state 13
    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 221

    (87) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 232
    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    declaracion                    shift and go to state 4
    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 222

    (89) contador -> VARIABLE PLUS EQUALS valor .
    (70) operacion -> valor . operador expresion
    (83) operador -> . PLUS
    (84) operador -> . MINUS
    (85) operador -> . TIMES
    (86) operador -> . DIVIDE

    RPAREN          reduce using rule 89 (contador -> VARIABLE PLUS EQUALS valor .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68

    operador                       shift and go to state 64

state 223

    (91) contador -> VARIABLE MINUS EQUALS valor .
    (70) operacion -> valor . operador expresion
    (83) operador -> . PLUS
    (84) operador -> . MINUS
    (85) operador -> . TIMES
    (86) operador -> . DIVIDE

    RPAREN          reduce using rule 91 (contador -> VARIABLE MINUS EQUALS valor .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68

    operador                       shift and go to state 64

state 224

    (94) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .

    RETURN          reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    PRINT           reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    VAR             reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    COMMENTLINE     reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    MAP             reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    DOUBLE          reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    STRING          reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    INT             reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    SET             reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    LIST            reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    BOOLEAN         reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    FINAL           reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    CONST           reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    DYNAMIC         reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    VARIABLE        reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    NUMBER          reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    FLOAT           reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    CHAINCHAR       reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    IF              reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    SWITCH          reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    FOR             reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    VOID            reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    TRUE            reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    FALSE           reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    LPAREN          reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    $end            reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    RBRACE          reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    DOTCOMMA        reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    BREAK           reduce using rule 94 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)


state 225

    (95) cuerpo_Diccionario -> LBRACE duplas . RBRACE

    RBRACE          shift and go to state 233


state 226

    (96) cuerpo_Diccionario -> LBRACE RBRACE .

    DOTCOMMA        reduce using rule 96 (cuerpo_Diccionario -> LBRACE RBRACE .)


state 227

    (97) duplas -> dupla .
    (98) duplas -> dupla . COMMA duplas

    RBRACE          reduce using rule 97 (duplas -> dupla .)
    COMMA           shift and go to state 234


state 228

    (99) dupla -> valor . TWODOTS valor
    (70) operacion -> valor . operador expresion
    (83) operador -> . PLUS
    (84) operador -> . MINUS
    (85) operador -> . TIMES
    (86) operador -> . DIVIDE

    TWODOTS         shift and go to state 235
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68

    operador                       shift and go to state 64

state 229

    (34) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .

    RETURN          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    PRINT           reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    VAR             reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    COMMENTLINE     reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    MAP             reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    DOUBLE          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    STRING          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    INT             reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    SET             reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    LIST            reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    BOOLEAN         reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    FINAL           reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    CONST           reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    DYNAMIC         reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    VARIABLE        reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    NUMBER          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    FLOAT           reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    CHAINCHAR       reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    IF              reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    SWITCH          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    FOR             reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    VOID            reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    TRUE            reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    FALSE           reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    LPAREN          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    $end            reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    RBRACE          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    DOTCOMMA        reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    BREAK           reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)


state 230

    (28) else -> ELSE LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN
    (9) cuerpo -> . RETURN valores
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (68) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (69) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (70) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (10) estructuras_de_Control -> . sentencia_If
    (11) estructuras_de_Control -> . sentencia_Switch
    (12) estructuras_de_Control -> . ciclo_for
    (13) estructuras_de_Control -> . funcion_Anonima
    (14) estructuras_de_Control -> . diccionario
    (15) estructuras_de_Control -> . Conjunto
    (16) estructuras_de_Control -> . funcion_flecha
    (17) estructuras_de_Control -> . funcion_Void
    (18) estructuras_de_Control -> . funcion
    (19) estructuras_de_Control -> . funcion_Data
    (20) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . FINAL
    (66) tipo -> . CONST
    (67) tipo -> . DYNAMIC
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (27) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE else
    (75) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (87) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (92) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (93) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (94) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (79) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (80) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (73) funcion -> . VARIABLE LPAREN valores RPAREN
    (74) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 236
    RETURN          shift and go to state 8
    PRINT           shift and go to state 9
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 12
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 11
    valor                          shift and go to state 13
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 231

    (76) caso -> CASE valor TWODOTS programa BREAK . DOTCOMMA caso
    (77) caso -> CASE valor TWODOTS programa BREAK . DOTCOMMA

    DOTCOMMA        shift and go to state 237


state 232

    (87) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .

    RETURN          reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    PRINT           reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    VAR             reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    MAP             reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    STRING          reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    INT             reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    SET             reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    LIST            reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    FINAL           reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    CONST           reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    DYNAMIC         reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    NUMBER          reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    FLOAT           reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    IF              reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    SWITCH          reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    FOR             reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    VOID            reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    TRUE            reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    FALSE           reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    LPAREN          reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    $end            reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    RBRACE          reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    BREAK           reduce using rule 87 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)


state 233

    (95) cuerpo_Diccionario -> LBRACE duplas RBRACE .

    DOTCOMMA        reduce using rule 95 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)


state 234

    (98) duplas -> dupla COMMA . duplas
    (97) duplas -> . dupla
    (98) duplas -> . dupla COMMA duplas
    (99) dupla -> . valor TWODOTS valor
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    dupla                          shift and go to state 227
    duplas                         shift and go to state 238
    valor                          shift and go to state 228
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 235

    (99) dupla -> valor TWODOTS . valor
    (51) valor -> . VARIABLE
    (52) valor -> . NUMBER
    (53) valor -> . FLOAT
    (54) valor -> . CHAINCHAR
    (55) valor -> . Bool
    (56) valor -> . operacion
    (57) valor -> . tupla
    (49) Bool -> . TRUE
    (50) Bool -> . FALSE
    (70) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 10

    valor                          shift and go to state 239
    Bool                           shift and go to state 41
    operacion                      shift and go to state 54
    tupla                          shift and go to state 55

state 236

    (28) else -> ELSE LBRACE programa RBRACE .

    RETURN          reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    PRINT           reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    VAR             reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    MAP             reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    STRING          reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    INT             reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    SET             reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    LIST            reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    FINAL           reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    CONST           reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    DYNAMIC         reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    NUMBER          reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    FLOAT           reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    IF              reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    SWITCH          reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    FOR             reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    VOID            reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    TRUE            reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    FALSE           reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    LPAREN          reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    $end            reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    RBRACE          reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    BREAK           reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)


state 237

    (76) caso -> CASE valor TWODOTS programa BREAK DOTCOMMA . caso
    (77) caso -> CASE valor TWODOTS programa BREAK DOTCOMMA .
    (76) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA caso
    (77) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA

    RBRACE          reduce using rule 77 (caso -> CASE valor TWODOTS programa BREAK DOTCOMMA .)
    CASE            shift and go to state 180

    caso                           shift and go to state 240

state 238

    (98) duplas -> dupla COMMA duplas .

    RBRACE          reduce using rule 98 (duplas -> dupla COMMA duplas .)


state 239

    (99) dupla -> valor TWODOTS valor .
    (70) operacion -> valor . operador expresion
    (83) operador -> . PLUS
    (84) operador -> . MINUS
    (85) operador -> . TIMES
    (86) operador -> . DIVIDE

    COMMA           reduce using rule 99 (dupla -> valor TWODOTS valor .)
    RBRACE          reduce using rule 99 (dupla -> valor TWODOTS valor .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68

    operador                       shift and go to state 64

state 240

    (76) caso -> CASE valor TWODOTS programa BREAK DOTCOMMA caso .

    RBRACE          reduce using rule 76 (caso -> CASE valor TWODOTS programa BREAK DOTCOMMA caso .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 8 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 8 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 8 resolved as shift
WARNING: shift/reduce conflict for CHAINCHAR in state 8 resolved as shift
WARNING: shift/reduce conflict for MAP in state 8 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 8 resolved as shift
WARNING: shift/reduce conflict for STRING in state 8 resolved as shift
WARNING: shift/reduce conflict for INT in state 8 resolved as shift
WARNING: shift/reduce conflict for SET in state 8 resolved as shift
WARNING: shift/reduce conflict for LIST in state 8 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 8 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 8 resolved as shift
WARNING: shift/reduce conflict for CONST in state 8 resolved as shift
WARNING: shift/reduce conflict for DYNAMIC in state 8 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 8 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 8 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 8 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 32 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 90 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 90 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 90 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 90 resolved as shift
WARNING: shift/reduce conflict for AND in state 159 resolved as shift
WARNING: shift/reduce conflict for OR in state 159 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 172 resolved as shift
