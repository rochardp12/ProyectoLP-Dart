Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ADMIRATION
    AS
    CATCH
    CLASS
    DEF
    DEFAULT
    DOLLAR
    ELIF
    ENUM
    EXTENDS
    FINALLY
    IN
    INTEGERDIVISION
    INTERFACE
    IS
    METHOD
    MOD
    MODULE
    NEW
    NULL
    PRIVATE
    PROTECTED
    PUBLIC
    STATIC
    SUPER
    THIS
    TRY
    TYPEDEF
    WHILE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> cuerpo
Rule 2     programa -> programa cuerpo
Rule 3     cuerpo -> impresion
Rule 4     cuerpo -> declaracion
Rule 5     cuerpo -> operacion
Rule 6     cuerpo -> comentario
Rule 7     cuerpo -> estructuras_de_Control
Rule 8     cuerpo -> retorno
Rule 9     retorno -> RETURN
Rule 10    retorno -> RETURN variables
Rule 11    estructuras_de_Control -> sentencia_If
Rule 12    estructuras_de_Control -> sentencia_Switch
Rule 13    estructuras_de_Control -> ciclo_for
Rule 14    estructuras_de_Control -> funcion_Anonima
Rule 15    estructuras_de_Control -> diccionario
Rule 16    estructuras_de_Control -> Conjunto
Rule 17    estructuras_de_Control -> funcion_flecha
Rule 18    estructuras_de_Control -> funcion_Void
Rule 19    estructuras_de_Control -> funcion
Rule 20    estructuras_de_Control -> funcion_Data
Rule 21    estructuras_de_Control -> estructura_List
Rule 22    comentario -> COMMENTLINE
Rule 23    comentario -> COMMENTBLOCK
Rule 24    impresion -> PRINT LPAREN valores RPAREN DOTCOMMA
Rule 25    impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA
Rule 26    impresion -> PRINT LPAREN RPAREN DOTCOMMA
Rule 27    sentencia_If -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
Rule 28    sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else
Rule 29    else -> ELSE LBRACE programa RBRACE
Rule 30    condicion -> valor Comparador valor
Rule 31    condicion -> condicion conector condicion
Rule 32    condicion -> Bool
Rule 33    conector -> AND
Rule 34    conector -> OR
Rule 35    estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
Rule 36    funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
Rule 37    funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
Rule 38    funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
Rule 39    Comparador -> EQUALS EQUALS
Rule 40    Comparador -> LANGLE
Rule 41    Comparador -> RANGLE
Rule 42    Comparador -> LANGLE EQUALS
Rule 43    Comparador -> RANGLE EQUALS
Rule 44    Comparador -> NEQ
Rule 45    tupla -> LPAREN valores RPAREN
Rule 46    valores -> valor
Rule 47    valores -> valor COMMA valores
Rule 48    valores -> tipo VARIABLE
Rule 49    valores -> tipo VARIABLE COMMA valores
Rule 50    Bool -> TRUE
Rule 51    Bool -> FALSE
Rule 52    valor -> VARIABLE
Rule 53    valor -> NUMBER
Rule 54    valor -> FLOAT
Rule 55    valor -> CHAINCHAR
Rule 56    valor -> Bool
Rule 57    valor -> operacion
Rule 58    valor -> tupla
Rule 59    tipo -> MAP
Rule 60    tipo -> DOUBLE
Rule 61    tipo -> STRING
Rule 62    tipo -> INT
Rule 63    tipo -> SET
Rule 64    tipo -> LIST
Rule 65    tipo -> BOOLEAN
Rule 66    tipo -> FINAL
Rule 67    tipo -> CONST
Rule 68    tipo -> DYNAMIC
Rule 69    declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA
Rule 70    declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA
Rule 71    operacion -> valor operador expresion
Rule 72    expresion -> LPAREN valor operador expresion RPAREN
Rule 73    expresion -> valor
Rule 74    funcion -> VARIABLE LPAREN valores RPAREN
Rule 75    funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
Rule 76    sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
Rule 77    caso -> CASE valor TWODOTS programa BREAK DOTCOMMA caso
Rule 78    caso -> CASE valor TWODOTS programa BREAK DOTCOMMA
Rule 79    funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
Rule 80    Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
Rule 81    Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
Rule 82    cuerpo_conjunto -> LBRACE valores RBRACE
Rule 83    cuerpo_conjunto -> LBRACE RBRACE
Rule 84    operador -> PLUS
Rule 85    operador -> MINUS
Rule 86    operador -> TIMES
Rule 87    operador -> DIVIDE
Rule 88    ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
Rule 89    contador -> VARIABLE PLUS PLUS
Rule 90    contador -> VARIABLE PLUS EQUALS valor
Rule 91    contador -> VARIABLE MINUS MINUS
Rule 92    contador -> VARIABLE MINUS EQUALS valor
Rule 93    funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
Rule 94    funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA
Rule 95    diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
Rule 96    cuerpo_Diccionario -> LBRACE duplas RBRACE
Rule 97    cuerpo_Diccionario -> LBRACE RBRACE
Rule 98    duplas -> dupla
Rule 99    duplas -> dupla COMMA duplas
Rule 100   dupla -> valor TWODOTS valor

Terminals, with rules where they appear

ABSTRACT             : 
ADMIRATION           : 
AND                  : 33
ARROWFUNCTION        : 79
AS                   : 
BOOLEAN              : 65
BREAK                : 77 78
CASE                 : 77 78
CATCH                : 
CHAINCHAR            : 55
CLASS                : 
COMMA                : 47 49 95 99
COMMENTBLOCK         : 23
COMMENTLINE          : 22
CONST                : 67
DEF                  : 
DEFAULT              : 
DIVIDE               : 87
DOLLAR               : 
DOT                  : 75
DOTCOMMA             : 24 25 26 35 69 70 75 77 78 79 80 81 88 93 94 95
DOUBLE               : 60
DYNAMIC              : 68
ELIF                 : 
ELSE                 : 29
ENUM                 : 
EQUALS               : 35 39 39 42 43 69 70 80 81 90 92 93 95
EXTENDS              : 
FALSE                : 51
FINAL                : 66
FINALLY              : 
FLOAT                : 54
FOR                  : 88
IF                   : 27 28
IN                   : 
INT                  : 62
INTEGERDIVISION      : 
INTERFACE            : 
IS                   : 
LANGLE               : 35 40 42 81 95
LBRACE               : 27 28 29 36 37 38 76 82 83 88 93 94 96 97
LBRACKET             : 35
LIST                 : 35 64
LPAREN               : 24 25 26 27 28 36 37 38 45 72 74 75 76 79 88
MAIN                 : 38
MAP                  : 59 95
METHOD               : 
MINUS                : 85 91 91 92
MOD                  : 
MODULE               : 
NEQ                  : 44
NEW                  : 
NULL                 : 
NUMBER               : 53
OR                   : 34
PLUS                 : 84 89 89 90
PRINT                : 24 25 26
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
RANGLE               : 35 41 43 81 95
RBRACE               : 27 28 29 36 37 38 76 82 83 88 93 94 96 97
RBRACKET             : 35
RETURN               : 9 10
RPAREN               : 24 25 26 27 28 36 37 38 45 72 74 75 76 79 88
SET                  : 63 80 81
STATIC               : 
STRING               : 61
SUPER                : 
SWITCH               : 76
THIS                 : 
TIMES                : 86
TRUE                 : 50
TRY                  : 
TWODOTS              : 77 78 100
TYPEDEF              : 
VAR                  : 70 93
VARIABLE             : 35 36 37 48 49 52 69 70 74 75 75 79 80 81 89 90 91 92 93 95
VOID                 : 36 37 38
WHILE                : 
error                : 

Nonterminals, with rules where they appear

Bool                 : 32 56
Comparador           : 30
Conjunto             : 16
caso                 : 76 77
ciclo_for            : 13
comentario           : 6
condicion            : 27 28 31 31 88
conector             : 31
contador             : 88
cuerpo               : 1 2 27
cuerpo_Diccionario   : 95
cuerpo_conjunto      : 80 81
declaracion          : 4 88
diccionario          : 15
dupla                : 98 99
duplas               : 96 99
else                 : 28
estructura_List      : 21
estructuras_de_Control : 7
expresion            : 71 72
funcion              : 19
funcion_Anonima      : 14
funcion_Data         : 20
funcion_Void         : 18
funcion_flecha       : 17
impresion            : 3
operacion            : 5 25 57
operador             : 71 72
programa             : 2 28 29 36 37 38 77 78 79 88 93 94 0
retorno              : 8
sentencia_If         : 11
sentencia_Switch     : 12
tipo                 : 35 48 49 69 79 81 95 95
tupla                : 58 93 94
valor                : 30 30 46 47 69 70 71 72 73 76 77 78 90 92 100 100
valores              : 24 35 36 45 47 49 74 75 79 82
variables            : 10

