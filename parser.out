Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ADMIRATION
    AS
    CATCH
    CLASS
    DEF
    DEFAULT
    DOLLAR
    ELIF
    ENUM
    EXTENDS
    FINALLY
    IN
    INTEGERDIVISION
    INTERFACE
    IS
    MAIN
    METHOD
    MOD
    MODULE
    NEW
    NULL
    PRIVATE
    PROTECTED
    PUBLIC
    STATIC
    SUPER
    THIS
    TRY
    TYPEDEF
    WHILE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> cuerpo
Rule 2     programa -> programa cuerpo
Rule 3     cuerpo -> impresion
Rule 4     cuerpo -> declaracion
Rule 5     cuerpo -> operacion
Rule 6     cuerpo -> comentario
Rule 7     cuerpo -> estructuras_de_Control
Rule 8     estructuras_de_Control -> sentencia_If
Rule 9     estructuras_de_Control -> sentencia_Switch
Rule 10    estructuras_de_Control -> ciclo_for
Rule 11    estructuras_de_Control -> funcion_Anonima
Rule 12    estructuras_de_Control -> diccionario
Rule 13    estructuras_de_Control -> Conjunto
Rule 14    estructuras_de_Control -> funcion_flecha
Rule 15    estructuras_de_Control -> funcion_Void
Rule 16    estructuras_de_Control -> funcion
Rule 17    estructuras_de_Control -> funcion_Data
Rule 18    estructuras_de_Control -> RETURN VARIABLE
Rule 19    estructuras_de_Control -> estructura_List
Rule 20    comentario -> COMMENTLINE
Rule 21    comentario -> COMMENTBLOCK
Rule 22    impresion -> PRINT LPAREN valores RPAREN DOTCOMMA
Rule 23    impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA
Rule 24    impresion -> PRINT LPAREN RPAREN DOTCOMMA
Rule 25    sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else
Rule 26    sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE
Rule 27    else -> ELSE LBRACE programa RBRACE
Rule 28    condicion -> valor Comparador valor
Rule 29    condicion -> condicion conector condicion
Rule 30    conector -> AND
Rule 31    conector -> OR
Rule 32    estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
Rule 33    funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
Rule 34    Comparador -> EQUALS EQUALS
Rule 35    Comparador -> LANGLE
Rule 36    Comparador -> RANGLE
Rule 37    Comparador -> LANGLE EQUALS
Rule 38    Comparador -> RANGLE EQUALS
Rule 39    Comparador -> NEQ
Rule 40    tupla -> LPAREN valores RPAREN
Rule 41    valores -> valor
Rule 42    valores -> valor COMMA valores
Rule 43    Bool -> TRUE
Rule 44    Bool -> FALSE
Rule 45    valor -> VARIABLE
Rule 46    valor -> NUMBER
Rule 47    valor -> FLOAT
Rule 48    valor -> CHAINCHAR
Rule 49    valor -> Bool
Rule 50    valor -> tupla
Rule 51    tipo -> MAP
Rule 52    tipo -> DOUBLE
Rule 53    tipo -> STRING
Rule 54    tipo -> INT
Rule 55    tipo -> SET
Rule 56    tipo -> LIST
Rule 57    tipo -> BOOLEAN
Rule 58    tipo -> FINAL
Rule 59    tipo -> CONST
Rule 60    tipo -> DYNAMIC
Rule 61    declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA
Rule 62    declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA
Rule 63    operacion -> valor operador expresion
Rule 64    expresion -> LPAREN valor operador expresion RPAREN
Rule 65    expresion -> valor
Rule 66    funcion -> VARIABLE LPAREN valores RPAREN
Rule 67    funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
Rule 68    sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
Rule 69    caso -> CASE valor TWODOTS programa BREAK DOTCOMMA caso
Rule 70    caso -> CASE valor TWODOTS programa BREAK DOTCOMMA
Rule 71    funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
Rule 72    funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
Rule 73    Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
Rule 74    Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
Rule 75    cuerpo_conjunto -> LBRACE valores RBRACE
Rule 76    cuerpo_conjunto -> LBRACE RBRACE
Rule 77    operador -> PLUS
Rule 78    operador -> MINUS
Rule 79    operador -> TIMES
Rule 80    operador -> DIVIDE
Rule 81    ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
Rule 82    contador -> VARIABLE PLUS PLUS
Rule 83    contador -> VARIABLE PLUS EQUALS valor
Rule 84    contador -> VARIABLE MINUS MINUS
Rule 85    contador -> VARIABLE MINUS EQUALS valor
Rule 86    funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
Rule 87    funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA
Rule 88    diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
Rule 89    cuerpo_Diccionario -> LBRACE duplas RBRACE
Rule 90    cuerpo_Diccionario -> LBRACE RBRACE
Rule 91    duplas -> dupla
Rule 92    duplas -> dupla COMMA duplas
Rule 93    dupla -> valor TWODOTS valor

Terminals, with rules where they appear

ABSTRACT             : 
ADMIRATION           : 
AND                  : 30
ARROWFUNCTION        : 71 72
AS                   : 
BOOLEAN              : 57
BREAK                : 69 70
CASE                 : 69 70
CATCH                : 
CHAINCHAR            : 48
CLASS                : 
COMMA                : 42 88 92
COMMENTBLOCK         : 21
COMMENTLINE          : 20
CONST                : 59
DEF                  : 
DEFAULT              : 
DIVIDE               : 80
DOLLAR               : 
DOT                  : 67
DOTCOMMA             : 22 23 24 32 33 61 62 67 69 70 71 72 73 74 81 86 87 88
DOUBLE               : 52
DYNAMIC              : 60
ELIF                 : 
ELSE                 : 27
ENUM                 : 
EQUALS               : 32 34 34 37 38 61 62 73 74 83 85 86 88
EXTENDS              : 
FALSE                : 44
FINAL                : 58
FINALLY              : 
FLOAT                : 47
FOR                  : 81
IF                   : 25 26
IN                   : 
INT                  : 54
INTEGERDIVISION      : 
INTERFACE            : 
IS                   : 
LANGLE               : 32 35 37 74 88
LBRACE               : 25 26 27 33 68 75 76 81 86 87 89 90
LBRACKET             : 32
LIST                 : 32 56
LPAREN               : 22 23 24 25 26 33 40 64 66 67 68 71 72 81
MAIN                 : 
MAP                  : 51 88
METHOD               : 
MINUS                : 78 84 84 85
MOD                  : 
MODULE               : 
NEQ                  : 39
NEW                  : 
NULL                 : 
NUMBER               : 46
OR                   : 31
PLUS                 : 77 82 82 83
PRINT                : 22 23 24
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
RANGLE               : 32 36 38 74 88
RBRACE               : 25 26 27 33 68 75 76 81 86 87 89 90
RBRACKET             : 32
RETURN               : 18
RPAREN               : 22 23 24 25 26 33 40 64 66 67 68 71 72 81
SET                  : 55 73 74
STATIC               : 
STRING               : 53
SUPER                : 
SWITCH               : 68
THIS                 : 
TIMES                : 79
TRUE                 : 43
TRY                  : 
TWODOTS              : 69 70 93
TYPEDEF              : 
VAR                  : 62 86
VARIABLE             : 18 32 33 45 61 62 66 67 67 71 72 73 74 82 83 84 85 86 88
VOID                 : 33
WHILE                : 
error                : 

Nonterminals, with rules where they appear

Bool                 : 49
Comparador           : 28
Conjunto             : 13
caso                 : 68 69
ciclo_for            : 10
comentario           : 6
condicion            : 25 26 29 29 81
conector             : 29
contador             : 81
cuerpo               : 1 2
cuerpo_Diccionario   : 88
cuerpo_conjunto      : 73 74
declaracion          : 4 81
diccionario          : 12
dupla                : 91 92
duplas               : 89 92
else                 : 25
estructura_List      : 19
estructuras_de_Control : 7
expresion            : 63 64
funcion              : 16
funcion_Anonima      : 11
funcion_Data         : 17
funcion_Void         : 15
funcion_flecha       : 14
impresion            : 3
operacion            : 5 23
operador             : 63 64
programa             : 2 25 26 27 33 69 70 71 72 81 86 87 0
sentencia_If         : 8
sentencia_Switch     : 9
tipo                 : 32 61 71 72 74 88 88
tupla                : 50 86 87
valor                : 28 28 41 42 61 62 63 64 65 68 69 70 83 85 93 93
valores              : 22 32 33 40 42 66 67 71 75

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    programa                       shift and go to state 1
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 10
    valor                          shift and go to state 12
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 1

    (0) S' -> programa .
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 10
    valor                          shift and go to state 12
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 2

    (1) programa -> cuerpo .

    PRINT           reduce using rule 1 (programa -> cuerpo .)
    VAR             reduce using rule 1 (programa -> cuerpo .)
    COMMENTLINE     reduce using rule 1 (programa -> cuerpo .)
    COMMENTBLOCK    reduce using rule 1 (programa -> cuerpo .)
    RETURN          reduce using rule 1 (programa -> cuerpo .)
    MAP             reduce using rule 1 (programa -> cuerpo .)
    DOUBLE          reduce using rule 1 (programa -> cuerpo .)
    STRING          reduce using rule 1 (programa -> cuerpo .)
    INT             reduce using rule 1 (programa -> cuerpo .)
    SET             reduce using rule 1 (programa -> cuerpo .)
    LIST            reduce using rule 1 (programa -> cuerpo .)
    BOOLEAN         reduce using rule 1 (programa -> cuerpo .)
    FINAL           reduce using rule 1 (programa -> cuerpo .)
    CONST           reduce using rule 1 (programa -> cuerpo .)
    DYNAMIC         reduce using rule 1 (programa -> cuerpo .)
    VARIABLE        reduce using rule 1 (programa -> cuerpo .)
    NUMBER          reduce using rule 1 (programa -> cuerpo .)
    FLOAT           reduce using rule 1 (programa -> cuerpo .)
    CHAINCHAR       reduce using rule 1 (programa -> cuerpo .)
    IF              reduce using rule 1 (programa -> cuerpo .)
    SWITCH          reduce using rule 1 (programa -> cuerpo .)
    FOR             reduce using rule 1 (programa -> cuerpo .)
    VOID            reduce using rule 1 (programa -> cuerpo .)
    TRUE            reduce using rule 1 (programa -> cuerpo .)
    FALSE           reduce using rule 1 (programa -> cuerpo .)
    LPAREN          reduce using rule 1 (programa -> cuerpo .)
    $end            reduce using rule 1 (programa -> cuerpo .)
    RBRACE          reduce using rule 1 (programa -> cuerpo .)
    DOTCOMMA        reduce using rule 1 (programa -> cuerpo .)
    BREAK           reduce using rule 1 (programa -> cuerpo .)


state 3

    (3) cuerpo -> impresion .

    PRINT           reduce using rule 3 (cuerpo -> impresion .)
    VAR             reduce using rule 3 (cuerpo -> impresion .)
    COMMENTLINE     reduce using rule 3 (cuerpo -> impresion .)
    COMMENTBLOCK    reduce using rule 3 (cuerpo -> impresion .)
    RETURN          reduce using rule 3 (cuerpo -> impresion .)
    MAP             reduce using rule 3 (cuerpo -> impresion .)
    DOUBLE          reduce using rule 3 (cuerpo -> impresion .)
    STRING          reduce using rule 3 (cuerpo -> impresion .)
    INT             reduce using rule 3 (cuerpo -> impresion .)
    SET             reduce using rule 3 (cuerpo -> impresion .)
    LIST            reduce using rule 3 (cuerpo -> impresion .)
    BOOLEAN         reduce using rule 3 (cuerpo -> impresion .)
    FINAL           reduce using rule 3 (cuerpo -> impresion .)
    CONST           reduce using rule 3 (cuerpo -> impresion .)
    DYNAMIC         reduce using rule 3 (cuerpo -> impresion .)
    VARIABLE        reduce using rule 3 (cuerpo -> impresion .)
    NUMBER          reduce using rule 3 (cuerpo -> impresion .)
    FLOAT           reduce using rule 3 (cuerpo -> impresion .)
    CHAINCHAR       reduce using rule 3 (cuerpo -> impresion .)
    IF              reduce using rule 3 (cuerpo -> impresion .)
    SWITCH          reduce using rule 3 (cuerpo -> impresion .)
    FOR             reduce using rule 3 (cuerpo -> impresion .)
    VOID            reduce using rule 3 (cuerpo -> impresion .)
    TRUE            reduce using rule 3 (cuerpo -> impresion .)
    FALSE           reduce using rule 3 (cuerpo -> impresion .)
    LPAREN          reduce using rule 3 (cuerpo -> impresion .)
    $end            reduce using rule 3 (cuerpo -> impresion .)
    RBRACE          reduce using rule 3 (cuerpo -> impresion .)
    DOTCOMMA        reduce using rule 3 (cuerpo -> impresion .)
    BREAK           reduce using rule 3 (cuerpo -> impresion .)


state 4

    (4) cuerpo -> declaracion .

    PRINT           reduce using rule 4 (cuerpo -> declaracion .)
    VAR             reduce using rule 4 (cuerpo -> declaracion .)
    COMMENTLINE     reduce using rule 4 (cuerpo -> declaracion .)
    COMMENTBLOCK    reduce using rule 4 (cuerpo -> declaracion .)
    RETURN          reduce using rule 4 (cuerpo -> declaracion .)
    MAP             reduce using rule 4 (cuerpo -> declaracion .)
    DOUBLE          reduce using rule 4 (cuerpo -> declaracion .)
    STRING          reduce using rule 4 (cuerpo -> declaracion .)
    INT             reduce using rule 4 (cuerpo -> declaracion .)
    SET             reduce using rule 4 (cuerpo -> declaracion .)
    LIST            reduce using rule 4 (cuerpo -> declaracion .)
    BOOLEAN         reduce using rule 4 (cuerpo -> declaracion .)
    FINAL           reduce using rule 4 (cuerpo -> declaracion .)
    CONST           reduce using rule 4 (cuerpo -> declaracion .)
    DYNAMIC         reduce using rule 4 (cuerpo -> declaracion .)
    VARIABLE        reduce using rule 4 (cuerpo -> declaracion .)
    NUMBER          reduce using rule 4 (cuerpo -> declaracion .)
    FLOAT           reduce using rule 4 (cuerpo -> declaracion .)
    CHAINCHAR       reduce using rule 4 (cuerpo -> declaracion .)
    IF              reduce using rule 4 (cuerpo -> declaracion .)
    SWITCH          reduce using rule 4 (cuerpo -> declaracion .)
    FOR             reduce using rule 4 (cuerpo -> declaracion .)
    VOID            reduce using rule 4 (cuerpo -> declaracion .)
    TRUE            reduce using rule 4 (cuerpo -> declaracion .)
    FALSE           reduce using rule 4 (cuerpo -> declaracion .)
    LPAREN          reduce using rule 4 (cuerpo -> declaracion .)
    $end            reduce using rule 4 (cuerpo -> declaracion .)
    RBRACE          reduce using rule 4 (cuerpo -> declaracion .)
    DOTCOMMA        reduce using rule 4 (cuerpo -> declaracion .)
    BREAK           reduce using rule 4 (cuerpo -> declaracion .)


state 5

    (5) cuerpo -> operacion .

    PRINT           reduce using rule 5 (cuerpo -> operacion .)
    VAR             reduce using rule 5 (cuerpo -> operacion .)
    COMMENTLINE     reduce using rule 5 (cuerpo -> operacion .)
    COMMENTBLOCK    reduce using rule 5 (cuerpo -> operacion .)
    RETURN          reduce using rule 5 (cuerpo -> operacion .)
    MAP             reduce using rule 5 (cuerpo -> operacion .)
    DOUBLE          reduce using rule 5 (cuerpo -> operacion .)
    STRING          reduce using rule 5 (cuerpo -> operacion .)
    INT             reduce using rule 5 (cuerpo -> operacion .)
    SET             reduce using rule 5 (cuerpo -> operacion .)
    LIST            reduce using rule 5 (cuerpo -> operacion .)
    BOOLEAN         reduce using rule 5 (cuerpo -> operacion .)
    FINAL           reduce using rule 5 (cuerpo -> operacion .)
    CONST           reduce using rule 5 (cuerpo -> operacion .)
    DYNAMIC         reduce using rule 5 (cuerpo -> operacion .)
    VARIABLE        reduce using rule 5 (cuerpo -> operacion .)
    NUMBER          reduce using rule 5 (cuerpo -> operacion .)
    FLOAT           reduce using rule 5 (cuerpo -> operacion .)
    CHAINCHAR       reduce using rule 5 (cuerpo -> operacion .)
    IF              reduce using rule 5 (cuerpo -> operacion .)
    SWITCH          reduce using rule 5 (cuerpo -> operacion .)
    FOR             reduce using rule 5 (cuerpo -> operacion .)
    VOID            reduce using rule 5 (cuerpo -> operacion .)
    TRUE            reduce using rule 5 (cuerpo -> operacion .)
    FALSE           reduce using rule 5 (cuerpo -> operacion .)
    LPAREN          reduce using rule 5 (cuerpo -> operacion .)
    $end            reduce using rule 5 (cuerpo -> operacion .)
    RBRACE          reduce using rule 5 (cuerpo -> operacion .)
    DOTCOMMA        reduce using rule 5 (cuerpo -> operacion .)
    BREAK           reduce using rule 5 (cuerpo -> operacion .)


state 6

    (6) cuerpo -> comentario .

    PRINT           reduce using rule 6 (cuerpo -> comentario .)
    VAR             reduce using rule 6 (cuerpo -> comentario .)
    COMMENTLINE     reduce using rule 6 (cuerpo -> comentario .)
    COMMENTBLOCK    reduce using rule 6 (cuerpo -> comentario .)
    RETURN          reduce using rule 6 (cuerpo -> comentario .)
    MAP             reduce using rule 6 (cuerpo -> comentario .)
    DOUBLE          reduce using rule 6 (cuerpo -> comentario .)
    STRING          reduce using rule 6 (cuerpo -> comentario .)
    INT             reduce using rule 6 (cuerpo -> comentario .)
    SET             reduce using rule 6 (cuerpo -> comentario .)
    LIST            reduce using rule 6 (cuerpo -> comentario .)
    BOOLEAN         reduce using rule 6 (cuerpo -> comentario .)
    FINAL           reduce using rule 6 (cuerpo -> comentario .)
    CONST           reduce using rule 6 (cuerpo -> comentario .)
    DYNAMIC         reduce using rule 6 (cuerpo -> comentario .)
    VARIABLE        reduce using rule 6 (cuerpo -> comentario .)
    NUMBER          reduce using rule 6 (cuerpo -> comentario .)
    FLOAT           reduce using rule 6 (cuerpo -> comentario .)
    CHAINCHAR       reduce using rule 6 (cuerpo -> comentario .)
    IF              reduce using rule 6 (cuerpo -> comentario .)
    SWITCH          reduce using rule 6 (cuerpo -> comentario .)
    FOR             reduce using rule 6 (cuerpo -> comentario .)
    VOID            reduce using rule 6 (cuerpo -> comentario .)
    TRUE            reduce using rule 6 (cuerpo -> comentario .)
    FALSE           reduce using rule 6 (cuerpo -> comentario .)
    LPAREN          reduce using rule 6 (cuerpo -> comentario .)
    $end            reduce using rule 6 (cuerpo -> comentario .)
    RBRACE          reduce using rule 6 (cuerpo -> comentario .)
    DOTCOMMA        reduce using rule 6 (cuerpo -> comentario .)
    BREAK           reduce using rule 6 (cuerpo -> comentario .)


state 7

    (7) cuerpo -> estructuras_de_Control .

    PRINT           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    VAR             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    COMMENTLINE     reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    COMMENTBLOCK    reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    RETURN          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    MAP             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    DOUBLE          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    STRING          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    INT             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    SET             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    LIST            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    BOOLEAN         reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    FINAL           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    CONST           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    DYNAMIC         reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    VARIABLE        reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    NUMBER          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    FLOAT           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    CHAINCHAR       reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    IF              reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    SWITCH          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    FOR             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    VOID            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    TRUE            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    FALSE           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    LPAREN          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    $end            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    RBRACE          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    DOTCOMMA        reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    BREAK           reduce using rule 7 (cuerpo -> estructuras_de_Control .)


state 8

    (22) impresion -> PRINT . LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> PRINT . LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> PRINT . LPAREN RPAREN DOTCOMMA

    LPAREN          shift and go to state 50


state 9

    (40) tupla -> LPAREN . valores RPAREN
    (41) valores -> . valor
    (42) valores -> . valor COMMA valores
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valores                        shift and go to state 51
    valor                          shift and go to state 52
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 10

    (61) declaracion -> tipo . VARIABLE EQUALS valor DOTCOMMA
    (71) funcion_flecha -> tipo . VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> tipo . VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA

    VARIABLE        shift and go to state 55


state 11

    (45) valor -> VARIABLE .
    (66) funcion -> VARIABLE . LPAREN valores RPAREN
    (67) funcion_Data -> VARIABLE . DOT VARIABLE LPAREN valores RPAREN DOTCOMMA

    PLUS            reduce using rule 45 (valor -> VARIABLE .)
    MINUS           reduce using rule 45 (valor -> VARIABLE .)
    TIMES           reduce using rule 45 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 45 (valor -> VARIABLE .)
    LPAREN          shift and go to state 56
    DOT             shift and go to state 57


state 12

    (63) operacion -> valor . operador expresion
    (77) operador -> . PLUS
    (78) operador -> . MINUS
    (79) operador -> . TIMES
    (80) operador -> . DIVIDE

    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62

    operador                       shift and go to state 58

state 13

    (62) declaracion -> VAR . VARIABLE EQUALS valor DOTCOMMA
    (86) funcion_Anonima -> VAR . VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA

    VARIABLE        shift and go to state 63


state 14

    (20) comentario -> COMMENTLINE .

    PRINT           reduce using rule 20 (comentario -> COMMENTLINE .)
    VAR             reduce using rule 20 (comentario -> COMMENTLINE .)
    COMMENTLINE     reduce using rule 20 (comentario -> COMMENTLINE .)
    COMMENTBLOCK    reduce using rule 20 (comentario -> COMMENTLINE .)
    RETURN          reduce using rule 20 (comentario -> COMMENTLINE .)
    MAP             reduce using rule 20 (comentario -> COMMENTLINE .)
    DOUBLE          reduce using rule 20 (comentario -> COMMENTLINE .)
    STRING          reduce using rule 20 (comentario -> COMMENTLINE .)
    INT             reduce using rule 20 (comentario -> COMMENTLINE .)
    SET             reduce using rule 20 (comentario -> COMMENTLINE .)
    LIST            reduce using rule 20 (comentario -> COMMENTLINE .)
    BOOLEAN         reduce using rule 20 (comentario -> COMMENTLINE .)
    FINAL           reduce using rule 20 (comentario -> COMMENTLINE .)
    CONST           reduce using rule 20 (comentario -> COMMENTLINE .)
    DYNAMIC         reduce using rule 20 (comentario -> COMMENTLINE .)
    VARIABLE        reduce using rule 20 (comentario -> COMMENTLINE .)
    NUMBER          reduce using rule 20 (comentario -> COMMENTLINE .)
    FLOAT           reduce using rule 20 (comentario -> COMMENTLINE .)
    CHAINCHAR       reduce using rule 20 (comentario -> COMMENTLINE .)
    IF              reduce using rule 20 (comentario -> COMMENTLINE .)
    SWITCH          reduce using rule 20 (comentario -> COMMENTLINE .)
    FOR             reduce using rule 20 (comentario -> COMMENTLINE .)
    VOID            reduce using rule 20 (comentario -> COMMENTLINE .)
    TRUE            reduce using rule 20 (comentario -> COMMENTLINE .)
    FALSE           reduce using rule 20 (comentario -> COMMENTLINE .)
    LPAREN          reduce using rule 20 (comentario -> COMMENTLINE .)
    $end            reduce using rule 20 (comentario -> COMMENTLINE .)
    RBRACE          reduce using rule 20 (comentario -> COMMENTLINE .)
    DOTCOMMA        reduce using rule 20 (comentario -> COMMENTLINE .)
    BREAK           reduce using rule 20 (comentario -> COMMENTLINE .)


state 15

    (21) comentario -> COMMENTBLOCK .

    PRINT           reduce using rule 21 (comentario -> COMMENTBLOCK .)
    VAR             reduce using rule 21 (comentario -> COMMENTBLOCK .)
    COMMENTLINE     reduce using rule 21 (comentario -> COMMENTBLOCK .)
    COMMENTBLOCK    reduce using rule 21 (comentario -> COMMENTBLOCK .)
    RETURN          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    MAP             reduce using rule 21 (comentario -> COMMENTBLOCK .)
    DOUBLE          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    STRING          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    INT             reduce using rule 21 (comentario -> COMMENTBLOCK .)
    SET             reduce using rule 21 (comentario -> COMMENTBLOCK .)
    LIST            reduce using rule 21 (comentario -> COMMENTBLOCK .)
    BOOLEAN         reduce using rule 21 (comentario -> COMMENTBLOCK .)
    FINAL           reduce using rule 21 (comentario -> COMMENTBLOCK .)
    CONST           reduce using rule 21 (comentario -> COMMENTBLOCK .)
    DYNAMIC         reduce using rule 21 (comentario -> COMMENTBLOCK .)
    VARIABLE        reduce using rule 21 (comentario -> COMMENTBLOCK .)
    NUMBER          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    FLOAT           reduce using rule 21 (comentario -> COMMENTBLOCK .)
    CHAINCHAR       reduce using rule 21 (comentario -> COMMENTBLOCK .)
    IF              reduce using rule 21 (comentario -> COMMENTBLOCK .)
    SWITCH          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    FOR             reduce using rule 21 (comentario -> COMMENTBLOCK .)
    VOID            reduce using rule 21 (comentario -> COMMENTBLOCK .)
    TRUE            reduce using rule 21 (comentario -> COMMENTBLOCK .)
    FALSE           reduce using rule 21 (comentario -> COMMENTBLOCK .)
    LPAREN          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    $end            reduce using rule 21 (comentario -> COMMENTBLOCK .)
    RBRACE          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    DOTCOMMA        reduce using rule 21 (comentario -> COMMENTBLOCK .)
    BREAK           reduce using rule 21 (comentario -> COMMENTBLOCK .)


state 16

    (8) estructuras_de_Control -> sentencia_If .

    PRINT           reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    VAR             reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    COMMENTLINE     reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    COMMENTBLOCK    reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    RETURN          reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    MAP             reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    DOUBLE          reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    STRING          reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    INT             reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    SET             reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    LIST            reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    BOOLEAN         reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    FINAL           reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    CONST           reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    DYNAMIC         reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    VARIABLE        reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    NUMBER          reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    FLOAT           reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    CHAINCHAR       reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    IF              reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    SWITCH          reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    FOR             reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    VOID            reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    TRUE            reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    FALSE           reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    LPAREN          reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    $end            reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    RBRACE          reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    DOTCOMMA        reduce using rule 8 (estructuras_de_Control -> sentencia_If .)
    BREAK           reduce using rule 8 (estructuras_de_Control -> sentencia_If .)


state 17

    (9) estructuras_de_Control -> sentencia_Switch .

    PRINT           reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    VAR             reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    COMMENTLINE     reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    COMMENTBLOCK    reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    RETURN          reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    MAP             reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    DOUBLE          reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    STRING          reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    INT             reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    SET             reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    LIST            reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    BOOLEAN         reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    FINAL           reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    CONST           reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    DYNAMIC         reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    VARIABLE        reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    NUMBER          reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    FLOAT           reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    CHAINCHAR       reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    IF              reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    SWITCH          reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    FOR             reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    VOID            reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    TRUE            reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    FALSE           reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    LPAREN          reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    $end            reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    RBRACE          reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    DOTCOMMA        reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)
    BREAK           reduce using rule 9 (estructuras_de_Control -> sentencia_Switch .)


state 18

    (10) estructuras_de_Control -> ciclo_for .

    PRINT           reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    VAR             reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    COMMENTLINE     reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    COMMENTBLOCK    reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    RETURN          reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    MAP             reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    DOUBLE          reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    STRING          reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    INT             reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    SET             reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    LIST            reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    BOOLEAN         reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    FINAL           reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    CONST           reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    DYNAMIC         reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    VARIABLE        reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    NUMBER          reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    FLOAT           reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    CHAINCHAR       reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    IF              reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    SWITCH          reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    FOR             reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    VOID            reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    TRUE            reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    FALSE           reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    LPAREN          reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    $end            reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    RBRACE          reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    DOTCOMMA        reduce using rule 10 (estructuras_de_Control -> ciclo_for .)
    BREAK           reduce using rule 10 (estructuras_de_Control -> ciclo_for .)


state 19

    (11) estructuras_de_Control -> funcion_Anonima .

    PRINT           reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    VAR             reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    COMMENTLINE     reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    COMMENTBLOCK    reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    RETURN          reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    MAP             reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    DOUBLE          reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    STRING          reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    INT             reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    SET             reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    LIST            reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    BOOLEAN         reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    FINAL           reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    CONST           reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    DYNAMIC         reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    VARIABLE        reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    NUMBER          reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    FLOAT           reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    CHAINCHAR       reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    IF              reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    SWITCH          reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    FOR             reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    VOID            reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    TRUE            reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    FALSE           reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    LPAREN          reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    $end            reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    RBRACE          reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    DOTCOMMA        reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)
    BREAK           reduce using rule 11 (estructuras_de_Control -> funcion_Anonima .)


state 20

    (12) estructuras_de_Control -> diccionario .

    PRINT           reduce using rule 12 (estructuras_de_Control -> diccionario .)
    VAR             reduce using rule 12 (estructuras_de_Control -> diccionario .)
    COMMENTLINE     reduce using rule 12 (estructuras_de_Control -> diccionario .)
    COMMENTBLOCK    reduce using rule 12 (estructuras_de_Control -> diccionario .)
    RETURN          reduce using rule 12 (estructuras_de_Control -> diccionario .)
    MAP             reduce using rule 12 (estructuras_de_Control -> diccionario .)
    DOUBLE          reduce using rule 12 (estructuras_de_Control -> diccionario .)
    STRING          reduce using rule 12 (estructuras_de_Control -> diccionario .)
    INT             reduce using rule 12 (estructuras_de_Control -> diccionario .)
    SET             reduce using rule 12 (estructuras_de_Control -> diccionario .)
    LIST            reduce using rule 12 (estructuras_de_Control -> diccionario .)
    BOOLEAN         reduce using rule 12 (estructuras_de_Control -> diccionario .)
    FINAL           reduce using rule 12 (estructuras_de_Control -> diccionario .)
    CONST           reduce using rule 12 (estructuras_de_Control -> diccionario .)
    DYNAMIC         reduce using rule 12 (estructuras_de_Control -> diccionario .)
    VARIABLE        reduce using rule 12 (estructuras_de_Control -> diccionario .)
    NUMBER          reduce using rule 12 (estructuras_de_Control -> diccionario .)
    FLOAT           reduce using rule 12 (estructuras_de_Control -> diccionario .)
    CHAINCHAR       reduce using rule 12 (estructuras_de_Control -> diccionario .)
    IF              reduce using rule 12 (estructuras_de_Control -> diccionario .)
    SWITCH          reduce using rule 12 (estructuras_de_Control -> diccionario .)
    FOR             reduce using rule 12 (estructuras_de_Control -> diccionario .)
    VOID            reduce using rule 12 (estructuras_de_Control -> diccionario .)
    TRUE            reduce using rule 12 (estructuras_de_Control -> diccionario .)
    FALSE           reduce using rule 12 (estructuras_de_Control -> diccionario .)
    LPAREN          reduce using rule 12 (estructuras_de_Control -> diccionario .)
    $end            reduce using rule 12 (estructuras_de_Control -> diccionario .)
    RBRACE          reduce using rule 12 (estructuras_de_Control -> diccionario .)
    DOTCOMMA        reduce using rule 12 (estructuras_de_Control -> diccionario .)
    BREAK           reduce using rule 12 (estructuras_de_Control -> diccionario .)


state 21

    (13) estructuras_de_Control -> Conjunto .

    PRINT           reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    VAR             reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    COMMENTLINE     reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    COMMENTBLOCK    reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    RETURN          reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    MAP             reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    DOUBLE          reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    STRING          reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    INT             reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    SET             reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    LIST            reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    BOOLEAN         reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    FINAL           reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    CONST           reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    DYNAMIC         reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    VARIABLE        reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    NUMBER          reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    FLOAT           reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    CHAINCHAR       reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    IF              reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    SWITCH          reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    FOR             reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    VOID            reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    TRUE            reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    FALSE           reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    LPAREN          reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    $end            reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    RBRACE          reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    DOTCOMMA        reduce using rule 13 (estructuras_de_Control -> Conjunto .)
    BREAK           reduce using rule 13 (estructuras_de_Control -> Conjunto .)


state 22

    (14) estructuras_de_Control -> funcion_flecha .

    PRINT           reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    VAR             reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    COMMENTLINE     reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    COMMENTBLOCK    reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    RETURN          reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    MAP             reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    DOUBLE          reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    STRING          reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    INT             reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    SET             reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    LIST            reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    BOOLEAN         reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    FINAL           reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    CONST           reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    DYNAMIC         reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    VARIABLE        reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    NUMBER          reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    FLOAT           reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    CHAINCHAR       reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    IF              reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    SWITCH          reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    FOR             reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    VOID            reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    TRUE            reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    FALSE           reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    LPAREN          reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    $end            reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    RBRACE          reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    DOTCOMMA        reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)
    BREAK           reduce using rule 14 (estructuras_de_Control -> funcion_flecha .)


state 23

    (15) estructuras_de_Control -> funcion_Void .

    PRINT           reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    VAR             reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    COMMENTLINE     reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    COMMENTBLOCK    reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    RETURN          reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    MAP             reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    DOUBLE          reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    STRING          reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    INT             reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    SET             reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    LIST            reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    BOOLEAN         reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    FINAL           reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    CONST           reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    DYNAMIC         reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    VARIABLE        reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    NUMBER          reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    FLOAT           reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    CHAINCHAR       reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    IF              reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    SWITCH          reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    FOR             reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    VOID            reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    TRUE            reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    FALSE           reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    LPAREN          reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    $end            reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    RBRACE          reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    DOTCOMMA        reduce using rule 15 (estructuras_de_Control -> funcion_Void .)
    BREAK           reduce using rule 15 (estructuras_de_Control -> funcion_Void .)


state 24

    (16) estructuras_de_Control -> funcion .

    PRINT           reduce using rule 16 (estructuras_de_Control -> funcion .)
    VAR             reduce using rule 16 (estructuras_de_Control -> funcion .)
    COMMENTLINE     reduce using rule 16 (estructuras_de_Control -> funcion .)
    COMMENTBLOCK    reduce using rule 16 (estructuras_de_Control -> funcion .)
    RETURN          reduce using rule 16 (estructuras_de_Control -> funcion .)
    MAP             reduce using rule 16 (estructuras_de_Control -> funcion .)
    DOUBLE          reduce using rule 16 (estructuras_de_Control -> funcion .)
    STRING          reduce using rule 16 (estructuras_de_Control -> funcion .)
    INT             reduce using rule 16 (estructuras_de_Control -> funcion .)
    SET             reduce using rule 16 (estructuras_de_Control -> funcion .)
    LIST            reduce using rule 16 (estructuras_de_Control -> funcion .)
    BOOLEAN         reduce using rule 16 (estructuras_de_Control -> funcion .)
    FINAL           reduce using rule 16 (estructuras_de_Control -> funcion .)
    CONST           reduce using rule 16 (estructuras_de_Control -> funcion .)
    DYNAMIC         reduce using rule 16 (estructuras_de_Control -> funcion .)
    VARIABLE        reduce using rule 16 (estructuras_de_Control -> funcion .)
    NUMBER          reduce using rule 16 (estructuras_de_Control -> funcion .)
    FLOAT           reduce using rule 16 (estructuras_de_Control -> funcion .)
    CHAINCHAR       reduce using rule 16 (estructuras_de_Control -> funcion .)
    IF              reduce using rule 16 (estructuras_de_Control -> funcion .)
    SWITCH          reduce using rule 16 (estructuras_de_Control -> funcion .)
    FOR             reduce using rule 16 (estructuras_de_Control -> funcion .)
    VOID            reduce using rule 16 (estructuras_de_Control -> funcion .)
    TRUE            reduce using rule 16 (estructuras_de_Control -> funcion .)
    FALSE           reduce using rule 16 (estructuras_de_Control -> funcion .)
    LPAREN          reduce using rule 16 (estructuras_de_Control -> funcion .)
    $end            reduce using rule 16 (estructuras_de_Control -> funcion .)
    RBRACE          reduce using rule 16 (estructuras_de_Control -> funcion .)
    DOTCOMMA        reduce using rule 16 (estructuras_de_Control -> funcion .)
    BREAK           reduce using rule 16 (estructuras_de_Control -> funcion .)


state 25

    (17) estructuras_de_Control -> funcion_Data .

    PRINT           reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    VAR             reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    COMMENTLINE     reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    COMMENTBLOCK    reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    RETURN          reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    MAP             reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    DOUBLE          reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    STRING          reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    INT             reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    SET             reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    LIST            reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    BOOLEAN         reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    FINAL           reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    CONST           reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    DYNAMIC         reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    VARIABLE        reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    NUMBER          reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    FLOAT           reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    CHAINCHAR       reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    IF              reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    SWITCH          reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    FOR             reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    VOID            reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    TRUE            reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    FALSE           reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    LPAREN          reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    $end            reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    RBRACE          reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    DOTCOMMA        reduce using rule 17 (estructuras_de_Control -> funcion_Data .)
    BREAK           reduce using rule 17 (estructuras_de_Control -> funcion_Data .)


state 26

    (18) estructuras_de_Control -> RETURN . VARIABLE

    VARIABLE        shift and go to state 64


state 27

    (19) estructuras_de_Control -> estructura_List .

    PRINT           reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    VAR             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    COMMENTLINE     reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    COMMENTBLOCK    reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    RETURN          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    MAP             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    DOUBLE          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    STRING          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    INT             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    SET             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    LIST            reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    BOOLEAN         reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    FINAL           reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    CONST           reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    DYNAMIC         reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    VARIABLE        reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    NUMBER          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    FLOAT           reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    CHAINCHAR       reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    IF              reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    SWITCH          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    FOR             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    VOID            reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    TRUE            reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    FALSE           reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    LPAREN          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    $end            reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    RBRACE          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    DOTCOMMA        reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    BREAK           reduce using rule 19 (estructuras_de_Control -> estructura_List .)


state 28

    (51) tipo -> MAP .
    (88) diccionario -> MAP . LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    VARIABLE        reduce using rule 51 (tipo -> MAP .)
    LANGLE          shift and go to state 65


state 29

    (52) tipo -> DOUBLE .

    VARIABLE        reduce using rule 52 (tipo -> DOUBLE .)
    COMMA           reduce using rule 52 (tipo -> DOUBLE .)
    RANGLE          reduce using rule 52 (tipo -> DOUBLE .)


state 30

    (53) tipo -> STRING .

    VARIABLE        reduce using rule 53 (tipo -> STRING .)
    COMMA           reduce using rule 53 (tipo -> STRING .)
    RANGLE          reduce using rule 53 (tipo -> STRING .)


state 31

    (54) tipo -> INT .

    VARIABLE        reduce using rule 54 (tipo -> INT .)
    COMMA           reduce using rule 54 (tipo -> INT .)
    RANGLE          reduce using rule 54 (tipo -> INT .)


state 32

    (55) tipo -> SET .
    (73) Conjunto -> SET . VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> SET . LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA

  ! shift/reduce conflict for VARIABLE resolved as shift
    VARIABLE        shift and go to state 66
    LANGLE          shift and go to state 67

  ! VARIABLE        [ reduce using rule 55 (tipo -> SET .) ]


state 33

    (56) tipo -> LIST .
    (32) estructura_List -> LIST . LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA

    VARIABLE        reduce using rule 56 (tipo -> LIST .)
    LANGLE          shift and go to state 68


state 34

    (57) tipo -> BOOLEAN .

    VARIABLE        reduce using rule 57 (tipo -> BOOLEAN .)
    COMMA           reduce using rule 57 (tipo -> BOOLEAN .)
    RANGLE          reduce using rule 57 (tipo -> BOOLEAN .)


state 35

    (58) tipo -> FINAL .

    VARIABLE        reduce using rule 58 (tipo -> FINAL .)
    COMMA           reduce using rule 58 (tipo -> FINAL .)
    RANGLE          reduce using rule 58 (tipo -> FINAL .)


state 36

    (59) tipo -> CONST .

    VARIABLE        reduce using rule 59 (tipo -> CONST .)
    COMMA           reduce using rule 59 (tipo -> CONST .)
    RANGLE          reduce using rule 59 (tipo -> CONST .)


state 37

    (60) tipo -> DYNAMIC .

    VARIABLE        reduce using rule 60 (tipo -> DYNAMIC .)
    COMMA           reduce using rule 60 (tipo -> DYNAMIC .)
    RANGLE          reduce using rule 60 (tipo -> DYNAMIC .)


state 38

    (46) valor -> NUMBER .

    PLUS            reduce using rule 46 (valor -> NUMBER .)
    MINUS           reduce using rule 46 (valor -> NUMBER .)
    TIMES           reduce using rule 46 (valor -> NUMBER .)
    DIVIDE          reduce using rule 46 (valor -> NUMBER .)
    COMMA           reduce using rule 46 (valor -> NUMBER .)
    RPAREN          reduce using rule 46 (valor -> NUMBER .)
    PRINT           reduce using rule 46 (valor -> NUMBER .)
    VAR             reduce using rule 46 (valor -> NUMBER .)
    COMMENTLINE     reduce using rule 46 (valor -> NUMBER .)
    COMMENTBLOCK    reduce using rule 46 (valor -> NUMBER .)
    RETURN          reduce using rule 46 (valor -> NUMBER .)
    MAP             reduce using rule 46 (valor -> NUMBER .)
    DOUBLE          reduce using rule 46 (valor -> NUMBER .)
    STRING          reduce using rule 46 (valor -> NUMBER .)
    INT             reduce using rule 46 (valor -> NUMBER .)
    SET             reduce using rule 46 (valor -> NUMBER .)
    LIST            reduce using rule 46 (valor -> NUMBER .)
    BOOLEAN         reduce using rule 46 (valor -> NUMBER .)
    FINAL           reduce using rule 46 (valor -> NUMBER .)
    CONST           reduce using rule 46 (valor -> NUMBER .)
    DYNAMIC         reduce using rule 46 (valor -> NUMBER .)
    VARIABLE        reduce using rule 46 (valor -> NUMBER .)
    NUMBER          reduce using rule 46 (valor -> NUMBER .)
    FLOAT           reduce using rule 46 (valor -> NUMBER .)
    CHAINCHAR       reduce using rule 46 (valor -> NUMBER .)
    IF              reduce using rule 46 (valor -> NUMBER .)
    SWITCH          reduce using rule 46 (valor -> NUMBER .)
    FOR             reduce using rule 46 (valor -> NUMBER .)
    VOID            reduce using rule 46 (valor -> NUMBER .)
    TRUE            reduce using rule 46 (valor -> NUMBER .)
    FALSE           reduce using rule 46 (valor -> NUMBER .)
    LPAREN          reduce using rule 46 (valor -> NUMBER .)
    $end            reduce using rule 46 (valor -> NUMBER .)
    RBRACE          reduce using rule 46 (valor -> NUMBER .)
    DOTCOMMA        reduce using rule 46 (valor -> NUMBER .)
    BREAK           reduce using rule 46 (valor -> NUMBER .)
    EQUALS          reduce using rule 46 (valor -> NUMBER .)
    LANGLE          reduce using rule 46 (valor -> NUMBER .)
    RANGLE          reduce using rule 46 (valor -> NUMBER .)
    NEQ             reduce using rule 46 (valor -> NUMBER .)
    RBRACKET        reduce using rule 46 (valor -> NUMBER .)
    AND             reduce using rule 46 (valor -> NUMBER .)
    OR              reduce using rule 46 (valor -> NUMBER .)
    TWODOTS         reduce using rule 46 (valor -> NUMBER .)


state 39

    (47) valor -> FLOAT .

    PLUS            reduce using rule 47 (valor -> FLOAT .)
    MINUS           reduce using rule 47 (valor -> FLOAT .)
    TIMES           reduce using rule 47 (valor -> FLOAT .)
    DIVIDE          reduce using rule 47 (valor -> FLOAT .)
    COMMA           reduce using rule 47 (valor -> FLOAT .)
    RPAREN          reduce using rule 47 (valor -> FLOAT .)
    PRINT           reduce using rule 47 (valor -> FLOAT .)
    VAR             reduce using rule 47 (valor -> FLOAT .)
    COMMENTLINE     reduce using rule 47 (valor -> FLOAT .)
    COMMENTBLOCK    reduce using rule 47 (valor -> FLOAT .)
    RETURN          reduce using rule 47 (valor -> FLOAT .)
    MAP             reduce using rule 47 (valor -> FLOAT .)
    DOUBLE          reduce using rule 47 (valor -> FLOAT .)
    STRING          reduce using rule 47 (valor -> FLOAT .)
    INT             reduce using rule 47 (valor -> FLOAT .)
    SET             reduce using rule 47 (valor -> FLOAT .)
    LIST            reduce using rule 47 (valor -> FLOAT .)
    BOOLEAN         reduce using rule 47 (valor -> FLOAT .)
    FINAL           reduce using rule 47 (valor -> FLOAT .)
    CONST           reduce using rule 47 (valor -> FLOAT .)
    DYNAMIC         reduce using rule 47 (valor -> FLOAT .)
    VARIABLE        reduce using rule 47 (valor -> FLOAT .)
    NUMBER          reduce using rule 47 (valor -> FLOAT .)
    FLOAT           reduce using rule 47 (valor -> FLOAT .)
    CHAINCHAR       reduce using rule 47 (valor -> FLOAT .)
    IF              reduce using rule 47 (valor -> FLOAT .)
    SWITCH          reduce using rule 47 (valor -> FLOAT .)
    FOR             reduce using rule 47 (valor -> FLOAT .)
    VOID            reduce using rule 47 (valor -> FLOAT .)
    TRUE            reduce using rule 47 (valor -> FLOAT .)
    FALSE           reduce using rule 47 (valor -> FLOAT .)
    LPAREN          reduce using rule 47 (valor -> FLOAT .)
    $end            reduce using rule 47 (valor -> FLOAT .)
    RBRACE          reduce using rule 47 (valor -> FLOAT .)
    DOTCOMMA        reduce using rule 47 (valor -> FLOAT .)
    BREAK           reduce using rule 47 (valor -> FLOAT .)
    EQUALS          reduce using rule 47 (valor -> FLOAT .)
    LANGLE          reduce using rule 47 (valor -> FLOAT .)
    RANGLE          reduce using rule 47 (valor -> FLOAT .)
    NEQ             reduce using rule 47 (valor -> FLOAT .)
    RBRACKET        reduce using rule 47 (valor -> FLOAT .)
    AND             reduce using rule 47 (valor -> FLOAT .)
    OR              reduce using rule 47 (valor -> FLOAT .)
    TWODOTS         reduce using rule 47 (valor -> FLOAT .)


state 40

    (48) valor -> CHAINCHAR .

    PLUS            reduce using rule 48 (valor -> CHAINCHAR .)
    MINUS           reduce using rule 48 (valor -> CHAINCHAR .)
    TIMES           reduce using rule 48 (valor -> CHAINCHAR .)
    DIVIDE          reduce using rule 48 (valor -> CHAINCHAR .)
    COMMA           reduce using rule 48 (valor -> CHAINCHAR .)
    RPAREN          reduce using rule 48 (valor -> CHAINCHAR .)
    PRINT           reduce using rule 48 (valor -> CHAINCHAR .)
    VAR             reduce using rule 48 (valor -> CHAINCHAR .)
    COMMENTLINE     reduce using rule 48 (valor -> CHAINCHAR .)
    COMMENTBLOCK    reduce using rule 48 (valor -> CHAINCHAR .)
    RETURN          reduce using rule 48 (valor -> CHAINCHAR .)
    MAP             reduce using rule 48 (valor -> CHAINCHAR .)
    DOUBLE          reduce using rule 48 (valor -> CHAINCHAR .)
    STRING          reduce using rule 48 (valor -> CHAINCHAR .)
    INT             reduce using rule 48 (valor -> CHAINCHAR .)
    SET             reduce using rule 48 (valor -> CHAINCHAR .)
    LIST            reduce using rule 48 (valor -> CHAINCHAR .)
    BOOLEAN         reduce using rule 48 (valor -> CHAINCHAR .)
    FINAL           reduce using rule 48 (valor -> CHAINCHAR .)
    CONST           reduce using rule 48 (valor -> CHAINCHAR .)
    DYNAMIC         reduce using rule 48 (valor -> CHAINCHAR .)
    VARIABLE        reduce using rule 48 (valor -> CHAINCHAR .)
    NUMBER          reduce using rule 48 (valor -> CHAINCHAR .)
    FLOAT           reduce using rule 48 (valor -> CHAINCHAR .)
    CHAINCHAR       reduce using rule 48 (valor -> CHAINCHAR .)
    IF              reduce using rule 48 (valor -> CHAINCHAR .)
    SWITCH          reduce using rule 48 (valor -> CHAINCHAR .)
    FOR             reduce using rule 48 (valor -> CHAINCHAR .)
    VOID            reduce using rule 48 (valor -> CHAINCHAR .)
    TRUE            reduce using rule 48 (valor -> CHAINCHAR .)
    FALSE           reduce using rule 48 (valor -> CHAINCHAR .)
    LPAREN          reduce using rule 48 (valor -> CHAINCHAR .)
    $end            reduce using rule 48 (valor -> CHAINCHAR .)
    RBRACE          reduce using rule 48 (valor -> CHAINCHAR .)
    DOTCOMMA        reduce using rule 48 (valor -> CHAINCHAR .)
    BREAK           reduce using rule 48 (valor -> CHAINCHAR .)
    EQUALS          reduce using rule 48 (valor -> CHAINCHAR .)
    LANGLE          reduce using rule 48 (valor -> CHAINCHAR .)
    RANGLE          reduce using rule 48 (valor -> CHAINCHAR .)
    NEQ             reduce using rule 48 (valor -> CHAINCHAR .)
    RBRACKET        reduce using rule 48 (valor -> CHAINCHAR .)
    AND             reduce using rule 48 (valor -> CHAINCHAR .)
    OR              reduce using rule 48 (valor -> CHAINCHAR .)
    TWODOTS         reduce using rule 48 (valor -> CHAINCHAR .)


state 41

    (49) valor -> Bool .

    PLUS            reduce using rule 49 (valor -> Bool .)
    MINUS           reduce using rule 49 (valor -> Bool .)
    TIMES           reduce using rule 49 (valor -> Bool .)
    DIVIDE          reduce using rule 49 (valor -> Bool .)
    COMMA           reduce using rule 49 (valor -> Bool .)
    RPAREN          reduce using rule 49 (valor -> Bool .)
    PRINT           reduce using rule 49 (valor -> Bool .)
    VAR             reduce using rule 49 (valor -> Bool .)
    COMMENTLINE     reduce using rule 49 (valor -> Bool .)
    COMMENTBLOCK    reduce using rule 49 (valor -> Bool .)
    RETURN          reduce using rule 49 (valor -> Bool .)
    MAP             reduce using rule 49 (valor -> Bool .)
    DOUBLE          reduce using rule 49 (valor -> Bool .)
    STRING          reduce using rule 49 (valor -> Bool .)
    INT             reduce using rule 49 (valor -> Bool .)
    SET             reduce using rule 49 (valor -> Bool .)
    LIST            reduce using rule 49 (valor -> Bool .)
    BOOLEAN         reduce using rule 49 (valor -> Bool .)
    FINAL           reduce using rule 49 (valor -> Bool .)
    CONST           reduce using rule 49 (valor -> Bool .)
    DYNAMIC         reduce using rule 49 (valor -> Bool .)
    VARIABLE        reduce using rule 49 (valor -> Bool .)
    NUMBER          reduce using rule 49 (valor -> Bool .)
    FLOAT           reduce using rule 49 (valor -> Bool .)
    CHAINCHAR       reduce using rule 49 (valor -> Bool .)
    IF              reduce using rule 49 (valor -> Bool .)
    SWITCH          reduce using rule 49 (valor -> Bool .)
    FOR             reduce using rule 49 (valor -> Bool .)
    VOID            reduce using rule 49 (valor -> Bool .)
    TRUE            reduce using rule 49 (valor -> Bool .)
    FALSE           reduce using rule 49 (valor -> Bool .)
    LPAREN          reduce using rule 49 (valor -> Bool .)
    $end            reduce using rule 49 (valor -> Bool .)
    RBRACE          reduce using rule 49 (valor -> Bool .)
    DOTCOMMA        reduce using rule 49 (valor -> Bool .)
    BREAK           reduce using rule 49 (valor -> Bool .)
    EQUALS          reduce using rule 49 (valor -> Bool .)
    LANGLE          reduce using rule 49 (valor -> Bool .)
    RANGLE          reduce using rule 49 (valor -> Bool .)
    NEQ             reduce using rule 49 (valor -> Bool .)
    RBRACKET        reduce using rule 49 (valor -> Bool .)
    AND             reduce using rule 49 (valor -> Bool .)
    OR              reduce using rule 49 (valor -> Bool .)
    TWODOTS         reduce using rule 49 (valor -> Bool .)


state 42

    (50) valor -> tupla .
    (87) funcion_Anonima -> tupla . LBRACE programa RBRACE DOTCOMMA

    PLUS            reduce using rule 50 (valor -> tupla .)
    MINUS           reduce using rule 50 (valor -> tupla .)
    TIMES           reduce using rule 50 (valor -> tupla .)
    DIVIDE          reduce using rule 50 (valor -> tupla .)
    LBRACE          shift and go to state 69


state 43

    (25) sentencia_If -> IF . LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> IF . LPAREN condicion RPAREN LBRACE programa RBRACE

    LPAREN          shift and go to state 70


state 44

    (68) sentencia_Switch -> SWITCH . LPAREN valor RPAREN LBRACE caso RBRACE

    LPAREN          shift and go to state 71


state 45

    (81) ciclo_for -> FOR . LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE

    LPAREN          shift and go to state 72


state 46

    (33) funcion_Void -> VOID . VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA

    VARIABLE        shift and go to state 73


state 47

    (43) Bool -> TRUE .

    PLUS            reduce using rule 43 (Bool -> TRUE .)
    MINUS           reduce using rule 43 (Bool -> TRUE .)
    TIMES           reduce using rule 43 (Bool -> TRUE .)
    DIVIDE          reduce using rule 43 (Bool -> TRUE .)
    COMMA           reduce using rule 43 (Bool -> TRUE .)
    RPAREN          reduce using rule 43 (Bool -> TRUE .)
    PRINT           reduce using rule 43 (Bool -> TRUE .)
    VAR             reduce using rule 43 (Bool -> TRUE .)
    COMMENTLINE     reduce using rule 43 (Bool -> TRUE .)
    COMMENTBLOCK    reduce using rule 43 (Bool -> TRUE .)
    RETURN          reduce using rule 43 (Bool -> TRUE .)
    MAP             reduce using rule 43 (Bool -> TRUE .)
    DOUBLE          reduce using rule 43 (Bool -> TRUE .)
    STRING          reduce using rule 43 (Bool -> TRUE .)
    INT             reduce using rule 43 (Bool -> TRUE .)
    SET             reduce using rule 43 (Bool -> TRUE .)
    LIST            reduce using rule 43 (Bool -> TRUE .)
    BOOLEAN         reduce using rule 43 (Bool -> TRUE .)
    FINAL           reduce using rule 43 (Bool -> TRUE .)
    CONST           reduce using rule 43 (Bool -> TRUE .)
    DYNAMIC         reduce using rule 43 (Bool -> TRUE .)
    VARIABLE        reduce using rule 43 (Bool -> TRUE .)
    NUMBER          reduce using rule 43 (Bool -> TRUE .)
    FLOAT           reduce using rule 43 (Bool -> TRUE .)
    CHAINCHAR       reduce using rule 43 (Bool -> TRUE .)
    IF              reduce using rule 43 (Bool -> TRUE .)
    SWITCH          reduce using rule 43 (Bool -> TRUE .)
    FOR             reduce using rule 43 (Bool -> TRUE .)
    VOID            reduce using rule 43 (Bool -> TRUE .)
    TRUE            reduce using rule 43 (Bool -> TRUE .)
    FALSE           reduce using rule 43 (Bool -> TRUE .)
    LPAREN          reduce using rule 43 (Bool -> TRUE .)
    $end            reduce using rule 43 (Bool -> TRUE .)
    RBRACE          reduce using rule 43 (Bool -> TRUE .)
    DOTCOMMA        reduce using rule 43 (Bool -> TRUE .)
    BREAK           reduce using rule 43 (Bool -> TRUE .)
    EQUALS          reduce using rule 43 (Bool -> TRUE .)
    LANGLE          reduce using rule 43 (Bool -> TRUE .)
    RANGLE          reduce using rule 43 (Bool -> TRUE .)
    NEQ             reduce using rule 43 (Bool -> TRUE .)
    RBRACKET        reduce using rule 43 (Bool -> TRUE .)
    AND             reduce using rule 43 (Bool -> TRUE .)
    OR              reduce using rule 43 (Bool -> TRUE .)
    TWODOTS         reduce using rule 43 (Bool -> TRUE .)


state 48

    (44) Bool -> FALSE .

    PLUS            reduce using rule 44 (Bool -> FALSE .)
    MINUS           reduce using rule 44 (Bool -> FALSE .)
    TIMES           reduce using rule 44 (Bool -> FALSE .)
    DIVIDE          reduce using rule 44 (Bool -> FALSE .)
    COMMA           reduce using rule 44 (Bool -> FALSE .)
    RPAREN          reduce using rule 44 (Bool -> FALSE .)
    PRINT           reduce using rule 44 (Bool -> FALSE .)
    VAR             reduce using rule 44 (Bool -> FALSE .)
    COMMENTLINE     reduce using rule 44 (Bool -> FALSE .)
    COMMENTBLOCK    reduce using rule 44 (Bool -> FALSE .)
    RETURN          reduce using rule 44 (Bool -> FALSE .)
    MAP             reduce using rule 44 (Bool -> FALSE .)
    DOUBLE          reduce using rule 44 (Bool -> FALSE .)
    STRING          reduce using rule 44 (Bool -> FALSE .)
    INT             reduce using rule 44 (Bool -> FALSE .)
    SET             reduce using rule 44 (Bool -> FALSE .)
    LIST            reduce using rule 44 (Bool -> FALSE .)
    BOOLEAN         reduce using rule 44 (Bool -> FALSE .)
    FINAL           reduce using rule 44 (Bool -> FALSE .)
    CONST           reduce using rule 44 (Bool -> FALSE .)
    DYNAMIC         reduce using rule 44 (Bool -> FALSE .)
    VARIABLE        reduce using rule 44 (Bool -> FALSE .)
    NUMBER          reduce using rule 44 (Bool -> FALSE .)
    FLOAT           reduce using rule 44 (Bool -> FALSE .)
    CHAINCHAR       reduce using rule 44 (Bool -> FALSE .)
    IF              reduce using rule 44 (Bool -> FALSE .)
    SWITCH          reduce using rule 44 (Bool -> FALSE .)
    FOR             reduce using rule 44 (Bool -> FALSE .)
    VOID            reduce using rule 44 (Bool -> FALSE .)
    TRUE            reduce using rule 44 (Bool -> FALSE .)
    FALSE           reduce using rule 44 (Bool -> FALSE .)
    LPAREN          reduce using rule 44 (Bool -> FALSE .)
    $end            reduce using rule 44 (Bool -> FALSE .)
    RBRACE          reduce using rule 44 (Bool -> FALSE .)
    DOTCOMMA        reduce using rule 44 (Bool -> FALSE .)
    BREAK           reduce using rule 44 (Bool -> FALSE .)
    EQUALS          reduce using rule 44 (Bool -> FALSE .)
    LANGLE          reduce using rule 44 (Bool -> FALSE .)
    RANGLE          reduce using rule 44 (Bool -> FALSE .)
    NEQ             reduce using rule 44 (Bool -> FALSE .)
    RBRACKET        reduce using rule 44 (Bool -> FALSE .)
    AND             reduce using rule 44 (Bool -> FALSE .)
    OR              reduce using rule 44 (Bool -> FALSE .)
    TWODOTS         reduce using rule 44 (Bool -> FALSE .)


state 49

    (2) programa -> programa cuerpo .

    PRINT           reduce using rule 2 (programa -> programa cuerpo .)
    VAR             reduce using rule 2 (programa -> programa cuerpo .)
    COMMENTLINE     reduce using rule 2 (programa -> programa cuerpo .)
    COMMENTBLOCK    reduce using rule 2 (programa -> programa cuerpo .)
    RETURN          reduce using rule 2 (programa -> programa cuerpo .)
    MAP             reduce using rule 2 (programa -> programa cuerpo .)
    DOUBLE          reduce using rule 2 (programa -> programa cuerpo .)
    STRING          reduce using rule 2 (programa -> programa cuerpo .)
    INT             reduce using rule 2 (programa -> programa cuerpo .)
    SET             reduce using rule 2 (programa -> programa cuerpo .)
    LIST            reduce using rule 2 (programa -> programa cuerpo .)
    BOOLEAN         reduce using rule 2 (programa -> programa cuerpo .)
    FINAL           reduce using rule 2 (programa -> programa cuerpo .)
    CONST           reduce using rule 2 (programa -> programa cuerpo .)
    DYNAMIC         reduce using rule 2 (programa -> programa cuerpo .)
    VARIABLE        reduce using rule 2 (programa -> programa cuerpo .)
    NUMBER          reduce using rule 2 (programa -> programa cuerpo .)
    FLOAT           reduce using rule 2 (programa -> programa cuerpo .)
    CHAINCHAR       reduce using rule 2 (programa -> programa cuerpo .)
    IF              reduce using rule 2 (programa -> programa cuerpo .)
    SWITCH          reduce using rule 2 (programa -> programa cuerpo .)
    FOR             reduce using rule 2 (programa -> programa cuerpo .)
    VOID            reduce using rule 2 (programa -> programa cuerpo .)
    TRUE            reduce using rule 2 (programa -> programa cuerpo .)
    FALSE           reduce using rule 2 (programa -> programa cuerpo .)
    LPAREN          reduce using rule 2 (programa -> programa cuerpo .)
    $end            reduce using rule 2 (programa -> programa cuerpo .)
    RBRACE          reduce using rule 2 (programa -> programa cuerpo .)
    DOTCOMMA        reduce using rule 2 (programa -> programa cuerpo .)
    BREAK           reduce using rule 2 (programa -> programa cuerpo .)


state 50

    (22) impresion -> PRINT LPAREN . valores RPAREN DOTCOMMA
    (23) impresion -> PRINT LPAREN . operacion RPAREN DOTCOMMA
    (24) impresion -> PRINT LPAREN . RPAREN DOTCOMMA
    (41) valores -> . valor
    (42) valores -> . valor COMMA valores
    (63) operacion -> . valor operador expresion
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    RPAREN          shift and go to state 75
    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valores                        shift and go to state 74
    operacion                      shift and go to state 76
    valor                          shift and go to state 77
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 51

    (40) tupla -> LPAREN valores . RPAREN

    RPAREN          shift and go to state 78


state 52

    (41) valores -> valor .
    (42) valores -> valor . COMMA valores

    RPAREN          reduce using rule 41 (valores -> valor .)
    RBRACE          reduce using rule 41 (valores -> valor .)
    RBRACKET        reduce using rule 41 (valores -> valor .)
    COMMA           shift and go to state 79


state 53

    (45) valor -> VARIABLE .

    COMMA           reduce using rule 45 (valor -> VARIABLE .)
    RPAREN          reduce using rule 45 (valor -> VARIABLE .)
    PLUS            reduce using rule 45 (valor -> VARIABLE .)
    MINUS           reduce using rule 45 (valor -> VARIABLE .)
    TIMES           reduce using rule 45 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 45 (valor -> VARIABLE .)
    PRINT           reduce using rule 45 (valor -> VARIABLE .)
    VAR             reduce using rule 45 (valor -> VARIABLE .)
    COMMENTLINE     reduce using rule 45 (valor -> VARIABLE .)
    COMMENTBLOCK    reduce using rule 45 (valor -> VARIABLE .)
    RETURN          reduce using rule 45 (valor -> VARIABLE .)
    MAP             reduce using rule 45 (valor -> VARIABLE .)
    DOUBLE          reduce using rule 45 (valor -> VARIABLE .)
    STRING          reduce using rule 45 (valor -> VARIABLE .)
    INT             reduce using rule 45 (valor -> VARIABLE .)
    SET             reduce using rule 45 (valor -> VARIABLE .)
    LIST            reduce using rule 45 (valor -> VARIABLE .)
    BOOLEAN         reduce using rule 45 (valor -> VARIABLE .)
    FINAL           reduce using rule 45 (valor -> VARIABLE .)
    CONST           reduce using rule 45 (valor -> VARIABLE .)
    DYNAMIC         reduce using rule 45 (valor -> VARIABLE .)
    VARIABLE        reduce using rule 45 (valor -> VARIABLE .)
    NUMBER          reduce using rule 45 (valor -> VARIABLE .)
    FLOAT           reduce using rule 45 (valor -> VARIABLE .)
    CHAINCHAR       reduce using rule 45 (valor -> VARIABLE .)
    IF              reduce using rule 45 (valor -> VARIABLE .)
    SWITCH          reduce using rule 45 (valor -> VARIABLE .)
    FOR             reduce using rule 45 (valor -> VARIABLE .)
    VOID            reduce using rule 45 (valor -> VARIABLE .)
    TRUE            reduce using rule 45 (valor -> VARIABLE .)
    FALSE           reduce using rule 45 (valor -> VARIABLE .)
    LPAREN          reduce using rule 45 (valor -> VARIABLE .)
    $end            reduce using rule 45 (valor -> VARIABLE .)
    RBRACE          reduce using rule 45 (valor -> VARIABLE .)
    DOTCOMMA        reduce using rule 45 (valor -> VARIABLE .)
    BREAK           reduce using rule 45 (valor -> VARIABLE .)
    EQUALS          reduce using rule 45 (valor -> VARIABLE .)
    LANGLE          reduce using rule 45 (valor -> VARIABLE .)
    RANGLE          reduce using rule 45 (valor -> VARIABLE .)
    NEQ             reduce using rule 45 (valor -> VARIABLE .)
    RBRACKET        reduce using rule 45 (valor -> VARIABLE .)
    AND             reduce using rule 45 (valor -> VARIABLE .)
    OR              reduce using rule 45 (valor -> VARIABLE .)
    TWODOTS         reduce using rule 45 (valor -> VARIABLE .)


state 54

    (50) valor -> tupla .

    COMMA           reduce using rule 50 (valor -> tupla .)
    RPAREN          reduce using rule 50 (valor -> tupla .)
    PLUS            reduce using rule 50 (valor -> tupla .)
    MINUS           reduce using rule 50 (valor -> tupla .)
    TIMES           reduce using rule 50 (valor -> tupla .)
    DIVIDE          reduce using rule 50 (valor -> tupla .)
    PRINT           reduce using rule 50 (valor -> tupla .)
    VAR             reduce using rule 50 (valor -> tupla .)
    COMMENTLINE     reduce using rule 50 (valor -> tupla .)
    COMMENTBLOCK    reduce using rule 50 (valor -> tupla .)
    RETURN          reduce using rule 50 (valor -> tupla .)
    MAP             reduce using rule 50 (valor -> tupla .)
    DOUBLE          reduce using rule 50 (valor -> tupla .)
    STRING          reduce using rule 50 (valor -> tupla .)
    INT             reduce using rule 50 (valor -> tupla .)
    SET             reduce using rule 50 (valor -> tupla .)
    LIST            reduce using rule 50 (valor -> tupla .)
    BOOLEAN         reduce using rule 50 (valor -> tupla .)
    FINAL           reduce using rule 50 (valor -> tupla .)
    CONST           reduce using rule 50 (valor -> tupla .)
    DYNAMIC         reduce using rule 50 (valor -> tupla .)
    VARIABLE        reduce using rule 50 (valor -> tupla .)
    NUMBER          reduce using rule 50 (valor -> tupla .)
    FLOAT           reduce using rule 50 (valor -> tupla .)
    CHAINCHAR       reduce using rule 50 (valor -> tupla .)
    IF              reduce using rule 50 (valor -> tupla .)
    SWITCH          reduce using rule 50 (valor -> tupla .)
    FOR             reduce using rule 50 (valor -> tupla .)
    VOID            reduce using rule 50 (valor -> tupla .)
    TRUE            reduce using rule 50 (valor -> tupla .)
    FALSE           reduce using rule 50 (valor -> tupla .)
    LPAREN          reduce using rule 50 (valor -> tupla .)
    $end            reduce using rule 50 (valor -> tupla .)
    RBRACE          reduce using rule 50 (valor -> tupla .)
    DOTCOMMA        reduce using rule 50 (valor -> tupla .)
    BREAK           reduce using rule 50 (valor -> tupla .)
    EQUALS          reduce using rule 50 (valor -> tupla .)
    LANGLE          reduce using rule 50 (valor -> tupla .)
    RANGLE          reduce using rule 50 (valor -> tupla .)
    NEQ             reduce using rule 50 (valor -> tupla .)
    RBRACKET        reduce using rule 50 (valor -> tupla .)
    AND             reduce using rule 50 (valor -> tupla .)
    OR              reduce using rule 50 (valor -> tupla .)
    TWODOTS         reduce using rule 50 (valor -> tupla .)


state 55

    (61) declaracion -> tipo VARIABLE . EQUALS valor DOTCOMMA
    (71) funcion_flecha -> tipo VARIABLE . LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> tipo VARIABLE . LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA

    EQUALS          shift and go to state 80
    LPAREN          shift and go to state 81


state 56

    (66) funcion -> VARIABLE LPAREN . valores RPAREN
    (41) valores -> . valor
    (42) valores -> . valor COMMA valores
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valores                        shift and go to state 82
    valor                          shift and go to state 52
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 57

    (67) funcion_Data -> VARIABLE DOT . VARIABLE LPAREN valores RPAREN DOTCOMMA

    VARIABLE        shift and go to state 83


state 58

    (63) operacion -> valor operador . expresion
    (64) expresion -> . LPAREN valor operador expresion RPAREN
    (65) expresion -> . valor
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    LPAREN          shift and go to state 86
    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    valor                          shift and go to state 84
    expresion                      shift and go to state 85
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 59

    (77) operador -> PLUS .

    LPAREN          reduce using rule 77 (operador -> PLUS .)
    VARIABLE        reduce using rule 77 (operador -> PLUS .)
    NUMBER          reduce using rule 77 (operador -> PLUS .)
    FLOAT           reduce using rule 77 (operador -> PLUS .)
    CHAINCHAR       reduce using rule 77 (operador -> PLUS .)
    TRUE            reduce using rule 77 (operador -> PLUS .)
    FALSE           reduce using rule 77 (operador -> PLUS .)


state 60

    (78) operador -> MINUS .

    LPAREN          reduce using rule 78 (operador -> MINUS .)
    VARIABLE        reduce using rule 78 (operador -> MINUS .)
    NUMBER          reduce using rule 78 (operador -> MINUS .)
    FLOAT           reduce using rule 78 (operador -> MINUS .)
    CHAINCHAR       reduce using rule 78 (operador -> MINUS .)
    TRUE            reduce using rule 78 (operador -> MINUS .)
    FALSE           reduce using rule 78 (operador -> MINUS .)


state 61

    (79) operador -> TIMES .

    LPAREN          reduce using rule 79 (operador -> TIMES .)
    VARIABLE        reduce using rule 79 (operador -> TIMES .)
    NUMBER          reduce using rule 79 (operador -> TIMES .)
    FLOAT           reduce using rule 79 (operador -> TIMES .)
    CHAINCHAR       reduce using rule 79 (operador -> TIMES .)
    TRUE            reduce using rule 79 (operador -> TIMES .)
    FALSE           reduce using rule 79 (operador -> TIMES .)


state 62

    (80) operador -> DIVIDE .

    LPAREN          reduce using rule 80 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 80 (operador -> DIVIDE .)
    NUMBER          reduce using rule 80 (operador -> DIVIDE .)
    FLOAT           reduce using rule 80 (operador -> DIVIDE .)
    CHAINCHAR       reduce using rule 80 (operador -> DIVIDE .)
    TRUE            reduce using rule 80 (operador -> DIVIDE .)
    FALSE           reduce using rule 80 (operador -> DIVIDE .)


state 63

    (62) declaracion -> VAR VARIABLE . EQUALS valor DOTCOMMA
    (86) funcion_Anonima -> VAR VARIABLE . EQUALS tupla LBRACE programa RBRACE DOTCOMMA

    EQUALS          shift and go to state 87


state 64

    (18) estructuras_de_Control -> RETURN VARIABLE .

    PRINT           reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    VAR             reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    COMMENTLINE     reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    COMMENTBLOCK    reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    RETURN          reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    MAP             reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    DOUBLE          reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    STRING          reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    INT             reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    SET             reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    LIST            reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    BOOLEAN         reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    FINAL           reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    CONST           reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    DYNAMIC         reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    VARIABLE        reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    NUMBER          reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    FLOAT           reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    CHAINCHAR       reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    IF              reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    SWITCH          reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    FOR             reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    VOID            reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    TRUE            reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    FALSE           reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    LPAREN          reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    $end            reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    RBRACE          reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    DOTCOMMA        reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)
    BREAK           reduce using rule 18 (estructuras_de_Control -> RETURN VARIABLE .)


state 65

    (88) diccionario -> MAP LANGLE . tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC

    MAP             shift and go to state 88
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 90
    LIST            shift and go to state 91
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37

    tipo                           shift and go to state 89

state 66

    (73) Conjunto -> SET VARIABLE . EQUALS cuerpo_conjunto DOTCOMMA

    EQUALS          shift and go to state 92


state 67

    (74) Conjunto -> SET LANGLE . tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC

    MAP             shift and go to state 88
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 90
    LIST            shift and go to state 91
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37

    tipo                           shift and go to state 93

state 68

    (32) estructura_List -> LIST LANGLE . tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC

    MAP             shift and go to state 88
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 90
    LIST            shift and go to state 91
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37

    tipo                           shift and go to state 94

state 69

    (87) funcion_Anonima -> tupla LBRACE . programa RBRACE DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    tupla                          shift and go to state 42
    programa                       shift and go to state 95
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 10
    valor                          shift and go to state 12
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41

state 70

    (25) sentencia_If -> IF LPAREN . condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> IF LPAREN . condicion RPAREN LBRACE programa RBRACE
    (28) condicion -> . valor Comparador valor
    (29) condicion -> . condicion conector condicion
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    condicion                      shift and go to state 96
    valor                          shift and go to state 97
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 71

    (68) sentencia_Switch -> SWITCH LPAREN . valor RPAREN LBRACE caso RBRACE
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valor                          shift and go to state 98
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 72

    (81) ciclo_for -> FOR LPAREN . declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC

    VAR             shift and go to state 101
    MAP             shift and go to state 88
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 90
    LIST            shift and go to state 91
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37

    declaracion                    shift and go to state 99
    tipo                           shift and go to state 100

state 73

    (33) funcion_Void -> VOID VARIABLE . LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA

    LPAREN          shift and go to state 102


state 74

    (22) impresion -> PRINT LPAREN valores . RPAREN DOTCOMMA

    RPAREN          shift and go to state 103


state 75

    (24) impresion -> PRINT LPAREN RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 104


state 76

    (23) impresion -> PRINT LPAREN operacion . RPAREN DOTCOMMA

    RPAREN          shift and go to state 105


state 77

    (41) valores -> valor .
    (42) valores -> valor . COMMA valores
    (63) operacion -> valor . operador expresion
    (77) operador -> . PLUS
    (78) operador -> . MINUS
    (79) operador -> . TIMES
    (80) operador -> . DIVIDE

    RPAREN          reduce using rule 41 (valores -> valor .)
    COMMA           shift and go to state 79
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62

    operador                       shift and go to state 58

state 78

    (40) tupla -> LPAREN valores RPAREN .

    LBRACE          reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    PLUS            reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    MINUS           reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    TIMES           reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    DIVIDE          reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    COMMA           reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    RPAREN          reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    PRINT           reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    VAR             reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    COMMENTLINE     reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    COMMENTBLOCK    reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    RETURN          reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    MAP             reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    DOUBLE          reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    STRING          reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    INT             reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    SET             reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    LIST            reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    BOOLEAN         reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    FINAL           reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    CONST           reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    DYNAMIC         reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    VARIABLE        reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    NUMBER          reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    FLOAT           reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    CHAINCHAR       reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    IF              reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    SWITCH          reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    FOR             reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    VOID            reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    TRUE            reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    FALSE           reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    LPAREN          reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    $end            reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    RBRACE          reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    DOTCOMMA        reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    BREAK           reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    EQUALS          reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    LANGLE          reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    RANGLE          reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    NEQ             reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    RBRACKET        reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    AND             reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    OR              reduce using rule 40 (tupla -> LPAREN valores RPAREN .)
    TWODOTS         reduce using rule 40 (tupla -> LPAREN valores RPAREN .)


state 79

    (42) valores -> valor COMMA . valores
    (41) valores -> . valor
    (42) valores -> . valor COMMA valores
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valor                          shift and go to state 52
    valores                        shift and go to state 106
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 80

    (61) declaracion -> tipo VARIABLE EQUALS . valor DOTCOMMA
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valor                          shift and go to state 107
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 81

    (71) funcion_flecha -> tipo VARIABLE LPAREN . valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> tipo VARIABLE LPAREN . RPAREN ARROWFUNCTION programa DOTCOMMA
    (41) valores -> . valor
    (42) valores -> . valor COMMA valores
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    RPAREN          shift and go to state 109
    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valores                        shift and go to state 108
    valor                          shift and go to state 52
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 82

    (66) funcion -> VARIABLE LPAREN valores . RPAREN

    RPAREN          shift and go to state 110


state 83

    (67) funcion_Data -> VARIABLE DOT VARIABLE . LPAREN valores RPAREN DOTCOMMA

    LPAREN          shift and go to state 111


state 84

    (65) expresion -> valor .

    PRINT           reduce using rule 65 (expresion -> valor .)
    VAR             reduce using rule 65 (expresion -> valor .)
    COMMENTLINE     reduce using rule 65 (expresion -> valor .)
    COMMENTBLOCK    reduce using rule 65 (expresion -> valor .)
    RETURN          reduce using rule 65 (expresion -> valor .)
    MAP             reduce using rule 65 (expresion -> valor .)
    DOUBLE          reduce using rule 65 (expresion -> valor .)
    STRING          reduce using rule 65 (expresion -> valor .)
    INT             reduce using rule 65 (expresion -> valor .)
    SET             reduce using rule 65 (expresion -> valor .)
    LIST            reduce using rule 65 (expresion -> valor .)
    BOOLEAN         reduce using rule 65 (expresion -> valor .)
    FINAL           reduce using rule 65 (expresion -> valor .)
    CONST           reduce using rule 65 (expresion -> valor .)
    DYNAMIC         reduce using rule 65 (expresion -> valor .)
    VARIABLE        reduce using rule 65 (expresion -> valor .)
    NUMBER          reduce using rule 65 (expresion -> valor .)
    FLOAT           reduce using rule 65 (expresion -> valor .)
    CHAINCHAR       reduce using rule 65 (expresion -> valor .)
    IF              reduce using rule 65 (expresion -> valor .)
    SWITCH          reduce using rule 65 (expresion -> valor .)
    FOR             reduce using rule 65 (expresion -> valor .)
    VOID            reduce using rule 65 (expresion -> valor .)
    TRUE            reduce using rule 65 (expresion -> valor .)
    FALSE           reduce using rule 65 (expresion -> valor .)
    LPAREN          reduce using rule 65 (expresion -> valor .)
    $end            reduce using rule 65 (expresion -> valor .)
    RPAREN          reduce using rule 65 (expresion -> valor .)
    RBRACE          reduce using rule 65 (expresion -> valor .)
    DOTCOMMA        reduce using rule 65 (expresion -> valor .)
    BREAK           reduce using rule 65 (expresion -> valor .)


state 85

    (63) operacion -> valor operador expresion .

    PRINT           reduce using rule 63 (operacion -> valor operador expresion .)
    VAR             reduce using rule 63 (operacion -> valor operador expresion .)
    COMMENTLINE     reduce using rule 63 (operacion -> valor operador expresion .)
    COMMENTBLOCK    reduce using rule 63 (operacion -> valor operador expresion .)
    RETURN          reduce using rule 63 (operacion -> valor operador expresion .)
    MAP             reduce using rule 63 (operacion -> valor operador expresion .)
    DOUBLE          reduce using rule 63 (operacion -> valor operador expresion .)
    STRING          reduce using rule 63 (operacion -> valor operador expresion .)
    INT             reduce using rule 63 (operacion -> valor operador expresion .)
    SET             reduce using rule 63 (operacion -> valor operador expresion .)
    LIST            reduce using rule 63 (operacion -> valor operador expresion .)
    BOOLEAN         reduce using rule 63 (operacion -> valor operador expresion .)
    FINAL           reduce using rule 63 (operacion -> valor operador expresion .)
    CONST           reduce using rule 63 (operacion -> valor operador expresion .)
    DYNAMIC         reduce using rule 63 (operacion -> valor operador expresion .)
    VARIABLE        reduce using rule 63 (operacion -> valor operador expresion .)
    NUMBER          reduce using rule 63 (operacion -> valor operador expresion .)
    FLOAT           reduce using rule 63 (operacion -> valor operador expresion .)
    CHAINCHAR       reduce using rule 63 (operacion -> valor operador expresion .)
    IF              reduce using rule 63 (operacion -> valor operador expresion .)
    SWITCH          reduce using rule 63 (operacion -> valor operador expresion .)
    FOR             reduce using rule 63 (operacion -> valor operador expresion .)
    VOID            reduce using rule 63 (operacion -> valor operador expresion .)
    TRUE            reduce using rule 63 (operacion -> valor operador expresion .)
    FALSE           reduce using rule 63 (operacion -> valor operador expresion .)
    LPAREN          reduce using rule 63 (operacion -> valor operador expresion .)
    $end            reduce using rule 63 (operacion -> valor operador expresion .)
    RPAREN          reduce using rule 63 (operacion -> valor operador expresion .)
    RBRACE          reduce using rule 63 (operacion -> valor operador expresion .)
    DOTCOMMA        reduce using rule 63 (operacion -> valor operador expresion .)
    BREAK           reduce using rule 63 (operacion -> valor operador expresion .)


state 86

    (64) expresion -> LPAREN . valor operador expresion RPAREN
    (40) tupla -> LPAREN . valores RPAREN
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (41) valores -> . valor
    (42) valores -> . valor COMMA valores
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valor                          shift and go to state 112
    valores                        shift and go to state 51
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 87

    (62) declaracion -> VAR VARIABLE EQUALS . valor DOTCOMMA
    (86) funcion_Anonima -> VAR VARIABLE EQUALS . tupla LBRACE programa RBRACE DOTCOMMA
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (40) tupla -> . LPAREN valores RPAREN
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    LPAREN          shift and go to state 9
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    valor                          shift and go to state 113
    tupla                          shift and go to state 114
    Bool                           shift and go to state 41

state 88

    (51) tipo -> MAP .

    COMMA           reduce using rule 51 (tipo -> MAP .)
    RANGLE          reduce using rule 51 (tipo -> MAP .)
    VARIABLE        reduce using rule 51 (tipo -> MAP .)


state 89

    (88) diccionario -> MAP LANGLE tipo . COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    COMMA           shift and go to state 115


state 90

    (55) tipo -> SET .

    COMMA           reduce using rule 55 (tipo -> SET .)
    RANGLE          reduce using rule 55 (tipo -> SET .)
    VARIABLE        reduce using rule 55 (tipo -> SET .)


state 91

    (56) tipo -> LIST .

    COMMA           reduce using rule 56 (tipo -> LIST .)
    RANGLE          reduce using rule 56 (tipo -> LIST .)
    VARIABLE        reduce using rule 56 (tipo -> LIST .)


state 92

    (73) Conjunto -> SET VARIABLE EQUALS . cuerpo_conjunto DOTCOMMA
    (75) cuerpo_conjunto -> . LBRACE valores RBRACE
    (76) cuerpo_conjunto -> . LBRACE RBRACE

    LBRACE          shift and go to state 117

    cuerpo_conjunto                shift and go to state 116

state 93

    (74) Conjunto -> SET LANGLE tipo . RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA

    RANGLE          shift and go to state 118


state 94

    (32) estructura_List -> LIST LANGLE tipo . RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA

    RANGLE          shift and go to state 119


state 95

    (87) funcion_Anonima -> tupla LBRACE programa . RBRACE DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 120
    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    tupla                          shift and go to state 42
    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 10
    valor                          shift and go to state 12
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41

state 96

    (25) sentencia_If -> IF LPAREN condicion . RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> IF LPAREN condicion . RPAREN LBRACE programa RBRACE
    (29) condicion -> condicion . conector condicion
    (30) conector -> . AND
    (31) conector -> . OR

    RPAREN          shift and go to state 121
    AND             shift and go to state 123
    OR              shift and go to state 124

    conector                       shift and go to state 122

state 97

    (28) condicion -> valor . Comparador valor
    (34) Comparador -> . EQUALS EQUALS
    (35) Comparador -> . LANGLE
    (36) Comparador -> . RANGLE
    (37) Comparador -> . LANGLE EQUALS
    (38) Comparador -> . RANGLE EQUALS
    (39) Comparador -> . NEQ

    EQUALS          shift and go to state 126
    LANGLE          shift and go to state 127
    RANGLE          shift and go to state 128
    NEQ             shift and go to state 129

    Comparador                     shift and go to state 125

state 98

    (68) sentencia_Switch -> SWITCH LPAREN valor . RPAREN LBRACE caso RBRACE

    RPAREN          shift and go to state 130


state 99

    (81) ciclo_for -> FOR LPAREN declaracion . condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (28) condicion -> . valor Comparador valor
    (29) condicion -> . condicion conector condicion
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    condicion                      shift and go to state 131
    valor                          shift and go to state 97
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 100

    (61) declaracion -> tipo . VARIABLE EQUALS valor DOTCOMMA

    VARIABLE        shift and go to state 132


state 101

    (62) declaracion -> VAR . VARIABLE EQUALS valor DOTCOMMA

    VARIABLE        shift and go to state 133


state 102

    (33) funcion_Void -> VOID VARIABLE LPAREN . valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (41) valores -> . valor
    (42) valores -> . valor COMMA valores
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valores                        shift and go to state 134
    valor                          shift and go to state 52
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 103

    (22) impresion -> PRINT LPAREN valores RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 135


state 104

    (24) impresion -> PRINT LPAREN RPAREN DOTCOMMA .

    PRINT           reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    VAR             reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    RETURN          reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    MAP             reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    STRING          reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    INT             reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    SET             reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    LIST            reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    FINAL           reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    CONST           reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    DYNAMIC         reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    IF              reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    FOR             reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    VOID            reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    TRUE            reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    FALSE           reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    $end            reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    BREAK           reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)


state 105

    (23) impresion -> PRINT LPAREN operacion RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 136


state 106

    (42) valores -> valor COMMA valores .

    RPAREN          reduce using rule 42 (valores -> valor COMMA valores .)
    RBRACE          reduce using rule 42 (valores -> valor COMMA valores .)
    RBRACKET        reduce using rule 42 (valores -> valor COMMA valores .)


state 107

    (61) declaracion -> tipo VARIABLE EQUALS valor . DOTCOMMA

    DOTCOMMA        shift and go to state 137


state 108

    (71) funcion_flecha -> tipo VARIABLE LPAREN valores . RPAREN ARROWFUNCTION programa DOTCOMMA

    RPAREN          shift and go to state 138


state 109

    (72) funcion_flecha -> tipo VARIABLE LPAREN RPAREN . ARROWFUNCTION programa DOTCOMMA

    ARROWFUNCTION   shift and go to state 139


state 110

    (66) funcion -> VARIABLE LPAREN valores RPAREN .

    PRINT           reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    VAR             reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    COMMENTLINE     reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    COMMENTBLOCK    reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    RETURN          reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    MAP             reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    DOUBLE          reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    STRING          reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    INT             reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    SET             reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    LIST            reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    BOOLEAN         reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    FINAL           reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    CONST           reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    DYNAMIC         reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    VARIABLE        reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    NUMBER          reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    FLOAT           reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    CHAINCHAR       reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    IF              reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    SWITCH          reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    FOR             reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    VOID            reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    TRUE            reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    FALSE           reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    LPAREN          reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    $end            reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    RBRACE          reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    DOTCOMMA        reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)
    BREAK           reduce using rule 66 (funcion -> VARIABLE LPAREN valores RPAREN .)


state 111

    (67) funcion_Data -> VARIABLE DOT VARIABLE LPAREN . valores RPAREN DOTCOMMA
    (41) valores -> . valor
    (42) valores -> . valor COMMA valores
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valores                        shift and go to state 140
    valor                          shift and go to state 52
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 112

    (64) expresion -> LPAREN valor . operador expresion RPAREN
    (41) valores -> valor .
    (42) valores -> valor . COMMA valores
    (77) operador -> . PLUS
    (78) operador -> . MINUS
    (79) operador -> . TIMES
    (80) operador -> . DIVIDE

    RPAREN          reduce using rule 41 (valores -> valor .)
    COMMA           shift and go to state 79
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62

    operador                       shift and go to state 141

state 113

    (62) declaracion -> VAR VARIABLE EQUALS valor . DOTCOMMA

    DOTCOMMA        shift and go to state 142


state 114

    (86) funcion_Anonima -> VAR VARIABLE EQUALS tupla . LBRACE programa RBRACE DOTCOMMA
    (50) valor -> tupla .

    LBRACE          shift and go to state 143
    DOTCOMMA        reduce using rule 50 (valor -> tupla .)


state 115

    (88) diccionario -> MAP LANGLE tipo COMMA . tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC

    MAP             shift and go to state 88
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 90
    LIST            shift and go to state 91
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37

    tipo                           shift and go to state 144

state 116

    (73) Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto . DOTCOMMA

    DOTCOMMA        shift and go to state 145


state 117

    (75) cuerpo_conjunto -> LBRACE . valores RBRACE
    (76) cuerpo_conjunto -> LBRACE . RBRACE
    (41) valores -> . valor
    (42) valores -> . valor COMMA valores
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 147
    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valores                        shift and go to state 146
    valor                          shift and go to state 52
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 118

    (74) Conjunto -> SET LANGLE tipo RANGLE . VARIABLE EQUALS cuerpo_conjunto DOTCOMMA

    VARIABLE        shift and go to state 148


state 119

    (32) estructura_List -> LIST LANGLE tipo RANGLE . VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA

    VARIABLE        shift and go to state 149


state 120

    (87) funcion_Anonima -> tupla LBRACE programa RBRACE . DOTCOMMA

    DOTCOMMA        shift and go to state 150


state 121

    (25) sentencia_If -> IF LPAREN condicion RPAREN . LBRACE programa RBRACE else
    (26) sentencia_If -> IF LPAREN condicion RPAREN . LBRACE programa RBRACE

    LBRACE          shift and go to state 151


state 122

    (29) condicion -> condicion conector . condicion
    (28) condicion -> . valor Comparador valor
    (29) condicion -> . condicion conector condicion
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    condicion                      shift and go to state 152
    valor                          shift and go to state 97
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 123

    (30) conector -> AND .

    VARIABLE        reduce using rule 30 (conector -> AND .)
    NUMBER          reduce using rule 30 (conector -> AND .)
    FLOAT           reduce using rule 30 (conector -> AND .)
    CHAINCHAR       reduce using rule 30 (conector -> AND .)
    TRUE            reduce using rule 30 (conector -> AND .)
    FALSE           reduce using rule 30 (conector -> AND .)
    LPAREN          reduce using rule 30 (conector -> AND .)


state 124

    (31) conector -> OR .

    VARIABLE        reduce using rule 31 (conector -> OR .)
    NUMBER          reduce using rule 31 (conector -> OR .)
    FLOAT           reduce using rule 31 (conector -> OR .)
    CHAINCHAR       reduce using rule 31 (conector -> OR .)
    TRUE            reduce using rule 31 (conector -> OR .)
    FALSE           reduce using rule 31 (conector -> OR .)
    LPAREN          reduce using rule 31 (conector -> OR .)


state 125

    (28) condicion -> valor Comparador . valor
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valor                          shift and go to state 153
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 126

    (34) Comparador -> EQUALS . EQUALS

    EQUALS          shift and go to state 154


state 127

    (35) Comparador -> LANGLE .
    (37) Comparador -> LANGLE . EQUALS

    VARIABLE        reduce using rule 35 (Comparador -> LANGLE .)
    NUMBER          reduce using rule 35 (Comparador -> LANGLE .)
    FLOAT           reduce using rule 35 (Comparador -> LANGLE .)
    CHAINCHAR       reduce using rule 35 (Comparador -> LANGLE .)
    TRUE            reduce using rule 35 (Comparador -> LANGLE .)
    FALSE           reduce using rule 35 (Comparador -> LANGLE .)
    LPAREN          reduce using rule 35 (Comparador -> LANGLE .)
    EQUALS          shift and go to state 155


state 128

    (36) Comparador -> RANGLE .
    (38) Comparador -> RANGLE . EQUALS

    VARIABLE        reduce using rule 36 (Comparador -> RANGLE .)
    NUMBER          reduce using rule 36 (Comparador -> RANGLE .)
    FLOAT           reduce using rule 36 (Comparador -> RANGLE .)
    CHAINCHAR       reduce using rule 36 (Comparador -> RANGLE .)
    TRUE            reduce using rule 36 (Comparador -> RANGLE .)
    FALSE           reduce using rule 36 (Comparador -> RANGLE .)
    LPAREN          reduce using rule 36 (Comparador -> RANGLE .)
    EQUALS          shift and go to state 156


state 129

    (39) Comparador -> NEQ .

    VARIABLE        reduce using rule 39 (Comparador -> NEQ .)
    NUMBER          reduce using rule 39 (Comparador -> NEQ .)
    FLOAT           reduce using rule 39 (Comparador -> NEQ .)
    CHAINCHAR       reduce using rule 39 (Comparador -> NEQ .)
    TRUE            reduce using rule 39 (Comparador -> NEQ .)
    FALSE           reduce using rule 39 (Comparador -> NEQ .)
    LPAREN          reduce using rule 39 (Comparador -> NEQ .)


state 130

    (68) sentencia_Switch -> SWITCH LPAREN valor RPAREN . LBRACE caso RBRACE

    LBRACE          shift and go to state 157


state 131

    (81) ciclo_for -> FOR LPAREN declaracion condicion . DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (29) condicion -> condicion . conector condicion
    (30) conector -> . AND
    (31) conector -> . OR

    DOTCOMMA        shift and go to state 158
    AND             shift and go to state 123
    OR              shift and go to state 124

    conector                       shift and go to state 122

state 132

    (61) declaracion -> tipo VARIABLE . EQUALS valor DOTCOMMA

    EQUALS          shift and go to state 80


state 133

    (62) declaracion -> VAR VARIABLE . EQUALS valor DOTCOMMA

    EQUALS          shift and go to state 159


state 134

    (33) funcion_Void -> VOID VARIABLE LPAREN valores . RPAREN LBRACE programa RBRACE DOTCOMMA

    RPAREN          shift and go to state 160


state 135

    (22) impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .

    PRINT           reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    VAR             reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    RETURN          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    MAP             reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    STRING          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    INT             reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    SET             reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    LIST            reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    FINAL           reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    CONST           reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    DYNAMIC         reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    IF              reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    FOR             reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    VOID            reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    TRUE            reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    FALSE           reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    $end            reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    BREAK           reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)


state 136

    (23) impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .

    PRINT           reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    VAR             reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    RETURN          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    MAP             reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    STRING          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    INT             reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    SET             reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    LIST            reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    FINAL           reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    CONST           reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    DYNAMIC         reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    IF              reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    FOR             reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    VOID            reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    TRUE            reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    FALSE           reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    $end            reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    BREAK           reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)


state 137

    (61) declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .

    PRINT           reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    VAR             reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTLINE     reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    RETURN          reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    MAP             reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    DOUBLE          reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    STRING          reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    INT             reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    SET             reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    LIST            reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    BOOLEAN         reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    FINAL           reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    CONST           reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    DYNAMIC         reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    VARIABLE        reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    NUMBER          reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    FLOAT           reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    CHAINCHAR       reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    IF              reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    SWITCH          reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    FOR             reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    VOID            reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    TRUE            reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    FALSE           reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    LPAREN          reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    $end            reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    RBRACE          reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    DOTCOMMA        reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    BREAK           reduce using rule 61 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)


state 138

    (71) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN . ARROWFUNCTION programa DOTCOMMA

    ARROWFUNCTION   shift and go to state 161


state 139

    (72) funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION . programa DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    tipo                           shift and go to state 10
    programa                       shift and go to state 162
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 12
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 140

    (67) funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores . RPAREN DOTCOMMA

    RPAREN          shift and go to state 163


state 141

    (64) expresion -> LPAREN valor operador . expresion RPAREN
    (64) expresion -> . LPAREN valor operador expresion RPAREN
    (65) expresion -> . valor
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    LPAREN          shift and go to state 86
    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    valor                          shift and go to state 84
    expresion                      shift and go to state 164
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 142

    (62) declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .

    PRINT           reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    VAR             reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTLINE     reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    RETURN          reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    MAP             reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    DOUBLE          reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    STRING          reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    INT             reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    SET             reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    LIST            reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    BOOLEAN         reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    FINAL           reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    CONST           reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    DYNAMIC         reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    VARIABLE        reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    NUMBER          reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    FLOAT           reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    CHAINCHAR       reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    IF              reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    SWITCH          reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    FOR             reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    VOID            reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    TRUE            reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    FALSE           reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    LPAREN          reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    $end            reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    RBRACE          reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    DOTCOMMA        reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    BREAK           reduce using rule 62 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)


state 143

    (86) funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE . programa RBRACE DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    tupla                          shift and go to state 42
    programa                       shift and go to state 165
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 10
    valor                          shift and go to state 12
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41

state 144

    (88) diccionario -> MAP LANGLE tipo COMMA tipo . RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    RANGLE          shift and go to state 166


state 145

    (73) Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .

    PRINT           reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VAR             reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTLINE     reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    RETURN          reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    MAP             reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOUBLE          reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    STRING          reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    INT             reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SET             reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LIST            reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BOOLEAN         reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FINAL           reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    CONST           reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DYNAMIC         reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VARIABLE        reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    NUMBER          reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FLOAT           reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    CHAINCHAR       reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    IF              reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SWITCH          reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FOR             reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VOID            reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    TRUE            reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FALSE           reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LPAREN          reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    $end            reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    RBRACE          reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOTCOMMA        reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BREAK           reduce using rule 73 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)


state 146

    (75) cuerpo_conjunto -> LBRACE valores . RBRACE

    RBRACE          shift and go to state 167


state 147

    (76) cuerpo_conjunto -> LBRACE RBRACE .

    DOTCOMMA        reduce using rule 76 (cuerpo_conjunto -> LBRACE RBRACE .)


state 148

    (74) Conjunto -> SET LANGLE tipo RANGLE VARIABLE . EQUALS cuerpo_conjunto DOTCOMMA

    EQUALS          shift and go to state 168


state 149

    (32) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE . EQUALS LBRACKET valores RBRACKET DOTCOMMA

    EQUALS          shift and go to state 169


state 150

    (87) funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .

    PRINT           reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    VAR             reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTLINE     reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    RETURN          reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    MAP             reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    DOUBLE          reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    STRING          reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    INT             reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    SET             reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    LIST            reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    BOOLEAN         reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    FINAL           reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    CONST           reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    DYNAMIC         reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    VARIABLE        reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    NUMBER          reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    FLOAT           reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    CHAINCHAR       reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    IF              reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    SWITCH          reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    FOR             reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    VOID            reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    TRUE            reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    FALSE           reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    LPAREN          reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    $end            reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    RBRACE          reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    DOTCOMMA        reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    BREAK           reduce using rule 87 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)


state 151

    (25) sentencia_If -> IF LPAREN condicion RPAREN LBRACE . programa RBRACE else
    (26) sentencia_If -> IF LPAREN condicion RPAREN LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    programa                       shift and go to state 170
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 10
    valor                          shift and go to state 12
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 152

    (29) condicion -> condicion conector condicion .
    (29) condicion -> condicion . conector condicion
    (30) conector -> . AND
    (31) conector -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          reduce using rule 29 (condicion -> condicion conector condicion .)
    DOTCOMMA        reduce using rule 29 (condicion -> condicion conector condicion .)
    AND             shift and go to state 123
    OR              shift and go to state 124

  ! AND             [ reduce using rule 29 (condicion -> condicion conector condicion .) ]
  ! OR              [ reduce using rule 29 (condicion -> condicion conector condicion .) ]

    conector                       shift and go to state 122

state 153

    (28) condicion -> valor Comparador valor .

    RPAREN          reduce using rule 28 (condicion -> valor Comparador valor .)
    AND             reduce using rule 28 (condicion -> valor Comparador valor .)
    OR              reduce using rule 28 (condicion -> valor Comparador valor .)
    DOTCOMMA        reduce using rule 28 (condicion -> valor Comparador valor .)


state 154

    (34) Comparador -> EQUALS EQUALS .

    VARIABLE        reduce using rule 34 (Comparador -> EQUALS EQUALS .)
    NUMBER          reduce using rule 34 (Comparador -> EQUALS EQUALS .)
    FLOAT           reduce using rule 34 (Comparador -> EQUALS EQUALS .)
    CHAINCHAR       reduce using rule 34 (Comparador -> EQUALS EQUALS .)
    TRUE            reduce using rule 34 (Comparador -> EQUALS EQUALS .)
    FALSE           reduce using rule 34 (Comparador -> EQUALS EQUALS .)
    LPAREN          reduce using rule 34 (Comparador -> EQUALS EQUALS .)


state 155

    (37) Comparador -> LANGLE EQUALS .

    VARIABLE        reduce using rule 37 (Comparador -> LANGLE EQUALS .)
    NUMBER          reduce using rule 37 (Comparador -> LANGLE EQUALS .)
    FLOAT           reduce using rule 37 (Comparador -> LANGLE EQUALS .)
    CHAINCHAR       reduce using rule 37 (Comparador -> LANGLE EQUALS .)
    TRUE            reduce using rule 37 (Comparador -> LANGLE EQUALS .)
    FALSE           reduce using rule 37 (Comparador -> LANGLE EQUALS .)
    LPAREN          reduce using rule 37 (Comparador -> LANGLE EQUALS .)


state 156

    (38) Comparador -> RANGLE EQUALS .

    VARIABLE        reduce using rule 38 (Comparador -> RANGLE EQUALS .)
    NUMBER          reduce using rule 38 (Comparador -> RANGLE EQUALS .)
    FLOAT           reduce using rule 38 (Comparador -> RANGLE EQUALS .)
    CHAINCHAR       reduce using rule 38 (Comparador -> RANGLE EQUALS .)
    TRUE            reduce using rule 38 (Comparador -> RANGLE EQUALS .)
    FALSE           reduce using rule 38 (Comparador -> RANGLE EQUALS .)
    LPAREN          reduce using rule 38 (Comparador -> RANGLE EQUALS .)


state 157

    (68) sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE . caso RBRACE
    (69) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA caso
    (70) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA

    CASE            shift and go to state 172

    caso                           shift and go to state 171

state 158

    (81) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA . contador RPAREN LBRACE programa RBRACE
    (82) contador -> . VARIABLE PLUS PLUS
    (83) contador -> . VARIABLE PLUS EQUALS valor
    (84) contador -> . VARIABLE MINUS MINUS
    (85) contador -> . VARIABLE MINUS EQUALS valor

    VARIABLE        shift and go to state 174

    contador                       shift and go to state 173

state 159

    (62) declaracion -> VAR VARIABLE EQUALS . valor DOTCOMMA
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valor                          shift and go to state 113
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 160

    (33) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN . LBRACE programa RBRACE DOTCOMMA

    LBRACE          shift and go to state 175


state 161

    (71) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION . programa DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    tipo                           shift and go to state 10
    programa                       shift and go to state 176
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 12
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 162

    (72) funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa . DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    DOTCOMMA        shift and go to state 177
    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    tipo                           shift and go to state 10
    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 12
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 163

    (67) funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 178


state 164

    (64) expresion -> LPAREN valor operador expresion . RPAREN

    RPAREN          shift and go to state 179


state 165

    (86) funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa . RBRACE DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 180
    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    tupla                          shift and go to state 42
    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 10
    valor                          shift and go to state 12
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41

state 166

    (88) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE . VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    VARIABLE        shift and go to state 181


state 167

    (75) cuerpo_conjunto -> LBRACE valores RBRACE .

    DOTCOMMA        reduce using rule 75 (cuerpo_conjunto -> LBRACE valores RBRACE .)


state 168

    (74) Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS . cuerpo_conjunto DOTCOMMA
    (75) cuerpo_conjunto -> . LBRACE valores RBRACE
    (76) cuerpo_conjunto -> . LBRACE RBRACE

    LBRACE          shift and go to state 117

    cuerpo_conjunto                shift and go to state 182

state 169

    (32) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS . LBRACKET valores RBRACKET DOTCOMMA

    LBRACKET        shift and go to state 183


state 170

    (25) sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa . RBRACE else
    (26) sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 184
    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 10
    valor                          shift and go to state 12
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 171

    (68) sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso . RBRACE

    RBRACE          shift and go to state 185


state 172

    (69) caso -> CASE . valor TWODOTS programa BREAK DOTCOMMA caso
    (70) caso -> CASE . valor TWODOTS programa BREAK DOTCOMMA
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valor                          shift and go to state 186
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 173

    (81) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador . RPAREN LBRACE programa RBRACE

    RPAREN          shift and go to state 187


state 174

    (82) contador -> VARIABLE . PLUS PLUS
    (83) contador -> VARIABLE . PLUS EQUALS valor
    (84) contador -> VARIABLE . MINUS MINUS
    (85) contador -> VARIABLE . MINUS EQUALS valor

    PLUS            shift and go to state 188
    MINUS           shift and go to state 189


state 175

    (33) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE . programa RBRACE DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    programa                       shift and go to state 190
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 10
    valor                          shift and go to state 12
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 176

    (71) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa . DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    DOTCOMMA        shift and go to state 191
    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    tipo                           shift and go to state 10
    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 12
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 177

    (72) funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .

    PRINT           reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    VAR             reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    COMMENTLINE     reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    RETURN          reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    MAP             reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    DOUBLE          reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    STRING          reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    INT             reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    SET             reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    LIST            reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    BOOLEAN         reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FINAL           reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    CONST           reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    DYNAMIC         reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    VARIABLE        reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    NUMBER          reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FLOAT           reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    CHAINCHAR       reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    IF              reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    SWITCH          reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FOR             reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    VOID            reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    TRUE            reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FALSE           reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    LPAREN          reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    $end            reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    RBRACE          reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    DOTCOMMA        reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)
    BREAK           reduce using rule 72 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA .)


state 178

    (67) funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .

    PRINT           reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    VAR             reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    RETURN          reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    MAP             reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    STRING          reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    INT             reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    SET             reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    LIST            reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    FINAL           reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    CONST           reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    DYNAMIC         reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    IF              reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    FOR             reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    VOID            reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    TRUE            reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    FALSE           reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    $end            reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    BREAK           reduce using rule 67 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)


state 179

    (64) expresion -> LPAREN valor operador expresion RPAREN .

    PRINT           reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    VAR             reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    COMMENTLINE     reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    COMMENTBLOCK    reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    RETURN          reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    MAP             reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    DOUBLE          reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    STRING          reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    INT             reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    SET             reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    LIST            reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    BOOLEAN         reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    FINAL           reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    CONST           reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    DYNAMIC         reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    VARIABLE        reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    NUMBER          reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    FLOAT           reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    CHAINCHAR       reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    IF              reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    SWITCH          reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    FOR             reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    VOID            reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    TRUE            reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    FALSE           reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    LPAREN          reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    $end            reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    RPAREN          reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    RBRACE          reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    DOTCOMMA        reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)
    BREAK           reduce using rule 64 (expresion -> LPAREN valor operador expresion RPAREN .)


state 180

    (86) funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE . DOTCOMMA

    DOTCOMMA        shift and go to state 192


state 181

    (88) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE . EQUALS cuerpo_Diccionario DOTCOMMA

    EQUALS          shift and go to state 193


state 182

    (74) Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto . DOTCOMMA

    DOTCOMMA        shift and go to state 194


state 183

    (32) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET . valores RBRACKET DOTCOMMA
    (41) valores -> . valor
    (42) valores -> . valor COMMA valores
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valores                        shift and go to state 195
    valor                          shift and go to state 52
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 184

    (25) sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE . else
    (26) sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .
    (27) else -> . ELSE LBRACE programa RBRACE

    PRINT           reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    VAR             reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    RETURN          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    MAP             reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    STRING          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    INT             reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    SET             reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    LIST            reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    FINAL           reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    CONST           reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    DYNAMIC         reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    NUMBER          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    FLOAT           reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    IF              reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    SWITCH          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    FOR             reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    VOID            reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    TRUE            reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    FALSE           reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    LPAREN          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    $end            reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    RBRACE          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    BREAK           reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    ELSE            shift and go to state 197

    else                           shift and go to state 196

state 185

    (68) sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .

    PRINT           reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    VAR             reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    COMMENTLINE     reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    COMMENTBLOCK    reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    RETURN          reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    MAP             reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    DOUBLE          reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    STRING          reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    INT             reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    SET             reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    LIST            reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    BOOLEAN         reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    FINAL           reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    CONST           reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    DYNAMIC         reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    VARIABLE        reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    NUMBER          reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    FLOAT           reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    CHAINCHAR       reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    IF              reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    SWITCH          reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    FOR             reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    VOID            reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    TRUE            reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    FALSE           reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    LPAREN          reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    $end            reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    RBRACE          reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    DOTCOMMA        reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    BREAK           reduce using rule 68 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)


state 186

    (69) caso -> CASE valor . TWODOTS programa BREAK DOTCOMMA caso
    (70) caso -> CASE valor . TWODOTS programa BREAK DOTCOMMA

    TWODOTS         shift and go to state 198


state 187

    (81) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN . LBRACE programa RBRACE

    LBRACE          shift and go to state 199


state 188

    (82) contador -> VARIABLE PLUS . PLUS
    (83) contador -> VARIABLE PLUS . EQUALS valor

    PLUS            shift and go to state 200
    EQUALS          shift and go to state 201


state 189

    (84) contador -> VARIABLE MINUS . MINUS
    (85) contador -> VARIABLE MINUS . EQUALS valor

    MINUS           shift and go to state 202
    EQUALS          shift and go to state 203


state 190

    (33) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa . RBRACE DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 204
    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 10
    valor                          shift and go to state 12
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 191

    (71) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .

    PRINT           reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    VAR             reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    COMMENTLINE     reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    RETURN          reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    MAP             reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    DOUBLE          reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    STRING          reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    INT             reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    SET             reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    LIST            reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    BOOLEAN         reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FINAL           reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    CONST           reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    DYNAMIC         reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    VARIABLE        reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    NUMBER          reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FLOAT           reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    CHAINCHAR       reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    IF              reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    SWITCH          reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FOR             reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    VOID            reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    TRUE            reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FALSE           reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    LPAREN          reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    $end            reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    RBRACE          reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    DOTCOMMA        reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    BREAK           reduce using rule 71 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)


state 192

    (86) funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .

    PRINT           reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    VAR             reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTLINE     reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    RETURN          reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    MAP             reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    DOUBLE          reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    STRING          reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    INT             reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    SET             reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    LIST            reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    BOOLEAN         reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    FINAL           reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    CONST           reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    DYNAMIC         reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    VARIABLE        reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    NUMBER          reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    FLOAT           reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    CHAINCHAR       reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    IF              reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    SWITCH          reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    FOR             reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    VOID            reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    TRUE            reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    FALSE           reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    LPAREN          reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    $end            reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    RBRACE          reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    DOTCOMMA        reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    BREAK           reduce using rule 86 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)


state 193

    (88) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS . cuerpo_Diccionario DOTCOMMA
    (89) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (90) cuerpo_Diccionario -> . LBRACE RBRACE

    LBRACE          shift and go to state 206

    cuerpo_Diccionario             shift and go to state 205

state 194

    (74) Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .

    PRINT           reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VAR             reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTLINE     reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    RETURN          reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    MAP             reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOUBLE          reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    STRING          reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    INT             reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SET             reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LIST            reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BOOLEAN         reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FINAL           reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    CONST           reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DYNAMIC         reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VARIABLE        reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    NUMBER          reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FLOAT           reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    CHAINCHAR       reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    IF              reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SWITCH          reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FOR             reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VOID            reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    TRUE            reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FALSE           reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LPAREN          reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    $end            reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    RBRACE          reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOTCOMMA        reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BREAK           reduce using rule 74 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)


state 195

    (32) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores . RBRACKET DOTCOMMA

    RBRACKET        shift and go to state 207


state 196

    (25) sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .

    PRINT           reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    VAR             reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    COMMENTLINE     reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    COMMENTBLOCK    reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    RETURN          reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    MAP             reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    DOUBLE          reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    STRING          reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    INT             reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    SET             reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    LIST            reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    BOOLEAN         reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    FINAL           reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    CONST           reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    DYNAMIC         reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    VARIABLE        reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    NUMBER          reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    FLOAT           reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    CHAINCHAR       reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    IF              reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    SWITCH          reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    FOR             reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    VOID            reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    TRUE            reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    FALSE           reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    LPAREN          reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    $end            reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    RBRACE          reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    DOTCOMMA        reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    BREAK           reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)


state 197

    (27) else -> ELSE . LBRACE programa RBRACE

    LBRACE          shift and go to state 208


state 198

    (69) caso -> CASE valor TWODOTS . programa BREAK DOTCOMMA caso
    (70) caso -> CASE valor TWODOTS . programa BREAK DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valor                          shift and go to state 12
    programa                       shift and go to state 209
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 10
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 199

    (81) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    declaracion                    shift and go to state 4
    programa                       shift and go to state 210
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 10
    valor                          shift and go to state 12
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 200

    (82) contador -> VARIABLE PLUS PLUS .

    RPAREN          reduce using rule 82 (contador -> VARIABLE PLUS PLUS .)


state 201

    (83) contador -> VARIABLE PLUS EQUALS . valor
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valor                          shift and go to state 211
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 202

    (84) contador -> VARIABLE MINUS MINUS .

    RPAREN          reduce using rule 84 (contador -> VARIABLE MINUS MINUS .)


state 203

    (85) contador -> VARIABLE MINUS EQUALS . valor
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valor                          shift and go to state 212
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 204

    (33) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE . DOTCOMMA

    DOTCOMMA        shift and go to state 213


state 205

    (88) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario . DOTCOMMA

    DOTCOMMA        shift and go to state 214


state 206

    (89) cuerpo_Diccionario -> LBRACE . duplas RBRACE
    (90) cuerpo_Diccionario -> LBRACE . RBRACE
    (91) duplas -> . dupla
    (92) duplas -> . dupla COMMA duplas
    (93) dupla -> . valor TWODOTS valor
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 216
    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    duplas                         shift and go to state 215
    dupla                          shift and go to state 217
    valor                          shift and go to state 218
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 207

    (32) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET . DOTCOMMA

    DOTCOMMA        shift and go to state 219


state 208

    (27) else -> ELSE LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    programa                       shift and go to state 220
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 10
    valor                          shift and go to state 12
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 209

    (69) caso -> CASE valor TWODOTS programa . BREAK DOTCOMMA caso
    (70) caso -> CASE valor TWODOTS programa . BREAK DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    BREAK           shift and go to state 221
    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valor                          shift and go to state 12
    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 10
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 210

    (81) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 222
    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    declaracion                    shift and go to state 4
    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 10
    valor                          shift and go to state 12
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 211

    (83) contador -> VARIABLE PLUS EQUALS valor .

    RPAREN          reduce using rule 83 (contador -> VARIABLE PLUS EQUALS valor .)


state 212

    (85) contador -> VARIABLE MINUS EQUALS valor .

    RPAREN          reduce using rule 85 (contador -> VARIABLE MINUS EQUALS valor .)


state 213

    (33) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .

    PRINT           reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    VAR             reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    COMMENTLINE     reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    RETURN          reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    MAP             reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    DOUBLE          reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    STRING          reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    INT             reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    SET             reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    LIST            reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    BOOLEAN         reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    FINAL           reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    CONST           reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    DYNAMIC         reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    VARIABLE        reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    NUMBER          reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    FLOAT           reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    CHAINCHAR       reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    IF              reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    SWITCH          reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    FOR             reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    VOID            reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    TRUE            reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    FALSE           reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    LPAREN          reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    $end            reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    RBRACE          reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    DOTCOMMA        reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    BREAK           reduce using rule 33 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)


state 214

    (88) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .

    PRINT           reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    VAR             reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    COMMENTLINE     reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    RETURN          reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    MAP             reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    DOUBLE          reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    STRING          reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    INT             reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    SET             reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    LIST            reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    BOOLEAN         reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    FINAL           reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    CONST           reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    DYNAMIC         reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    VARIABLE        reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    NUMBER          reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    FLOAT           reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    CHAINCHAR       reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    IF              reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    SWITCH          reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    FOR             reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    VOID            reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    TRUE            reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    FALSE           reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    LPAREN          reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    $end            reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    RBRACE          reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    DOTCOMMA        reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    BREAK           reduce using rule 88 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)


state 215

    (89) cuerpo_Diccionario -> LBRACE duplas . RBRACE

    RBRACE          shift and go to state 223


state 216

    (90) cuerpo_Diccionario -> LBRACE RBRACE .

    DOTCOMMA        reduce using rule 90 (cuerpo_Diccionario -> LBRACE RBRACE .)


state 217

    (91) duplas -> dupla .
    (92) duplas -> dupla . COMMA duplas

    RBRACE          reduce using rule 91 (duplas -> dupla .)
    COMMA           shift and go to state 224


state 218

    (93) dupla -> valor . TWODOTS valor

    TWODOTS         shift and go to state 225


state 219

    (32) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .

    PRINT           reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    VAR             reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    COMMENTLINE     reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    RETURN          reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    MAP             reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    DOUBLE          reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    STRING          reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    INT             reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    SET             reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    LIST            reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    BOOLEAN         reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    FINAL           reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    CONST           reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    DYNAMIC         reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    VARIABLE        reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    NUMBER          reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    FLOAT           reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    CHAINCHAR       reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    IF              reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    SWITCH          reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    FOR             reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    VOID            reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    TRUE            reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    FALSE           reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    LPAREN          reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    $end            reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    RBRACE          reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    DOTCOMMA        reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    BREAK           reduce using rule 32 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)


state 220

    (27) else -> ELSE LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (61) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (62) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (63) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (8) estructuras_de_Control -> . sentencia_If
    (9) estructuras_de_Control -> . sentencia_Switch
    (10) estructuras_de_Control -> . ciclo_for
    (11) estructuras_de_Control -> . funcion_Anonima
    (12) estructuras_de_Control -> . diccionario
    (13) estructuras_de_Control -> . Conjunto
    (14) estructuras_de_Control -> . funcion_flecha
    (15) estructuras_de_Control -> . funcion_Void
    (16) estructuras_de_Control -> . funcion
    (17) estructuras_de_Control -> . funcion_Data
    (18) estructuras_de_Control -> . RETURN VARIABLE
    (19) estructuras_de_Control -> . estructura_List
    (51) tipo -> . MAP
    (52) tipo -> . DOUBLE
    (53) tipo -> . STRING
    (54) tipo -> . INT
    (55) tipo -> . SET
    (56) tipo -> . LIST
    (57) tipo -> . BOOLEAN
    (58) tipo -> . FINAL
    (59) tipo -> . CONST
    (60) tipo -> . DYNAMIC
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (68) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (81) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (86) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (87) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (88) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (73) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (74) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (71) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (72) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION programa DOTCOMMA
    (33) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (66) funcion -> . VARIABLE LPAREN valores RPAREN
    (67) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (32) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 226
    PRINT           shift and go to state 8
    VAR             shift and go to state 13
    COMMENTLINE     shift and go to state 14
    COMMENTBLOCK    shift and go to state 15
    RETURN          shift and go to state 26
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    FINAL           shift and go to state 35
    CONST           shift and go to state 36
    DYNAMIC         shift and go to state 37
    VARIABLE        shift and go to state 11
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    IF              shift and go to state 43
    SWITCH          shift and go to state 44
    FOR             shift and go to state 45
    VOID            shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    cuerpo                         shift and go to state 49
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 10
    valor                          shift and go to state 12
    sentencia_If                   shift and go to state 16
    sentencia_Switch               shift and go to state 17
    ciclo_for                      shift and go to state 18
    funcion_Anonima                shift and go to state 19
    diccionario                    shift and go to state 20
    Conjunto                       shift and go to state 21
    funcion_flecha                 shift and go to state 22
    funcion_Void                   shift and go to state 23
    funcion                        shift and go to state 24
    funcion_Data                   shift and go to state 25
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 41
    tupla                          shift and go to state 42

state 221

    (69) caso -> CASE valor TWODOTS programa BREAK . DOTCOMMA caso
    (70) caso -> CASE valor TWODOTS programa BREAK . DOTCOMMA

    DOTCOMMA        shift and go to state 227


state 222

    (81) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .

    PRINT           reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    VAR             reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    RETURN          reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    MAP             reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    STRING          reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    INT             reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    SET             reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    LIST            reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    FINAL           reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    CONST           reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    DYNAMIC         reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    NUMBER          reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    FLOAT           reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    IF              reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    SWITCH          reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    FOR             reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    VOID            reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    TRUE            reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    FALSE           reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    LPAREN          reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    $end            reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    RBRACE          reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    BREAK           reduce using rule 81 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)


state 223

    (89) cuerpo_Diccionario -> LBRACE duplas RBRACE .

    DOTCOMMA        reduce using rule 89 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)


state 224

    (92) duplas -> dupla COMMA . duplas
    (91) duplas -> . dupla
    (92) duplas -> . dupla COMMA duplas
    (93) dupla -> . valor TWODOTS valor
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    dupla                          shift and go to state 217
    duplas                         shift and go to state 228
    valor                          shift and go to state 218
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 225

    (93) dupla -> valor TWODOTS . valor
    (45) valor -> . VARIABLE
    (46) valor -> . NUMBER
    (47) valor -> . FLOAT
    (48) valor -> . CHAINCHAR
    (49) valor -> . Bool
    (50) valor -> . tupla
    (43) Bool -> . TRUE
    (44) Bool -> . FALSE
    (40) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 53
    NUMBER          shift and go to state 38
    FLOAT           shift and go to state 39
    CHAINCHAR       shift and go to state 40
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LPAREN          shift and go to state 9

    valor                          shift and go to state 229
    Bool                           shift and go to state 41
    tupla                          shift and go to state 54

state 226

    (27) else -> ELSE LBRACE programa RBRACE .

    PRINT           reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    VAR             reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    RETURN          reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    MAP             reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    STRING          reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    INT             reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    SET             reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    LIST            reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    FINAL           reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    CONST           reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    DYNAMIC         reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    NUMBER          reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    FLOAT           reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    IF              reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    SWITCH          reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    FOR             reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    VOID            reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    TRUE            reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    FALSE           reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    LPAREN          reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    $end            reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    RBRACE          reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    BREAK           reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)


state 227

    (69) caso -> CASE valor TWODOTS programa BREAK DOTCOMMA . caso
    (70) caso -> CASE valor TWODOTS programa BREAK DOTCOMMA .
    (69) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA caso
    (70) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA

    RBRACE          reduce using rule 70 (caso -> CASE valor TWODOTS programa BREAK DOTCOMMA .)
    CASE            shift and go to state 172

    caso                           shift and go to state 230

state 228

    (92) duplas -> dupla COMMA duplas .

    RBRACE          reduce using rule 92 (duplas -> dupla COMMA duplas .)


state 229

    (93) dupla -> valor TWODOTS valor .

    COMMA           reduce using rule 93 (dupla -> valor TWODOTS valor .)
    RBRACE          reduce using rule 93 (dupla -> valor TWODOTS valor .)


state 230

    (69) caso -> CASE valor TWODOTS programa BREAK DOTCOMMA caso .

    RBRACE          reduce using rule 69 (caso -> CASE valor TWODOTS programa BREAK DOTCOMMA caso .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 32 resolved as shift
WARNING: shift/reduce conflict for AND in state 152 resolved as shift
WARNING: shift/reduce conflict for OR in state 152 resolved as shift
