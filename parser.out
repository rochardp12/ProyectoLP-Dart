Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> cuerpo
Rule 2     programa -> programa cuerpo
Rule 3     cuerpo -> impresion
Rule 4     cuerpo -> declaracion
Rule 5     cuerpo -> operacion
Rule 6     cuerpo -> comentario
Rule 7     cuerpo -> estructuras_de_Control
Rule 8     cuerpo -> return
Rule 9     estructuras_de_Control -> sentencia_If
Rule 10    estructuras_de_Control -> sentencia_Switch
Rule 11    estructuras_de_Control -> ciclo_for
Rule 12    estructuras_de_Control -> funcion_Anonima
Rule 13    estructuras_de_Control -> diccionario
Rule 14    estructuras_de_Control -> Conjunto
Rule 15    estructuras_de_Control -> funcion_flecha
Rule 16    estructuras_de_Control -> funcion_Void
Rule 17    estructuras_de_Control -> funcion
Rule 18    estructuras_de_Control -> funcion_Data
Rule 19    estructuras_de_Control -> estructura_List
Rule 20    estructuras_de_Control -> estructura_tupla
Rule 21    comentario -> COMMENTLINE
Rule 22    comentario -> COMMENTBLOCK
Rule 23    impresion -> PRINT LPAREN valores RPAREN DOTCOMMA
Rule 24    impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
Rule 25    impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA
Rule 26    impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA
Rule 27    impresion -> PRINT LPAREN RPAREN DOTCOMMA
Rule 28    sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
Rule 29    sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE
Rule 30    else -> ELSE LBRACE programa RBRACE
Rule 31    condicion -> valor Comparador valor
Rule 32    condiciones -> condicion
Rule 33    condiciones -> condicion conector condiciones
Rule 34    condiciones -> Bool
Rule 35    conector -> AND
Rule 36    conector -> OR
Rule 37    estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
Rule 38    lista -> LBRACKET valores RBRACKET
Rule 39    funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
Rule 40    funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
Rule 41    funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
Rule 42    return -> RETURN valor DOTCOMMA
Rule 43    Comparador -> EQUALS EQUALS
Rule 44    Comparador -> LANGLE
Rule 45    Comparador -> RANGLE
Rule 46    Comparador -> LANGLE EQUALS
Rule 47    Comparador -> RANGLE EQUALS
Rule 48    Comparador -> NEQ
Rule 49    estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
Rule 50    tupla -> LPAREN valores RPAREN
Rule 51    valores -> valor
Rule 52    valores -> valor COMMA valores
Rule 53    Bool -> TRUE
Rule 54    Bool -> FALSE
Rule 55    valor -> variable
Rule 56    valor -> NUMBER
Rule 57    valor -> FLOAT
Rule 58    valor -> CHAINCHAR
Rule 59    valor -> Bool
Rule 60    valor -> tupla
Rule 61    valor -> lista
Rule 62    valor -> cuerpo_conjunto
Rule 63    valor -> cuerpo_Diccionario
Rule 64    variables -> variable
Rule 65    variables -> variable COMMA variables
Rule 66    variable -> DOLLAR VARIABLE
Rule 67    variable -> tipo VARIABLE
Rule 68    tipo -> MAP
Rule 69    tipo -> DOUBLE
Rule 70    tipo -> STRING
Rule 71    tipo -> INT
Rule 72    tipo -> SET
Rule 73    tipo -> LIST
Rule 74    tipo -> BOOLEAN
Rule 75    tipo -> TUPLE
Rule 76    tipo -> VAR
Rule 77    declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA
Rule 78    operacion -> valor operador expresion
Rule 79    expresion -> LPAREN valor operador expresion RPAREN
Rule 80    expresion -> valor
Rule 81    funcion -> VARIABLE LPAREN valores RPAREN
Rule 82    funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
Rule 83    sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
Rule 84    caso -> CASE valor TWODOTS programa BREAK DOTCOMMA caso
Rule 85    caso -> CASE valor TWODOTS programa BREAK DOTCOMMA
Rule 86    funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
Rule 87    funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
Rule 88    Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
Rule 89    Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
Rule 90    cuerpo_conjunto -> LBRACE valores RBRACE
Rule 91    cuerpo_conjunto -> LBRACE RBRACE
Rule 92    operador -> PLUS
Rule 93    operador -> MINUS
Rule 94    operador -> TIMES
Rule 95    operador -> DIVIDE
Rule 96    ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
Rule 97    contador -> variable PLUS PLUS
Rule 98    contador -> variable PLUS EQUALS valor
Rule 99    contador -> variable MINUS MINUS
Rule 100   contador -> variable MINUS EQUALS valor
Rule 101   funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
Rule 102   funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA
Rule 103   diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
Rule 104   cuerpo_Diccionario -> LBRACE duplas RBRACE
Rule 105   cuerpo_Diccionario -> LBRACE RBRACE
Rule 106   duplas -> dupla
Rule 107   duplas -> dupla COMMA duplas
Rule 108   dupla -> valor TWODOTS valor

Terminals, with rules where they appear

AND                  : 35
ARROWFUNCTION        : 86 87
BOOLEAN              : 74
BREAK                : 84 85
CASE                 : 84 85
CHAINCHAR            : 24 58
COMMA                : 52 65 103 107
COMMENTBLOCK         : 22
COMMENTLINE          : 21
DIVIDE               : 95
DOLLAR               : 66
DOT                  : 82
DOTCOMMA             : 23 24 25 26 27 37 42 49 77 82 84 85 86 87 88 89 96 101 102 103
DOUBLE               : 69
ELSE                 : 30
EQUALS               : 37 43 43 46 47 49 77 88 89 98 100 101 103
FALSE                : 54
FLOAT                : 57
FOR                  : 96
IF                   : 28 29
INT                  : 71
LANGLE               : 37 44 46 49 89 103
LBRACE               : 28 29 30 39 40 41 83 90 91 96 101 102 104 105
LBRACKET             : 38
LIST                 : 37 73
LPAREN               : 23 24 25 26 27 28 29 39 40 41 50 79 81 82 83 86 87 96
MAIN                 : 41
MAP                  : 68 103
MINUS                : 93 99 99 100
NEQ                  : 48
NUMBER               : 56
OR                   : 36
PLUS                 : 92 97 97 98
PRINT                : 23 24 25 26 27
RANGLE               : 37 45 47 49 89 103
RBRACE               : 28 29 30 39 40 41 83 90 91 96 101 102 104 105
RBRACKET             : 38
RETURN               : 42
RPAREN               : 23 24 25 26 27 28 29 39 40 41 50 79 81 82 83 86 87 96
SET                  : 72 88 89
STRING               : 70
SWITCH               : 83
TIMES                : 94
TRUE                 : 53
TUPLE                : 49 75
TWODOTS              : 84 85 108
VAR                  : 76
VARIABLE             : 37 39 40 49 66 67 77 81 82 82 86 87 88 89 101 103
VOID                 : 39 40 41
error                : 

Nonterminals, with rules where they appear

Bool                 : 34 59
Comparador           : 31
Conjunto             : 14
caso                 : 83 84
ciclo_for            : 11
comentario           : 6
condicion            : 32 33 96
condiciones          : 26 28 29 33
conector             : 33
contador             : 96
cuerpo               : 1 2 86 87
cuerpo_Diccionario   : 63 103
cuerpo_conjunto      : 62 88 89
declaracion          : 4 96
diccionario          : 13
dupla                : 106 107
duplas               : 104 107
else                 : 28
estructura_List      : 19
estructura_tupla     : 20
estructuras_de_Control : 7
expresion            : 78 79
funcion              : 17
funcion_Anonima      : 12
funcion_Data         : 18
funcion_Void         : 16
funcion_flecha       : 15
impresion            : 3
lista                : 37 61
operacion            : 5 25
operador             : 78 79
programa             : 2 28 29 30 39 40 41 84 85 96 101 102 0
return               : 8
sentencia_If         : 9
sentencia_Switch     : 10
tipo                 : 37 49 67 77 86 87 89 101 103 103
tupla                : 49 60 101 102
valor                : 31 31 42 51 52 77 78 79 80 83 84 85 98 100 108 108
valores              : 23 38 39 50 52 81 82 86 90
variable             : 55 64 65 97 98 99 100
variables            : 65

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    programa                       shift and go to state 1
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 1

    (0) S' -> programa .
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    cuerpo                         shift and go to state 56
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 2

    (1) programa -> cuerpo .

    PRINT           reduce using rule 1 (programa -> cuerpo .)
    COMMENTLINE     reduce using rule 1 (programa -> cuerpo .)
    COMMENTBLOCK    reduce using rule 1 (programa -> cuerpo .)
    RETURN          reduce using rule 1 (programa -> cuerpo .)
    MAP             reduce using rule 1 (programa -> cuerpo .)
    DOUBLE          reduce using rule 1 (programa -> cuerpo .)
    STRING          reduce using rule 1 (programa -> cuerpo .)
    INT             reduce using rule 1 (programa -> cuerpo .)
    SET             reduce using rule 1 (programa -> cuerpo .)
    LIST            reduce using rule 1 (programa -> cuerpo .)
    BOOLEAN         reduce using rule 1 (programa -> cuerpo .)
    TUPLE           reduce using rule 1 (programa -> cuerpo .)
    VAR             reduce using rule 1 (programa -> cuerpo .)
    NUMBER          reduce using rule 1 (programa -> cuerpo .)
    FLOAT           reduce using rule 1 (programa -> cuerpo .)
    CHAINCHAR       reduce using rule 1 (programa -> cuerpo .)
    IF              reduce using rule 1 (programa -> cuerpo .)
    SWITCH          reduce using rule 1 (programa -> cuerpo .)
    FOR             reduce using rule 1 (programa -> cuerpo .)
    VOID            reduce using rule 1 (programa -> cuerpo .)
    VARIABLE        reduce using rule 1 (programa -> cuerpo .)
    DOLLAR          reduce using rule 1 (programa -> cuerpo .)
    TRUE            reduce using rule 1 (programa -> cuerpo .)
    FALSE           reduce using rule 1 (programa -> cuerpo .)
    LPAREN          reduce using rule 1 (programa -> cuerpo .)
    LBRACKET        reduce using rule 1 (programa -> cuerpo .)
    LBRACE          reduce using rule 1 (programa -> cuerpo .)
    $end            reduce using rule 1 (programa -> cuerpo .)
    RBRACE          reduce using rule 1 (programa -> cuerpo .)
    BREAK           reduce using rule 1 (programa -> cuerpo .)


state 3

    (3) cuerpo -> impresion .

    PRINT           reduce using rule 3 (cuerpo -> impresion .)
    COMMENTLINE     reduce using rule 3 (cuerpo -> impresion .)
    COMMENTBLOCK    reduce using rule 3 (cuerpo -> impresion .)
    RETURN          reduce using rule 3 (cuerpo -> impresion .)
    MAP             reduce using rule 3 (cuerpo -> impresion .)
    DOUBLE          reduce using rule 3 (cuerpo -> impresion .)
    STRING          reduce using rule 3 (cuerpo -> impresion .)
    INT             reduce using rule 3 (cuerpo -> impresion .)
    SET             reduce using rule 3 (cuerpo -> impresion .)
    LIST            reduce using rule 3 (cuerpo -> impresion .)
    BOOLEAN         reduce using rule 3 (cuerpo -> impresion .)
    TUPLE           reduce using rule 3 (cuerpo -> impresion .)
    VAR             reduce using rule 3 (cuerpo -> impresion .)
    NUMBER          reduce using rule 3 (cuerpo -> impresion .)
    FLOAT           reduce using rule 3 (cuerpo -> impresion .)
    CHAINCHAR       reduce using rule 3 (cuerpo -> impresion .)
    IF              reduce using rule 3 (cuerpo -> impresion .)
    SWITCH          reduce using rule 3 (cuerpo -> impresion .)
    FOR             reduce using rule 3 (cuerpo -> impresion .)
    VOID            reduce using rule 3 (cuerpo -> impresion .)
    VARIABLE        reduce using rule 3 (cuerpo -> impresion .)
    DOLLAR          reduce using rule 3 (cuerpo -> impresion .)
    TRUE            reduce using rule 3 (cuerpo -> impresion .)
    FALSE           reduce using rule 3 (cuerpo -> impresion .)
    LPAREN          reduce using rule 3 (cuerpo -> impresion .)
    LBRACKET        reduce using rule 3 (cuerpo -> impresion .)
    LBRACE          reduce using rule 3 (cuerpo -> impresion .)
    $end            reduce using rule 3 (cuerpo -> impresion .)
    RBRACE          reduce using rule 3 (cuerpo -> impresion .)
    DOTCOMMA        reduce using rule 3 (cuerpo -> impresion .)
    BREAK           reduce using rule 3 (cuerpo -> impresion .)


state 4

    (4) cuerpo -> declaracion .

    PRINT           reduce using rule 4 (cuerpo -> declaracion .)
    COMMENTLINE     reduce using rule 4 (cuerpo -> declaracion .)
    COMMENTBLOCK    reduce using rule 4 (cuerpo -> declaracion .)
    RETURN          reduce using rule 4 (cuerpo -> declaracion .)
    MAP             reduce using rule 4 (cuerpo -> declaracion .)
    DOUBLE          reduce using rule 4 (cuerpo -> declaracion .)
    STRING          reduce using rule 4 (cuerpo -> declaracion .)
    INT             reduce using rule 4 (cuerpo -> declaracion .)
    SET             reduce using rule 4 (cuerpo -> declaracion .)
    LIST            reduce using rule 4 (cuerpo -> declaracion .)
    BOOLEAN         reduce using rule 4 (cuerpo -> declaracion .)
    TUPLE           reduce using rule 4 (cuerpo -> declaracion .)
    VAR             reduce using rule 4 (cuerpo -> declaracion .)
    NUMBER          reduce using rule 4 (cuerpo -> declaracion .)
    FLOAT           reduce using rule 4 (cuerpo -> declaracion .)
    CHAINCHAR       reduce using rule 4 (cuerpo -> declaracion .)
    IF              reduce using rule 4 (cuerpo -> declaracion .)
    SWITCH          reduce using rule 4 (cuerpo -> declaracion .)
    FOR             reduce using rule 4 (cuerpo -> declaracion .)
    VOID            reduce using rule 4 (cuerpo -> declaracion .)
    VARIABLE        reduce using rule 4 (cuerpo -> declaracion .)
    DOLLAR          reduce using rule 4 (cuerpo -> declaracion .)
    TRUE            reduce using rule 4 (cuerpo -> declaracion .)
    FALSE           reduce using rule 4 (cuerpo -> declaracion .)
    LPAREN          reduce using rule 4 (cuerpo -> declaracion .)
    LBRACKET        reduce using rule 4 (cuerpo -> declaracion .)
    LBRACE          reduce using rule 4 (cuerpo -> declaracion .)
    $end            reduce using rule 4 (cuerpo -> declaracion .)
    RBRACE          reduce using rule 4 (cuerpo -> declaracion .)
    DOTCOMMA        reduce using rule 4 (cuerpo -> declaracion .)
    BREAK           reduce using rule 4 (cuerpo -> declaracion .)


state 5

    (5) cuerpo -> operacion .

    PRINT           reduce using rule 5 (cuerpo -> operacion .)
    COMMENTLINE     reduce using rule 5 (cuerpo -> operacion .)
    COMMENTBLOCK    reduce using rule 5 (cuerpo -> operacion .)
    RETURN          reduce using rule 5 (cuerpo -> operacion .)
    MAP             reduce using rule 5 (cuerpo -> operacion .)
    DOUBLE          reduce using rule 5 (cuerpo -> operacion .)
    STRING          reduce using rule 5 (cuerpo -> operacion .)
    INT             reduce using rule 5 (cuerpo -> operacion .)
    SET             reduce using rule 5 (cuerpo -> operacion .)
    LIST            reduce using rule 5 (cuerpo -> operacion .)
    BOOLEAN         reduce using rule 5 (cuerpo -> operacion .)
    TUPLE           reduce using rule 5 (cuerpo -> operacion .)
    VAR             reduce using rule 5 (cuerpo -> operacion .)
    NUMBER          reduce using rule 5 (cuerpo -> operacion .)
    FLOAT           reduce using rule 5 (cuerpo -> operacion .)
    CHAINCHAR       reduce using rule 5 (cuerpo -> operacion .)
    IF              reduce using rule 5 (cuerpo -> operacion .)
    SWITCH          reduce using rule 5 (cuerpo -> operacion .)
    FOR             reduce using rule 5 (cuerpo -> operacion .)
    VOID            reduce using rule 5 (cuerpo -> operacion .)
    VARIABLE        reduce using rule 5 (cuerpo -> operacion .)
    DOLLAR          reduce using rule 5 (cuerpo -> operacion .)
    TRUE            reduce using rule 5 (cuerpo -> operacion .)
    FALSE           reduce using rule 5 (cuerpo -> operacion .)
    LPAREN          reduce using rule 5 (cuerpo -> operacion .)
    LBRACKET        reduce using rule 5 (cuerpo -> operacion .)
    LBRACE          reduce using rule 5 (cuerpo -> operacion .)
    $end            reduce using rule 5 (cuerpo -> operacion .)
    RBRACE          reduce using rule 5 (cuerpo -> operacion .)
    DOTCOMMA        reduce using rule 5 (cuerpo -> operacion .)
    BREAK           reduce using rule 5 (cuerpo -> operacion .)


state 6

    (6) cuerpo -> comentario .

    PRINT           reduce using rule 6 (cuerpo -> comentario .)
    COMMENTLINE     reduce using rule 6 (cuerpo -> comentario .)
    COMMENTBLOCK    reduce using rule 6 (cuerpo -> comentario .)
    RETURN          reduce using rule 6 (cuerpo -> comentario .)
    MAP             reduce using rule 6 (cuerpo -> comentario .)
    DOUBLE          reduce using rule 6 (cuerpo -> comentario .)
    STRING          reduce using rule 6 (cuerpo -> comentario .)
    INT             reduce using rule 6 (cuerpo -> comentario .)
    SET             reduce using rule 6 (cuerpo -> comentario .)
    LIST            reduce using rule 6 (cuerpo -> comentario .)
    BOOLEAN         reduce using rule 6 (cuerpo -> comentario .)
    TUPLE           reduce using rule 6 (cuerpo -> comentario .)
    VAR             reduce using rule 6 (cuerpo -> comentario .)
    NUMBER          reduce using rule 6 (cuerpo -> comentario .)
    FLOAT           reduce using rule 6 (cuerpo -> comentario .)
    CHAINCHAR       reduce using rule 6 (cuerpo -> comentario .)
    IF              reduce using rule 6 (cuerpo -> comentario .)
    SWITCH          reduce using rule 6 (cuerpo -> comentario .)
    FOR             reduce using rule 6 (cuerpo -> comentario .)
    VOID            reduce using rule 6 (cuerpo -> comentario .)
    VARIABLE        reduce using rule 6 (cuerpo -> comentario .)
    DOLLAR          reduce using rule 6 (cuerpo -> comentario .)
    TRUE            reduce using rule 6 (cuerpo -> comentario .)
    FALSE           reduce using rule 6 (cuerpo -> comentario .)
    LPAREN          reduce using rule 6 (cuerpo -> comentario .)
    LBRACKET        reduce using rule 6 (cuerpo -> comentario .)
    LBRACE          reduce using rule 6 (cuerpo -> comentario .)
    $end            reduce using rule 6 (cuerpo -> comentario .)
    RBRACE          reduce using rule 6 (cuerpo -> comentario .)
    DOTCOMMA        reduce using rule 6 (cuerpo -> comentario .)
    BREAK           reduce using rule 6 (cuerpo -> comentario .)


state 7

    (7) cuerpo -> estructuras_de_Control .

    PRINT           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    COMMENTLINE     reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    COMMENTBLOCK    reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    RETURN          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    MAP             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    DOUBLE          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    STRING          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    INT             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    SET             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    LIST            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    BOOLEAN         reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    TUPLE           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    VAR             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    NUMBER          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    FLOAT           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    CHAINCHAR       reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    IF              reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    SWITCH          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    FOR             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    VOID            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    VARIABLE        reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    DOLLAR          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    TRUE            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    FALSE           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    LPAREN          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    LBRACKET        reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    LBRACE          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    $end            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    RBRACE          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    DOTCOMMA        reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    BREAK           reduce using rule 7 (cuerpo -> estructuras_de_Control .)


state 8

    (8) cuerpo -> return .

    PRINT           reduce using rule 8 (cuerpo -> return .)
    COMMENTLINE     reduce using rule 8 (cuerpo -> return .)
    COMMENTBLOCK    reduce using rule 8 (cuerpo -> return .)
    RETURN          reduce using rule 8 (cuerpo -> return .)
    MAP             reduce using rule 8 (cuerpo -> return .)
    DOUBLE          reduce using rule 8 (cuerpo -> return .)
    STRING          reduce using rule 8 (cuerpo -> return .)
    INT             reduce using rule 8 (cuerpo -> return .)
    SET             reduce using rule 8 (cuerpo -> return .)
    LIST            reduce using rule 8 (cuerpo -> return .)
    BOOLEAN         reduce using rule 8 (cuerpo -> return .)
    TUPLE           reduce using rule 8 (cuerpo -> return .)
    VAR             reduce using rule 8 (cuerpo -> return .)
    NUMBER          reduce using rule 8 (cuerpo -> return .)
    FLOAT           reduce using rule 8 (cuerpo -> return .)
    CHAINCHAR       reduce using rule 8 (cuerpo -> return .)
    IF              reduce using rule 8 (cuerpo -> return .)
    SWITCH          reduce using rule 8 (cuerpo -> return .)
    FOR             reduce using rule 8 (cuerpo -> return .)
    VOID            reduce using rule 8 (cuerpo -> return .)
    VARIABLE        reduce using rule 8 (cuerpo -> return .)
    DOLLAR          reduce using rule 8 (cuerpo -> return .)
    TRUE            reduce using rule 8 (cuerpo -> return .)
    FALSE           reduce using rule 8 (cuerpo -> return .)
    LPAREN          reduce using rule 8 (cuerpo -> return .)
    LBRACKET        reduce using rule 8 (cuerpo -> return .)
    LBRACE          reduce using rule 8 (cuerpo -> return .)
    $end            reduce using rule 8 (cuerpo -> return .)
    RBRACE          reduce using rule 8 (cuerpo -> return .)
    DOTCOMMA        reduce using rule 8 (cuerpo -> return .)
    BREAK           reduce using rule 8 (cuerpo -> return .)


state 9

    (23) impresion -> PRINT . LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> PRINT . LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> PRINT . LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> PRINT . LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> PRINT . LPAREN RPAREN DOTCOMMA

    LPAREN          shift and go to state 57


state 10

    (50) tupla -> LPAREN . valores RPAREN
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    valores                        shift and go to state 58
    valor                          shift and go to state 59
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 11

    (58) valor -> CHAINCHAR .

    PLUS            reduce using rule 58 (valor -> CHAINCHAR .)
    MINUS           reduce using rule 58 (valor -> CHAINCHAR .)
    TIMES           reduce using rule 58 (valor -> CHAINCHAR .)
    DIVIDE          reduce using rule 58 (valor -> CHAINCHAR .)
    COMMA           reduce using rule 58 (valor -> CHAINCHAR .)
    RPAREN          reduce using rule 58 (valor -> CHAINCHAR .)
    DOTCOMMA        reduce using rule 58 (valor -> CHAINCHAR .)
    TWODOTS         reduce using rule 58 (valor -> CHAINCHAR .)
    RBRACE          reduce using rule 58 (valor -> CHAINCHAR .)
    RBRACKET        reduce using rule 58 (valor -> CHAINCHAR .)
    PRINT           reduce using rule 58 (valor -> CHAINCHAR .)
    COMMENTLINE     reduce using rule 58 (valor -> CHAINCHAR .)
    COMMENTBLOCK    reduce using rule 58 (valor -> CHAINCHAR .)
    RETURN          reduce using rule 58 (valor -> CHAINCHAR .)
    MAP             reduce using rule 58 (valor -> CHAINCHAR .)
    DOUBLE          reduce using rule 58 (valor -> CHAINCHAR .)
    STRING          reduce using rule 58 (valor -> CHAINCHAR .)
    INT             reduce using rule 58 (valor -> CHAINCHAR .)
    SET             reduce using rule 58 (valor -> CHAINCHAR .)
    LIST            reduce using rule 58 (valor -> CHAINCHAR .)
    BOOLEAN         reduce using rule 58 (valor -> CHAINCHAR .)
    TUPLE           reduce using rule 58 (valor -> CHAINCHAR .)
    VAR             reduce using rule 58 (valor -> CHAINCHAR .)
    NUMBER          reduce using rule 58 (valor -> CHAINCHAR .)
    FLOAT           reduce using rule 58 (valor -> CHAINCHAR .)
    CHAINCHAR       reduce using rule 58 (valor -> CHAINCHAR .)
    IF              reduce using rule 58 (valor -> CHAINCHAR .)
    SWITCH          reduce using rule 58 (valor -> CHAINCHAR .)
    FOR             reduce using rule 58 (valor -> CHAINCHAR .)
    VOID            reduce using rule 58 (valor -> CHAINCHAR .)
    VARIABLE        reduce using rule 58 (valor -> CHAINCHAR .)
    DOLLAR          reduce using rule 58 (valor -> CHAINCHAR .)
    TRUE            reduce using rule 58 (valor -> CHAINCHAR .)
    FALSE           reduce using rule 58 (valor -> CHAINCHAR .)
    LPAREN          reduce using rule 58 (valor -> CHAINCHAR .)
    LBRACKET        reduce using rule 58 (valor -> CHAINCHAR .)
    LBRACE          reduce using rule 58 (valor -> CHAINCHAR .)
    $end            reduce using rule 58 (valor -> CHAINCHAR .)
    BREAK           reduce using rule 58 (valor -> CHAINCHAR .)
    EQUALS          reduce using rule 58 (valor -> CHAINCHAR .)
    LANGLE          reduce using rule 58 (valor -> CHAINCHAR .)
    RANGLE          reduce using rule 58 (valor -> CHAINCHAR .)
    NEQ             reduce using rule 58 (valor -> CHAINCHAR .)
    AND             reduce using rule 58 (valor -> CHAINCHAR .)
    OR              reduce using rule 58 (valor -> CHAINCHAR .)


state 12

    (77) declaracion -> tipo . VARIABLE EQUALS valor DOTCOMMA
    (101) funcion_Anonima -> tipo . VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (86) funcion_flecha -> tipo . VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> tipo . VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (67) variable -> tipo . VARIABLE

    VARIABLE        shift and go to state 66


state 13

    (81) funcion -> VARIABLE . LPAREN valores RPAREN
    (82) funcion_Data -> VARIABLE . DOT VARIABLE LPAREN valores RPAREN DOTCOMMA

    LPAREN          shift and go to state 67
    DOT             shift and go to state 68


state 14

    (78) operacion -> valor . operador expresion
    (92) operador -> . PLUS
    (93) operador -> . MINUS
    (94) operador -> . TIMES
    (95) operador -> . DIVIDE

    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73

    operador                       shift and go to state 69

state 15

    (21) comentario -> COMMENTLINE .

    PRINT           reduce using rule 21 (comentario -> COMMENTLINE .)
    COMMENTLINE     reduce using rule 21 (comentario -> COMMENTLINE .)
    COMMENTBLOCK    reduce using rule 21 (comentario -> COMMENTLINE .)
    RETURN          reduce using rule 21 (comentario -> COMMENTLINE .)
    MAP             reduce using rule 21 (comentario -> COMMENTLINE .)
    DOUBLE          reduce using rule 21 (comentario -> COMMENTLINE .)
    STRING          reduce using rule 21 (comentario -> COMMENTLINE .)
    INT             reduce using rule 21 (comentario -> COMMENTLINE .)
    SET             reduce using rule 21 (comentario -> COMMENTLINE .)
    LIST            reduce using rule 21 (comentario -> COMMENTLINE .)
    BOOLEAN         reduce using rule 21 (comentario -> COMMENTLINE .)
    TUPLE           reduce using rule 21 (comentario -> COMMENTLINE .)
    VAR             reduce using rule 21 (comentario -> COMMENTLINE .)
    NUMBER          reduce using rule 21 (comentario -> COMMENTLINE .)
    FLOAT           reduce using rule 21 (comentario -> COMMENTLINE .)
    CHAINCHAR       reduce using rule 21 (comentario -> COMMENTLINE .)
    IF              reduce using rule 21 (comentario -> COMMENTLINE .)
    SWITCH          reduce using rule 21 (comentario -> COMMENTLINE .)
    FOR             reduce using rule 21 (comentario -> COMMENTLINE .)
    VOID            reduce using rule 21 (comentario -> COMMENTLINE .)
    VARIABLE        reduce using rule 21 (comentario -> COMMENTLINE .)
    DOLLAR          reduce using rule 21 (comentario -> COMMENTLINE .)
    TRUE            reduce using rule 21 (comentario -> COMMENTLINE .)
    FALSE           reduce using rule 21 (comentario -> COMMENTLINE .)
    LPAREN          reduce using rule 21 (comentario -> COMMENTLINE .)
    LBRACKET        reduce using rule 21 (comentario -> COMMENTLINE .)
    LBRACE          reduce using rule 21 (comentario -> COMMENTLINE .)
    $end            reduce using rule 21 (comentario -> COMMENTLINE .)
    RBRACE          reduce using rule 21 (comentario -> COMMENTLINE .)
    DOTCOMMA        reduce using rule 21 (comentario -> COMMENTLINE .)
    BREAK           reduce using rule 21 (comentario -> COMMENTLINE .)


state 16

    (22) comentario -> COMMENTBLOCK .

    PRINT           reduce using rule 22 (comentario -> COMMENTBLOCK .)
    COMMENTLINE     reduce using rule 22 (comentario -> COMMENTBLOCK .)
    COMMENTBLOCK    reduce using rule 22 (comentario -> COMMENTBLOCK .)
    RETURN          reduce using rule 22 (comentario -> COMMENTBLOCK .)
    MAP             reduce using rule 22 (comentario -> COMMENTBLOCK .)
    DOUBLE          reduce using rule 22 (comentario -> COMMENTBLOCK .)
    STRING          reduce using rule 22 (comentario -> COMMENTBLOCK .)
    INT             reduce using rule 22 (comentario -> COMMENTBLOCK .)
    SET             reduce using rule 22 (comentario -> COMMENTBLOCK .)
    LIST            reduce using rule 22 (comentario -> COMMENTBLOCK .)
    BOOLEAN         reduce using rule 22 (comentario -> COMMENTBLOCK .)
    TUPLE           reduce using rule 22 (comentario -> COMMENTBLOCK .)
    VAR             reduce using rule 22 (comentario -> COMMENTBLOCK .)
    NUMBER          reduce using rule 22 (comentario -> COMMENTBLOCK .)
    FLOAT           reduce using rule 22 (comentario -> COMMENTBLOCK .)
    CHAINCHAR       reduce using rule 22 (comentario -> COMMENTBLOCK .)
    IF              reduce using rule 22 (comentario -> COMMENTBLOCK .)
    SWITCH          reduce using rule 22 (comentario -> COMMENTBLOCK .)
    FOR             reduce using rule 22 (comentario -> COMMENTBLOCK .)
    VOID            reduce using rule 22 (comentario -> COMMENTBLOCK .)
    VARIABLE        reduce using rule 22 (comentario -> COMMENTBLOCK .)
    DOLLAR          reduce using rule 22 (comentario -> COMMENTBLOCK .)
    TRUE            reduce using rule 22 (comentario -> COMMENTBLOCK .)
    FALSE           reduce using rule 22 (comentario -> COMMENTBLOCK .)
    LPAREN          reduce using rule 22 (comentario -> COMMENTBLOCK .)
    LBRACKET        reduce using rule 22 (comentario -> COMMENTBLOCK .)
    LBRACE          reduce using rule 22 (comentario -> COMMENTBLOCK .)
    $end            reduce using rule 22 (comentario -> COMMENTBLOCK .)
    RBRACE          reduce using rule 22 (comentario -> COMMENTBLOCK .)
    DOTCOMMA        reduce using rule 22 (comentario -> COMMENTBLOCK .)
    BREAK           reduce using rule 22 (comentario -> COMMENTBLOCK .)


state 17

    (9) estructuras_de_Control -> sentencia_If .

    PRINT           reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    COMMENTLINE     reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    COMMENTBLOCK    reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    RETURN          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    MAP             reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    DOUBLE          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    STRING          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    INT             reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    SET             reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    LIST            reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    BOOLEAN         reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    TUPLE           reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    VAR             reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    NUMBER          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    FLOAT           reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    CHAINCHAR       reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    IF              reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    SWITCH          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    FOR             reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    VOID            reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    VARIABLE        reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    DOLLAR          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    TRUE            reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    FALSE           reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    LPAREN          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    LBRACKET        reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    LBRACE          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    $end            reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    RBRACE          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    DOTCOMMA        reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    BREAK           reduce using rule 9 (estructuras_de_Control -> sentencia_If .)


state 18

    (10) estructuras_de_Control -> sentencia_Switch .

    PRINT           reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    COMMENTLINE     reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    COMMENTBLOCK    reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    RETURN          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    MAP             reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    DOUBLE          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    STRING          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    INT             reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    SET             reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    LIST            reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    BOOLEAN         reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    TUPLE           reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    VAR             reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    NUMBER          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    FLOAT           reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    CHAINCHAR       reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    IF              reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    SWITCH          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    FOR             reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    VOID            reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    VARIABLE        reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    DOLLAR          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    TRUE            reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    FALSE           reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    LPAREN          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    LBRACKET        reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    LBRACE          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    $end            reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    RBRACE          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    DOTCOMMA        reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    BREAK           reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)


state 19

    (11) estructuras_de_Control -> ciclo_for .

    PRINT           reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    COMMENTLINE     reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    COMMENTBLOCK    reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    RETURN          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    MAP             reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    DOUBLE          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    STRING          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    INT             reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    SET             reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    LIST            reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    BOOLEAN         reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    TUPLE           reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    VAR             reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    NUMBER          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    FLOAT           reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    CHAINCHAR       reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    IF              reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    SWITCH          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    FOR             reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    VOID            reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    VARIABLE        reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    DOLLAR          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    TRUE            reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    FALSE           reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    LPAREN          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    LBRACKET        reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    LBRACE          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    $end            reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    RBRACE          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    DOTCOMMA        reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    BREAK           reduce using rule 11 (estructuras_de_Control -> ciclo_for .)


state 20

    (12) estructuras_de_Control -> funcion_Anonima .

    PRINT           reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    COMMENTLINE     reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    COMMENTBLOCK    reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    RETURN          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    MAP             reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    DOUBLE          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    STRING          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    INT             reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    SET             reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    LIST            reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    BOOLEAN         reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    TUPLE           reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    VAR             reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    NUMBER          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    FLOAT           reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    CHAINCHAR       reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    IF              reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    SWITCH          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    FOR             reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    VOID            reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    VARIABLE        reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    DOLLAR          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    TRUE            reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    FALSE           reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    LPAREN          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    LBRACKET        reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    LBRACE          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    $end            reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    RBRACE          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    DOTCOMMA        reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    BREAK           reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)


state 21

    (13) estructuras_de_Control -> diccionario .

    PRINT           reduce using rule 13 (estructuras_de_Control -> diccionario .)
    COMMENTLINE     reduce using rule 13 (estructuras_de_Control -> diccionario .)
    COMMENTBLOCK    reduce using rule 13 (estructuras_de_Control -> diccionario .)
    RETURN          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    MAP             reduce using rule 13 (estructuras_de_Control -> diccionario .)
    DOUBLE          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    STRING          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    INT             reduce using rule 13 (estructuras_de_Control -> diccionario .)
    SET             reduce using rule 13 (estructuras_de_Control -> diccionario .)
    LIST            reduce using rule 13 (estructuras_de_Control -> diccionario .)
    BOOLEAN         reduce using rule 13 (estructuras_de_Control -> diccionario .)
    TUPLE           reduce using rule 13 (estructuras_de_Control -> diccionario .)
    VAR             reduce using rule 13 (estructuras_de_Control -> diccionario .)
    NUMBER          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    FLOAT           reduce using rule 13 (estructuras_de_Control -> diccionario .)
    CHAINCHAR       reduce using rule 13 (estructuras_de_Control -> diccionario .)
    IF              reduce using rule 13 (estructuras_de_Control -> diccionario .)
    SWITCH          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    FOR             reduce using rule 13 (estructuras_de_Control -> diccionario .)
    VOID            reduce using rule 13 (estructuras_de_Control -> diccionario .)
    VARIABLE        reduce using rule 13 (estructuras_de_Control -> diccionario .)
    DOLLAR          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    TRUE            reduce using rule 13 (estructuras_de_Control -> diccionario .)
    FALSE           reduce using rule 13 (estructuras_de_Control -> diccionario .)
    LPAREN          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    LBRACKET        reduce using rule 13 (estructuras_de_Control -> diccionario .)
    LBRACE          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    $end            reduce using rule 13 (estructuras_de_Control -> diccionario .)
    RBRACE          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    DOTCOMMA        reduce using rule 13 (estructuras_de_Control -> diccionario .)
    BREAK           reduce using rule 13 (estructuras_de_Control -> diccionario .)


state 22

    (14) estructuras_de_Control -> Conjunto .

    PRINT           reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    COMMENTLINE     reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    COMMENTBLOCK    reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    RETURN          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    MAP             reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    DOUBLE          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    STRING          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    INT             reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    SET             reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    LIST            reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    BOOLEAN         reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    TUPLE           reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    VAR             reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    NUMBER          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    FLOAT           reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    CHAINCHAR       reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    IF              reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    SWITCH          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    FOR             reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    VOID            reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    VARIABLE        reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    DOLLAR          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    TRUE            reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    FALSE           reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    LPAREN          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    LBRACKET        reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    LBRACE          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    $end            reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    RBRACE          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    DOTCOMMA        reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    BREAK           reduce using rule 14 (estructuras_de_Control -> Conjunto .)


state 23

    (15) estructuras_de_Control -> funcion_flecha .

    PRINT           reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    COMMENTLINE     reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    COMMENTBLOCK    reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    RETURN          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    MAP             reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    DOUBLE          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    STRING          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    INT             reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    SET             reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    LIST            reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    BOOLEAN         reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    TUPLE           reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    VAR             reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    NUMBER          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    FLOAT           reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    CHAINCHAR       reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    IF              reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    SWITCH          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    FOR             reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    VOID            reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    VARIABLE        reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    DOLLAR          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    TRUE            reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    FALSE           reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    LPAREN          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    LBRACKET        reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    LBRACE          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    $end            reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    RBRACE          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    DOTCOMMA        reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    BREAK           reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)


state 24

    (16) estructuras_de_Control -> funcion_Void .

    PRINT           reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    COMMENTLINE     reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    COMMENTBLOCK    reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    RETURN          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    MAP             reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    DOUBLE          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    STRING          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    INT             reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    SET             reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    LIST            reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    BOOLEAN         reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    TUPLE           reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    VAR             reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    NUMBER          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    FLOAT           reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    CHAINCHAR       reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    IF              reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    SWITCH          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    FOR             reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    VOID            reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    VARIABLE        reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    DOLLAR          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    TRUE            reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    FALSE           reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    LPAREN          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    LBRACKET        reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    LBRACE          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    $end            reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    RBRACE          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    DOTCOMMA        reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    BREAK           reduce using rule 16 (estructuras_de_Control -> funcion_Void .)


state 25

    (17) estructuras_de_Control -> funcion .

    PRINT           reduce using rule 17 (estructuras_de_Control -> funcion .)
    COMMENTLINE     reduce using rule 17 (estructuras_de_Control -> funcion .)
    COMMENTBLOCK    reduce using rule 17 (estructuras_de_Control -> funcion .)
    RETURN          reduce using rule 17 (estructuras_de_Control -> funcion .)
    MAP             reduce using rule 17 (estructuras_de_Control -> funcion .)
    DOUBLE          reduce using rule 17 (estructuras_de_Control -> funcion .)
    STRING          reduce using rule 17 (estructuras_de_Control -> funcion .)
    INT             reduce using rule 17 (estructuras_de_Control -> funcion .)
    SET             reduce using rule 17 (estructuras_de_Control -> funcion .)
    LIST            reduce using rule 17 (estructuras_de_Control -> funcion .)
    BOOLEAN         reduce using rule 17 (estructuras_de_Control -> funcion .)
    TUPLE           reduce using rule 17 (estructuras_de_Control -> funcion .)
    VAR             reduce using rule 17 (estructuras_de_Control -> funcion .)
    NUMBER          reduce using rule 17 (estructuras_de_Control -> funcion .)
    FLOAT           reduce using rule 17 (estructuras_de_Control -> funcion .)
    CHAINCHAR       reduce using rule 17 (estructuras_de_Control -> funcion .)
    IF              reduce using rule 17 (estructuras_de_Control -> funcion .)
    SWITCH          reduce using rule 17 (estructuras_de_Control -> funcion .)
    FOR             reduce using rule 17 (estructuras_de_Control -> funcion .)
    VOID            reduce using rule 17 (estructuras_de_Control -> funcion .)
    VARIABLE        reduce using rule 17 (estructuras_de_Control -> funcion .)
    DOLLAR          reduce using rule 17 (estructuras_de_Control -> funcion .)
    TRUE            reduce using rule 17 (estructuras_de_Control -> funcion .)
    FALSE           reduce using rule 17 (estructuras_de_Control -> funcion .)
    LPAREN          reduce using rule 17 (estructuras_de_Control -> funcion .)
    LBRACKET        reduce using rule 17 (estructuras_de_Control -> funcion .)
    LBRACE          reduce using rule 17 (estructuras_de_Control -> funcion .)
    $end            reduce using rule 17 (estructuras_de_Control -> funcion .)
    RBRACE          reduce using rule 17 (estructuras_de_Control -> funcion .)
    DOTCOMMA        reduce using rule 17 (estructuras_de_Control -> funcion .)
    BREAK           reduce using rule 17 (estructuras_de_Control -> funcion .)


state 26

    (18) estructuras_de_Control -> funcion_Data .

    PRINT           reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    COMMENTLINE     reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    COMMENTBLOCK    reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    RETURN          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    MAP             reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    DOUBLE          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    STRING          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    INT             reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    SET             reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    LIST            reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    BOOLEAN         reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    TUPLE           reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    VAR             reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    NUMBER          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    FLOAT           reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    CHAINCHAR       reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    IF              reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    SWITCH          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    FOR             reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    VOID            reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    VARIABLE        reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    DOLLAR          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    TRUE            reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    FALSE           reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    LPAREN          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    LBRACKET        reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    LBRACE          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    $end            reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    RBRACE          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    DOTCOMMA        reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    BREAK           reduce using rule 18 (estructuras_de_Control -> funcion_Data .)


state 27

    (19) estructuras_de_Control -> estructura_List .

    PRINT           reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    COMMENTLINE     reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    COMMENTBLOCK    reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    RETURN          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    MAP             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    DOUBLE          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    STRING          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    INT             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    SET             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    LIST            reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    BOOLEAN         reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    TUPLE           reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    VAR             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    NUMBER          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    FLOAT           reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    CHAINCHAR       reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    IF              reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    SWITCH          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    FOR             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    VOID            reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    VARIABLE        reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    DOLLAR          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    TRUE            reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    FALSE           reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    LPAREN          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    LBRACKET        reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    LBRACE          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    $end            reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    RBRACE          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    DOTCOMMA        reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    BREAK           reduce using rule 19 (estructuras_de_Control -> estructura_List .)


state 28

    (20) estructuras_de_Control -> estructura_tupla .

    PRINT           reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    COMMENTLINE     reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    COMMENTBLOCK    reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    RETURN          reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    MAP             reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    DOUBLE          reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    STRING          reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    INT             reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    SET             reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    LIST            reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    BOOLEAN         reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    TUPLE           reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    VAR             reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    NUMBER          reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    FLOAT           reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    CHAINCHAR       reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    IF              reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    SWITCH          reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    FOR             reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    VOID            reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    VARIABLE        reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    DOLLAR          reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    TRUE            reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    FALSE           reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    LPAREN          reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    LBRACKET        reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    LBRACE          reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    $end            reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    RBRACE          reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    DOTCOMMA        reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)
    BREAK           reduce using rule 20 (estructuras_de_Control -> estructura_tupla .)


state 29

    (42) return -> RETURN . valor DOTCOMMA
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    valor                          shift and go to state 74
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 30

    (68) tipo -> MAP .
    (103) diccionario -> MAP . LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    VARIABLE        reduce using rule 68 (tipo -> MAP .)
    LANGLE          shift and go to state 75


state 31

    (69) tipo -> DOUBLE .

    VARIABLE        reduce using rule 69 (tipo -> DOUBLE .)
    COMMA           reduce using rule 69 (tipo -> DOUBLE .)
    RANGLE          reduce using rule 69 (tipo -> DOUBLE .)


state 32

    (70) tipo -> STRING .

    VARIABLE        reduce using rule 70 (tipo -> STRING .)
    COMMA           reduce using rule 70 (tipo -> STRING .)
    RANGLE          reduce using rule 70 (tipo -> STRING .)


state 33

    (71) tipo -> INT .

    VARIABLE        reduce using rule 71 (tipo -> INT .)
    COMMA           reduce using rule 71 (tipo -> INT .)
    RANGLE          reduce using rule 71 (tipo -> INT .)


state 34

    (72) tipo -> SET .
    (88) Conjunto -> SET . VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> SET . LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA

  ! shift/reduce conflict for VARIABLE resolved as shift
    VARIABLE        shift and go to state 76
    LANGLE          shift and go to state 77

  ! VARIABLE        [ reduce using rule 72 (tipo -> SET .) ]


state 35

    (73) tipo -> LIST .
    (37) estructura_List -> LIST . LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA

    VARIABLE        reduce using rule 73 (tipo -> LIST .)
    LANGLE          shift and go to state 78


state 36

    (74) tipo -> BOOLEAN .

    VARIABLE        reduce using rule 74 (tipo -> BOOLEAN .)
    COMMA           reduce using rule 74 (tipo -> BOOLEAN .)
    RANGLE          reduce using rule 74 (tipo -> BOOLEAN .)


state 37

    (75) tipo -> TUPLE .
    (49) estructura_tupla -> TUPLE . LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA

    VARIABLE        reduce using rule 75 (tipo -> TUPLE .)
    LANGLE          shift and go to state 79


state 38

    (76) tipo -> VAR .

    VARIABLE        reduce using rule 76 (tipo -> VAR .)
    COMMA           reduce using rule 76 (tipo -> VAR .)
    RANGLE          reduce using rule 76 (tipo -> VAR .)


state 39

    (55) valor -> variable .

    PLUS            reduce using rule 55 (valor -> variable .)
    MINUS           reduce using rule 55 (valor -> variable .)
    TIMES           reduce using rule 55 (valor -> variable .)
    DIVIDE          reduce using rule 55 (valor -> variable .)
    COMMA           reduce using rule 55 (valor -> variable .)
    RPAREN          reduce using rule 55 (valor -> variable .)
    DOTCOMMA        reduce using rule 55 (valor -> variable .)
    TWODOTS         reduce using rule 55 (valor -> variable .)
    RBRACE          reduce using rule 55 (valor -> variable .)
    RBRACKET        reduce using rule 55 (valor -> variable .)
    EQUALS          reduce using rule 55 (valor -> variable .)
    LANGLE          reduce using rule 55 (valor -> variable .)
    RANGLE          reduce using rule 55 (valor -> variable .)
    NEQ             reduce using rule 55 (valor -> variable .)
    PRINT           reduce using rule 55 (valor -> variable .)
    COMMENTLINE     reduce using rule 55 (valor -> variable .)
    COMMENTBLOCK    reduce using rule 55 (valor -> variable .)
    RETURN          reduce using rule 55 (valor -> variable .)
    MAP             reduce using rule 55 (valor -> variable .)
    DOUBLE          reduce using rule 55 (valor -> variable .)
    STRING          reduce using rule 55 (valor -> variable .)
    INT             reduce using rule 55 (valor -> variable .)
    SET             reduce using rule 55 (valor -> variable .)
    LIST            reduce using rule 55 (valor -> variable .)
    BOOLEAN         reduce using rule 55 (valor -> variable .)
    TUPLE           reduce using rule 55 (valor -> variable .)
    VAR             reduce using rule 55 (valor -> variable .)
    NUMBER          reduce using rule 55 (valor -> variable .)
    FLOAT           reduce using rule 55 (valor -> variable .)
    CHAINCHAR       reduce using rule 55 (valor -> variable .)
    IF              reduce using rule 55 (valor -> variable .)
    SWITCH          reduce using rule 55 (valor -> variable .)
    FOR             reduce using rule 55 (valor -> variable .)
    VOID            reduce using rule 55 (valor -> variable .)
    VARIABLE        reduce using rule 55 (valor -> variable .)
    DOLLAR          reduce using rule 55 (valor -> variable .)
    TRUE            reduce using rule 55 (valor -> variable .)
    FALSE           reduce using rule 55 (valor -> variable .)
    LPAREN          reduce using rule 55 (valor -> variable .)
    LBRACKET        reduce using rule 55 (valor -> variable .)
    LBRACE          reduce using rule 55 (valor -> variable .)
    $end            reduce using rule 55 (valor -> variable .)
    BREAK           reduce using rule 55 (valor -> variable .)
    AND             reduce using rule 55 (valor -> variable .)
    OR              reduce using rule 55 (valor -> variable .)


state 40

    (56) valor -> NUMBER .

    PLUS            reduce using rule 56 (valor -> NUMBER .)
    MINUS           reduce using rule 56 (valor -> NUMBER .)
    TIMES           reduce using rule 56 (valor -> NUMBER .)
    DIVIDE          reduce using rule 56 (valor -> NUMBER .)
    COMMA           reduce using rule 56 (valor -> NUMBER .)
    RPAREN          reduce using rule 56 (valor -> NUMBER .)
    DOTCOMMA        reduce using rule 56 (valor -> NUMBER .)
    TWODOTS         reduce using rule 56 (valor -> NUMBER .)
    RBRACE          reduce using rule 56 (valor -> NUMBER .)
    RBRACKET        reduce using rule 56 (valor -> NUMBER .)
    EQUALS          reduce using rule 56 (valor -> NUMBER .)
    LANGLE          reduce using rule 56 (valor -> NUMBER .)
    RANGLE          reduce using rule 56 (valor -> NUMBER .)
    NEQ             reduce using rule 56 (valor -> NUMBER .)
    PRINT           reduce using rule 56 (valor -> NUMBER .)
    COMMENTLINE     reduce using rule 56 (valor -> NUMBER .)
    COMMENTBLOCK    reduce using rule 56 (valor -> NUMBER .)
    RETURN          reduce using rule 56 (valor -> NUMBER .)
    MAP             reduce using rule 56 (valor -> NUMBER .)
    DOUBLE          reduce using rule 56 (valor -> NUMBER .)
    STRING          reduce using rule 56 (valor -> NUMBER .)
    INT             reduce using rule 56 (valor -> NUMBER .)
    SET             reduce using rule 56 (valor -> NUMBER .)
    LIST            reduce using rule 56 (valor -> NUMBER .)
    BOOLEAN         reduce using rule 56 (valor -> NUMBER .)
    TUPLE           reduce using rule 56 (valor -> NUMBER .)
    VAR             reduce using rule 56 (valor -> NUMBER .)
    NUMBER          reduce using rule 56 (valor -> NUMBER .)
    FLOAT           reduce using rule 56 (valor -> NUMBER .)
    CHAINCHAR       reduce using rule 56 (valor -> NUMBER .)
    IF              reduce using rule 56 (valor -> NUMBER .)
    SWITCH          reduce using rule 56 (valor -> NUMBER .)
    FOR             reduce using rule 56 (valor -> NUMBER .)
    VOID            reduce using rule 56 (valor -> NUMBER .)
    VARIABLE        reduce using rule 56 (valor -> NUMBER .)
    DOLLAR          reduce using rule 56 (valor -> NUMBER .)
    TRUE            reduce using rule 56 (valor -> NUMBER .)
    FALSE           reduce using rule 56 (valor -> NUMBER .)
    LPAREN          reduce using rule 56 (valor -> NUMBER .)
    LBRACKET        reduce using rule 56 (valor -> NUMBER .)
    LBRACE          reduce using rule 56 (valor -> NUMBER .)
    $end            reduce using rule 56 (valor -> NUMBER .)
    BREAK           reduce using rule 56 (valor -> NUMBER .)
    AND             reduce using rule 56 (valor -> NUMBER .)
    OR              reduce using rule 56 (valor -> NUMBER .)


state 41

    (57) valor -> FLOAT .

    PLUS            reduce using rule 57 (valor -> FLOAT .)
    MINUS           reduce using rule 57 (valor -> FLOAT .)
    TIMES           reduce using rule 57 (valor -> FLOAT .)
    DIVIDE          reduce using rule 57 (valor -> FLOAT .)
    COMMA           reduce using rule 57 (valor -> FLOAT .)
    RPAREN          reduce using rule 57 (valor -> FLOAT .)
    DOTCOMMA        reduce using rule 57 (valor -> FLOAT .)
    TWODOTS         reduce using rule 57 (valor -> FLOAT .)
    RBRACE          reduce using rule 57 (valor -> FLOAT .)
    RBRACKET        reduce using rule 57 (valor -> FLOAT .)
    EQUALS          reduce using rule 57 (valor -> FLOAT .)
    LANGLE          reduce using rule 57 (valor -> FLOAT .)
    RANGLE          reduce using rule 57 (valor -> FLOAT .)
    NEQ             reduce using rule 57 (valor -> FLOAT .)
    PRINT           reduce using rule 57 (valor -> FLOAT .)
    COMMENTLINE     reduce using rule 57 (valor -> FLOAT .)
    COMMENTBLOCK    reduce using rule 57 (valor -> FLOAT .)
    RETURN          reduce using rule 57 (valor -> FLOAT .)
    MAP             reduce using rule 57 (valor -> FLOAT .)
    DOUBLE          reduce using rule 57 (valor -> FLOAT .)
    STRING          reduce using rule 57 (valor -> FLOAT .)
    INT             reduce using rule 57 (valor -> FLOAT .)
    SET             reduce using rule 57 (valor -> FLOAT .)
    LIST            reduce using rule 57 (valor -> FLOAT .)
    BOOLEAN         reduce using rule 57 (valor -> FLOAT .)
    TUPLE           reduce using rule 57 (valor -> FLOAT .)
    VAR             reduce using rule 57 (valor -> FLOAT .)
    NUMBER          reduce using rule 57 (valor -> FLOAT .)
    FLOAT           reduce using rule 57 (valor -> FLOAT .)
    CHAINCHAR       reduce using rule 57 (valor -> FLOAT .)
    IF              reduce using rule 57 (valor -> FLOAT .)
    SWITCH          reduce using rule 57 (valor -> FLOAT .)
    FOR             reduce using rule 57 (valor -> FLOAT .)
    VOID            reduce using rule 57 (valor -> FLOAT .)
    VARIABLE        reduce using rule 57 (valor -> FLOAT .)
    DOLLAR          reduce using rule 57 (valor -> FLOAT .)
    TRUE            reduce using rule 57 (valor -> FLOAT .)
    FALSE           reduce using rule 57 (valor -> FLOAT .)
    LPAREN          reduce using rule 57 (valor -> FLOAT .)
    LBRACKET        reduce using rule 57 (valor -> FLOAT .)
    LBRACE          reduce using rule 57 (valor -> FLOAT .)
    $end            reduce using rule 57 (valor -> FLOAT .)
    BREAK           reduce using rule 57 (valor -> FLOAT .)
    AND             reduce using rule 57 (valor -> FLOAT .)
    OR              reduce using rule 57 (valor -> FLOAT .)


state 42

    (59) valor -> Bool .

    PLUS            reduce using rule 59 (valor -> Bool .)
    MINUS           reduce using rule 59 (valor -> Bool .)
    TIMES           reduce using rule 59 (valor -> Bool .)
    DIVIDE          reduce using rule 59 (valor -> Bool .)
    COMMA           reduce using rule 59 (valor -> Bool .)
    RPAREN          reduce using rule 59 (valor -> Bool .)
    DOTCOMMA        reduce using rule 59 (valor -> Bool .)
    TWODOTS         reduce using rule 59 (valor -> Bool .)
    RBRACE          reduce using rule 59 (valor -> Bool .)
    RBRACKET        reduce using rule 59 (valor -> Bool .)
    PRINT           reduce using rule 59 (valor -> Bool .)
    COMMENTLINE     reduce using rule 59 (valor -> Bool .)
    COMMENTBLOCK    reduce using rule 59 (valor -> Bool .)
    RETURN          reduce using rule 59 (valor -> Bool .)
    MAP             reduce using rule 59 (valor -> Bool .)
    DOUBLE          reduce using rule 59 (valor -> Bool .)
    STRING          reduce using rule 59 (valor -> Bool .)
    INT             reduce using rule 59 (valor -> Bool .)
    SET             reduce using rule 59 (valor -> Bool .)
    LIST            reduce using rule 59 (valor -> Bool .)
    BOOLEAN         reduce using rule 59 (valor -> Bool .)
    TUPLE           reduce using rule 59 (valor -> Bool .)
    VAR             reduce using rule 59 (valor -> Bool .)
    NUMBER          reduce using rule 59 (valor -> Bool .)
    FLOAT           reduce using rule 59 (valor -> Bool .)
    CHAINCHAR       reduce using rule 59 (valor -> Bool .)
    IF              reduce using rule 59 (valor -> Bool .)
    SWITCH          reduce using rule 59 (valor -> Bool .)
    FOR             reduce using rule 59 (valor -> Bool .)
    VOID            reduce using rule 59 (valor -> Bool .)
    VARIABLE        reduce using rule 59 (valor -> Bool .)
    DOLLAR          reduce using rule 59 (valor -> Bool .)
    TRUE            reduce using rule 59 (valor -> Bool .)
    FALSE           reduce using rule 59 (valor -> Bool .)
    LPAREN          reduce using rule 59 (valor -> Bool .)
    LBRACKET        reduce using rule 59 (valor -> Bool .)
    LBRACE          reduce using rule 59 (valor -> Bool .)
    $end            reduce using rule 59 (valor -> Bool .)
    BREAK           reduce using rule 59 (valor -> Bool .)
    EQUALS          reduce using rule 59 (valor -> Bool .)
    LANGLE          reduce using rule 59 (valor -> Bool .)
    RANGLE          reduce using rule 59 (valor -> Bool .)
    NEQ             reduce using rule 59 (valor -> Bool .)
    AND             reduce using rule 59 (valor -> Bool .)
    OR              reduce using rule 59 (valor -> Bool .)


state 43

    (60) valor -> tupla .
    (102) funcion_Anonima -> tupla . LBRACE programa RBRACE DOTCOMMA

    PLUS            reduce using rule 60 (valor -> tupla .)
    MINUS           reduce using rule 60 (valor -> tupla .)
    TIMES           reduce using rule 60 (valor -> tupla .)
    DIVIDE          reduce using rule 60 (valor -> tupla .)
    LBRACE          shift and go to state 80


state 44

    (61) valor -> lista .

    PLUS            reduce using rule 61 (valor -> lista .)
    MINUS           reduce using rule 61 (valor -> lista .)
    TIMES           reduce using rule 61 (valor -> lista .)
    DIVIDE          reduce using rule 61 (valor -> lista .)
    COMMA           reduce using rule 61 (valor -> lista .)
    RPAREN          reduce using rule 61 (valor -> lista .)
    DOTCOMMA        reduce using rule 61 (valor -> lista .)
    TWODOTS         reduce using rule 61 (valor -> lista .)
    RBRACE          reduce using rule 61 (valor -> lista .)
    RBRACKET        reduce using rule 61 (valor -> lista .)
    EQUALS          reduce using rule 61 (valor -> lista .)
    LANGLE          reduce using rule 61 (valor -> lista .)
    RANGLE          reduce using rule 61 (valor -> lista .)
    NEQ             reduce using rule 61 (valor -> lista .)
    PRINT           reduce using rule 61 (valor -> lista .)
    COMMENTLINE     reduce using rule 61 (valor -> lista .)
    COMMENTBLOCK    reduce using rule 61 (valor -> lista .)
    RETURN          reduce using rule 61 (valor -> lista .)
    MAP             reduce using rule 61 (valor -> lista .)
    DOUBLE          reduce using rule 61 (valor -> lista .)
    STRING          reduce using rule 61 (valor -> lista .)
    INT             reduce using rule 61 (valor -> lista .)
    SET             reduce using rule 61 (valor -> lista .)
    LIST            reduce using rule 61 (valor -> lista .)
    BOOLEAN         reduce using rule 61 (valor -> lista .)
    TUPLE           reduce using rule 61 (valor -> lista .)
    VAR             reduce using rule 61 (valor -> lista .)
    NUMBER          reduce using rule 61 (valor -> lista .)
    FLOAT           reduce using rule 61 (valor -> lista .)
    CHAINCHAR       reduce using rule 61 (valor -> lista .)
    IF              reduce using rule 61 (valor -> lista .)
    SWITCH          reduce using rule 61 (valor -> lista .)
    FOR             reduce using rule 61 (valor -> lista .)
    VOID            reduce using rule 61 (valor -> lista .)
    VARIABLE        reduce using rule 61 (valor -> lista .)
    DOLLAR          reduce using rule 61 (valor -> lista .)
    TRUE            reduce using rule 61 (valor -> lista .)
    FALSE           reduce using rule 61 (valor -> lista .)
    LPAREN          reduce using rule 61 (valor -> lista .)
    LBRACKET        reduce using rule 61 (valor -> lista .)
    LBRACE          reduce using rule 61 (valor -> lista .)
    $end            reduce using rule 61 (valor -> lista .)
    BREAK           reduce using rule 61 (valor -> lista .)
    AND             reduce using rule 61 (valor -> lista .)
    OR              reduce using rule 61 (valor -> lista .)


state 45

    (62) valor -> cuerpo_conjunto .

    PLUS            reduce using rule 62 (valor -> cuerpo_conjunto .)
    MINUS           reduce using rule 62 (valor -> cuerpo_conjunto .)
    TIMES           reduce using rule 62 (valor -> cuerpo_conjunto .)
    DIVIDE          reduce using rule 62 (valor -> cuerpo_conjunto .)
    COMMA           reduce using rule 62 (valor -> cuerpo_conjunto .)
    RPAREN          reduce using rule 62 (valor -> cuerpo_conjunto .)
    DOTCOMMA        reduce using rule 62 (valor -> cuerpo_conjunto .)
    TWODOTS         reduce using rule 62 (valor -> cuerpo_conjunto .)
    RBRACE          reduce using rule 62 (valor -> cuerpo_conjunto .)
    RBRACKET        reduce using rule 62 (valor -> cuerpo_conjunto .)
    EQUALS          reduce using rule 62 (valor -> cuerpo_conjunto .)
    LANGLE          reduce using rule 62 (valor -> cuerpo_conjunto .)
    RANGLE          reduce using rule 62 (valor -> cuerpo_conjunto .)
    NEQ             reduce using rule 62 (valor -> cuerpo_conjunto .)
    PRINT           reduce using rule 62 (valor -> cuerpo_conjunto .)
    COMMENTLINE     reduce using rule 62 (valor -> cuerpo_conjunto .)
    COMMENTBLOCK    reduce using rule 62 (valor -> cuerpo_conjunto .)
    RETURN          reduce using rule 62 (valor -> cuerpo_conjunto .)
    MAP             reduce using rule 62 (valor -> cuerpo_conjunto .)
    DOUBLE          reduce using rule 62 (valor -> cuerpo_conjunto .)
    STRING          reduce using rule 62 (valor -> cuerpo_conjunto .)
    INT             reduce using rule 62 (valor -> cuerpo_conjunto .)
    SET             reduce using rule 62 (valor -> cuerpo_conjunto .)
    LIST            reduce using rule 62 (valor -> cuerpo_conjunto .)
    BOOLEAN         reduce using rule 62 (valor -> cuerpo_conjunto .)
    TUPLE           reduce using rule 62 (valor -> cuerpo_conjunto .)
    VAR             reduce using rule 62 (valor -> cuerpo_conjunto .)
    NUMBER          reduce using rule 62 (valor -> cuerpo_conjunto .)
    FLOAT           reduce using rule 62 (valor -> cuerpo_conjunto .)
    CHAINCHAR       reduce using rule 62 (valor -> cuerpo_conjunto .)
    IF              reduce using rule 62 (valor -> cuerpo_conjunto .)
    SWITCH          reduce using rule 62 (valor -> cuerpo_conjunto .)
    FOR             reduce using rule 62 (valor -> cuerpo_conjunto .)
    VOID            reduce using rule 62 (valor -> cuerpo_conjunto .)
    VARIABLE        reduce using rule 62 (valor -> cuerpo_conjunto .)
    DOLLAR          reduce using rule 62 (valor -> cuerpo_conjunto .)
    TRUE            reduce using rule 62 (valor -> cuerpo_conjunto .)
    FALSE           reduce using rule 62 (valor -> cuerpo_conjunto .)
    LPAREN          reduce using rule 62 (valor -> cuerpo_conjunto .)
    LBRACKET        reduce using rule 62 (valor -> cuerpo_conjunto .)
    LBRACE          reduce using rule 62 (valor -> cuerpo_conjunto .)
    $end            reduce using rule 62 (valor -> cuerpo_conjunto .)
    BREAK           reduce using rule 62 (valor -> cuerpo_conjunto .)
    AND             reduce using rule 62 (valor -> cuerpo_conjunto .)
    OR              reduce using rule 62 (valor -> cuerpo_conjunto .)


state 46

    (63) valor -> cuerpo_Diccionario .

    PLUS            reduce using rule 63 (valor -> cuerpo_Diccionario .)
    MINUS           reduce using rule 63 (valor -> cuerpo_Diccionario .)
    TIMES           reduce using rule 63 (valor -> cuerpo_Diccionario .)
    DIVIDE          reduce using rule 63 (valor -> cuerpo_Diccionario .)
    COMMA           reduce using rule 63 (valor -> cuerpo_Diccionario .)
    RPAREN          reduce using rule 63 (valor -> cuerpo_Diccionario .)
    DOTCOMMA        reduce using rule 63 (valor -> cuerpo_Diccionario .)
    TWODOTS         reduce using rule 63 (valor -> cuerpo_Diccionario .)
    RBRACE          reduce using rule 63 (valor -> cuerpo_Diccionario .)
    RBRACKET        reduce using rule 63 (valor -> cuerpo_Diccionario .)
    EQUALS          reduce using rule 63 (valor -> cuerpo_Diccionario .)
    LANGLE          reduce using rule 63 (valor -> cuerpo_Diccionario .)
    RANGLE          reduce using rule 63 (valor -> cuerpo_Diccionario .)
    NEQ             reduce using rule 63 (valor -> cuerpo_Diccionario .)
    PRINT           reduce using rule 63 (valor -> cuerpo_Diccionario .)
    COMMENTLINE     reduce using rule 63 (valor -> cuerpo_Diccionario .)
    COMMENTBLOCK    reduce using rule 63 (valor -> cuerpo_Diccionario .)
    RETURN          reduce using rule 63 (valor -> cuerpo_Diccionario .)
    MAP             reduce using rule 63 (valor -> cuerpo_Diccionario .)
    DOUBLE          reduce using rule 63 (valor -> cuerpo_Diccionario .)
    STRING          reduce using rule 63 (valor -> cuerpo_Diccionario .)
    INT             reduce using rule 63 (valor -> cuerpo_Diccionario .)
    SET             reduce using rule 63 (valor -> cuerpo_Diccionario .)
    LIST            reduce using rule 63 (valor -> cuerpo_Diccionario .)
    BOOLEAN         reduce using rule 63 (valor -> cuerpo_Diccionario .)
    TUPLE           reduce using rule 63 (valor -> cuerpo_Diccionario .)
    VAR             reduce using rule 63 (valor -> cuerpo_Diccionario .)
    NUMBER          reduce using rule 63 (valor -> cuerpo_Diccionario .)
    FLOAT           reduce using rule 63 (valor -> cuerpo_Diccionario .)
    CHAINCHAR       reduce using rule 63 (valor -> cuerpo_Diccionario .)
    IF              reduce using rule 63 (valor -> cuerpo_Diccionario .)
    SWITCH          reduce using rule 63 (valor -> cuerpo_Diccionario .)
    FOR             reduce using rule 63 (valor -> cuerpo_Diccionario .)
    VOID            reduce using rule 63 (valor -> cuerpo_Diccionario .)
    VARIABLE        reduce using rule 63 (valor -> cuerpo_Diccionario .)
    DOLLAR          reduce using rule 63 (valor -> cuerpo_Diccionario .)
    TRUE            reduce using rule 63 (valor -> cuerpo_Diccionario .)
    FALSE           reduce using rule 63 (valor -> cuerpo_Diccionario .)
    LPAREN          reduce using rule 63 (valor -> cuerpo_Diccionario .)
    LBRACKET        reduce using rule 63 (valor -> cuerpo_Diccionario .)
    LBRACE          reduce using rule 63 (valor -> cuerpo_Diccionario .)
    $end            reduce using rule 63 (valor -> cuerpo_Diccionario .)
    BREAK           reduce using rule 63 (valor -> cuerpo_Diccionario .)
    AND             reduce using rule 63 (valor -> cuerpo_Diccionario .)
    OR              reduce using rule 63 (valor -> cuerpo_Diccionario .)


state 47

    (28) sentencia_If -> IF . LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> IF . LPAREN condiciones RPAREN LBRACE programa RBRACE

    LPAREN          shift and go to state 81


state 48

    (90) cuerpo_conjunto -> LBRACE . valores RBRACE
    (91) cuerpo_conjunto -> LBRACE . RBRACE
    (104) cuerpo_Diccionario -> LBRACE . duplas RBRACE
    (105) cuerpo_Diccionario -> LBRACE . RBRACE
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (106) duplas -> . dupla
    (107) duplas -> . dupla COMMA duplas
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (108) dupla -> . valor TWODOTS valor
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    RBRACE          shift and go to state 83
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    valores                        shift and go to state 82
    duplas                         shift and go to state 84
    valor                          shift and go to state 85
    dupla                          shift and go to state 86
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 49

    (83) sentencia_Switch -> SWITCH . LPAREN valor RPAREN LBRACE caso RBRACE

    LPAREN          shift and go to state 87


state 50

    (96) ciclo_for -> FOR . LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE

    LPAREN          shift and go to state 88


state 51

    (39) funcion_Void -> VOID . VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> VOID . VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> VOID . MAIN LPAREN RPAREN LBRACE programa RBRACE

    VARIABLE        shift and go to state 89
    MAIN            shift and go to state 90


state 52

    (66) variable -> DOLLAR . VARIABLE

    VARIABLE        shift and go to state 91


state 53

    (53) Bool -> TRUE .

    PLUS            reduce using rule 53 (Bool -> TRUE .)
    MINUS           reduce using rule 53 (Bool -> TRUE .)
    TIMES           reduce using rule 53 (Bool -> TRUE .)
    DIVIDE          reduce using rule 53 (Bool -> TRUE .)
    COMMA           reduce using rule 53 (Bool -> TRUE .)
    RPAREN          reduce using rule 53 (Bool -> TRUE .)
    DOTCOMMA        reduce using rule 53 (Bool -> TRUE .)
    TWODOTS         reduce using rule 53 (Bool -> TRUE .)
    RBRACE          reduce using rule 53 (Bool -> TRUE .)
    RBRACKET        reduce using rule 53 (Bool -> TRUE .)
    EQUALS          reduce using rule 53 (Bool -> TRUE .)
    LANGLE          reduce using rule 53 (Bool -> TRUE .)
    RANGLE          reduce using rule 53 (Bool -> TRUE .)
    NEQ             reduce using rule 53 (Bool -> TRUE .)
    PRINT           reduce using rule 53 (Bool -> TRUE .)
    COMMENTLINE     reduce using rule 53 (Bool -> TRUE .)
    COMMENTBLOCK    reduce using rule 53 (Bool -> TRUE .)
    RETURN          reduce using rule 53 (Bool -> TRUE .)
    MAP             reduce using rule 53 (Bool -> TRUE .)
    DOUBLE          reduce using rule 53 (Bool -> TRUE .)
    STRING          reduce using rule 53 (Bool -> TRUE .)
    INT             reduce using rule 53 (Bool -> TRUE .)
    SET             reduce using rule 53 (Bool -> TRUE .)
    LIST            reduce using rule 53 (Bool -> TRUE .)
    BOOLEAN         reduce using rule 53 (Bool -> TRUE .)
    TUPLE           reduce using rule 53 (Bool -> TRUE .)
    VAR             reduce using rule 53 (Bool -> TRUE .)
    NUMBER          reduce using rule 53 (Bool -> TRUE .)
    FLOAT           reduce using rule 53 (Bool -> TRUE .)
    CHAINCHAR       reduce using rule 53 (Bool -> TRUE .)
    IF              reduce using rule 53 (Bool -> TRUE .)
    SWITCH          reduce using rule 53 (Bool -> TRUE .)
    FOR             reduce using rule 53 (Bool -> TRUE .)
    VOID            reduce using rule 53 (Bool -> TRUE .)
    VARIABLE        reduce using rule 53 (Bool -> TRUE .)
    DOLLAR          reduce using rule 53 (Bool -> TRUE .)
    TRUE            reduce using rule 53 (Bool -> TRUE .)
    FALSE           reduce using rule 53 (Bool -> TRUE .)
    LPAREN          reduce using rule 53 (Bool -> TRUE .)
    LBRACKET        reduce using rule 53 (Bool -> TRUE .)
    LBRACE          reduce using rule 53 (Bool -> TRUE .)
    $end            reduce using rule 53 (Bool -> TRUE .)
    BREAK           reduce using rule 53 (Bool -> TRUE .)
    AND             reduce using rule 53 (Bool -> TRUE .)
    OR              reduce using rule 53 (Bool -> TRUE .)


state 54

    (54) Bool -> FALSE .

    PLUS            reduce using rule 54 (Bool -> FALSE .)
    MINUS           reduce using rule 54 (Bool -> FALSE .)
    TIMES           reduce using rule 54 (Bool -> FALSE .)
    DIVIDE          reduce using rule 54 (Bool -> FALSE .)
    COMMA           reduce using rule 54 (Bool -> FALSE .)
    RPAREN          reduce using rule 54 (Bool -> FALSE .)
    DOTCOMMA        reduce using rule 54 (Bool -> FALSE .)
    TWODOTS         reduce using rule 54 (Bool -> FALSE .)
    RBRACE          reduce using rule 54 (Bool -> FALSE .)
    RBRACKET        reduce using rule 54 (Bool -> FALSE .)
    EQUALS          reduce using rule 54 (Bool -> FALSE .)
    LANGLE          reduce using rule 54 (Bool -> FALSE .)
    RANGLE          reduce using rule 54 (Bool -> FALSE .)
    NEQ             reduce using rule 54 (Bool -> FALSE .)
    PRINT           reduce using rule 54 (Bool -> FALSE .)
    COMMENTLINE     reduce using rule 54 (Bool -> FALSE .)
    COMMENTBLOCK    reduce using rule 54 (Bool -> FALSE .)
    RETURN          reduce using rule 54 (Bool -> FALSE .)
    MAP             reduce using rule 54 (Bool -> FALSE .)
    DOUBLE          reduce using rule 54 (Bool -> FALSE .)
    STRING          reduce using rule 54 (Bool -> FALSE .)
    INT             reduce using rule 54 (Bool -> FALSE .)
    SET             reduce using rule 54 (Bool -> FALSE .)
    LIST            reduce using rule 54 (Bool -> FALSE .)
    BOOLEAN         reduce using rule 54 (Bool -> FALSE .)
    TUPLE           reduce using rule 54 (Bool -> FALSE .)
    VAR             reduce using rule 54 (Bool -> FALSE .)
    NUMBER          reduce using rule 54 (Bool -> FALSE .)
    FLOAT           reduce using rule 54 (Bool -> FALSE .)
    CHAINCHAR       reduce using rule 54 (Bool -> FALSE .)
    IF              reduce using rule 54 (Bool -> FALSE .)
    SWITCH          reduce using rule 54 (Bool -> FALSE .)
    FOR             reduce using rule 54 (Bool -> FALSE .)
    VOID            reduce using rule 54 (Bool -> FALSE .)
    VARIABLE        reduce using rule 54 (Bool -> FALSE .)
    DOLLAR          reduce using rule 54 (Bool -> FALSE .)
    TRUE            reduce using rule 54 (Bool -> FALSE .)
    FALSE           reduce using rule 54 (Bool -> FALSE .)
    LPAREN          reduce using rule 54 (Bool -> FALSE .)
    LBRACKET        reduce using rule 54 (Bool -> FALSE .)
    LBRACE          reduce using rule 54 (Bool -> FALSE .)
    $end            reduce using rule 54 (Bool -> FALSE .)
    BREAK           reduce using rule 54 (Bool -> FALSE .)
    AND             reduce using rule 54 (Bool -> FALSE .)
    OR              reduce using rule 54 (Bool -> FALSE .)


state 55

    (38) lista -> LBRACKET . valores RBRACKET
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    valores                        shift and go to state 92
    valor                          shift and go to state 59
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 56

    (2) programa -> programa cuerpo .

    PRINT           reduce using rule 2 (programa -> programa cuerpo .)
    COMMENTLINE     reduce using rule 2 (programa -> programa cuerpo .)
    COMMENTBLOCK    reduce using rule 2 (programa -> programa cuerpo .)
    RETURN          reduce using rule 2 (programa -> programa cuerpo .)
    MAP             reduce using rule 2 (programa -> programa cuerpo .)
    DOUBLE          reduce using rule 2 (programa -> programa cuerpo .)
    STRING          reduce using rule 2 (programa -> programa cuerpo .)
    INT             reduce using rule 2 (programa -> programa cuerpo .)
    SET             reduce using rule 2 (programa -> programa cuerpo .)
    LIST            reduce using rule 2 (programa -> programa cuerpo .)
    BOOLEAN         reduce using rule 2 (programa -> programa cuerpo .)
    TUPLE           reduce using rule 2 (programa -> programa cuerpo .)
    VAR             reduce using rule 2 (programa -> programa cuerpo .)
    NUMBER          reduce using rule 2 (programa -> programa cuerpo .)
    FLOAT           reduce using rule 2 (programa -> programa cuerpo .)
    CHAINCHAR       reduce using rule 2 (programa -> programa cuerpo .)
    IF              reduce using rule 2 (programa -> programa cuerpo .)
    SWITCH          reduce using rule 2 (programa -> programa cuerpo .)
    FOR             reduce using rule 2 (programa -> programa cuerpo .)
    VOID            reduce using rule 2 (programa -> programa cuerpo .)
    VARIABLE        reduce using rule 2 (programa -> programa cuerpo .)
    DOLLAR          reduce using rule 2 (programa -> programa cuerpo .)
    TRUE            reduce using rule 2 (programa -> programa cuerpo .)
    FALSE           reduce using rule 2 (programa -> programa cuerpo .)
    LPAREN          reduce using rule 2 (programa -> programa cuerpo .)
    LBRACKET        reduce using rule 2 (programa -> programa cuerpo .)
    LBRACE          reduce using rule 2 (programa -> programa cuerpo .)
    $end            reduce using rule 2 (programa -> programa cuerpo .)
    RBRACE          reduce using rule 2 (programa -> programa cuerpo .)
    BREAK           reduce using rule 2 (programa -> programa cuerpo .)


state 57

    (23) impresion -> PRINT LPAREN . valores RPAREN DOTCOMMA
    (24) impresion -> PRINT LPAREN . CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> PRINT LPAREN . operacion RPAREN DOTCOMMA
    (26) impresion -> PRINT LPAREN . condiciones RPAREN DOTCOMMA
    (27) impresion -> PRINT LPAREN . RPAREN DOTCOMMA
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (78) operacion -> . valor operador expresion
    (32) condiciones -> . condicion
    (33) condiciones -> . condicion conector condiciones
    (34) condiciones -> . Bool
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (31) condicion -> . valor Comparador valor
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    CHAINCHAR       shift and go to state 95
    RPAREN          shift and go to state 94
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    DOLLAR          shift and go to state 52
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    valores                        shift and go to state 93
    operacion                      shift and go to state 96
    condiciones                    shift and go to state 97
    valor                          shift and go to state 98
    condicion                      shift and go to state 99
    Bool                           shift and go to state 100
    variable                       shift and go to state 39
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 58

    (50) tupla -> LPAREN valores . RPAREN

    RPAREN          shift and go to state 101


state 59

    (51) valores -> valor .
    (52) valores -> valor . COMMA valores

    RPAREN          reduce using rule 51 (valores -> valor .)
    RBRACKET        reduce using rule 51 (valores -> valor .)
    RBRACE          reduce using rule 51 (valores -> valor .)
    COMMA           shift and go to state 102


state 60

    (60) valor -> tupla .

    COMMA           reduce using rule 60 (valor -> tupla .)
    RPAREN          reduce using rule 60 (valor -> tupla .)
    DOTCOMMA        reduce using rule 60 (valor -> tupla .)
    TWODOTS         reduce using rule 60 (valor -> tupla .)
    RBRACE          reduce using rule 60 (valor -> tupla .)
    RBRACKET        reduce using rule 60 (valor -> tupla .)
    PLUS            reduce using rule 60 (valor -> tupla .)
    MINUS           reduce using rule 60 (valor -> tupla .)
    TIMES           reduce using rule 60 (valor -> tupla .)
    DIVIDE          reduce using rule 60 (valor -> tupla .)
    EQUALS          reduce using rule 60 (valor -> tupla .)
    LANGLE          reduce using rule 60 (valor -> tupla .)
    RANGLE          reduce using rule 60 (valor -> tupla .)
    NEQ             reduce using rule 60 (valor -> tupla .)
    PRINT           reduce using rule 60 (valor -> tupla .)
    COMMENTLINE     reduce using rule 60 (valor -> tupla .)
    COMMENTBLOCK    reduce using rule 60 (valor -> tupla .)
    RETURN          reduce using rule 60 (valor -> tupla .)
    MAP             reduce using rule 60 (valor -> tupla .)
    DOUBLE          reduce using rule 60 (valor -> tupla .)
    STRING          reduce using rule 60 (valor -> tupla .)
    INT             reduce using rule 60 (valor -> tupla .)
    SET             reduce using rule 60 (valor -> tupla .)
    LIST            reduce using rule 60 (valor -> tupla .)
    BOOLEAN         reduce using rule 60 (valor -> tupla .)
    TUPLE           reduce using rule 60 (valor -> tupla .)
    VAR             reduce using rule 60 (valor -> tupla .)
    NUMBER          reduce using rule 60 (valor -> tupla .)
    FLOAT           reduce using rule 60 (valor -> tupla .)
    CHAINCHAR       reduce using rule 60 (valor -> tupla .)
    IF              reduce using rule 60 (valor -> tupla .)
    SWITCH          reduce using rule 60 (valor -> tupla .)
    FOR             reduce using rule 60 (valor -> tupla .)
    VOID            reduce using rule 60 (valor -> tupla .)
    VARIABLE        reduce using rule 60 (valor -> tupla .)
    DOLLAR          reduce using rule 60 (valor -> tupla .)
    TRUE            reduce using rule 60 (valor -> tupla .)
    FALSE           reduce using rule 60 (valor -> tupla .)
    LPAREN          reduce using rule 60 (valor -> tupla .)
    LBRACKET        reduce using rule 60 (valor -> tupla .)
    LBRACE          reduce using rule 60 (valor -> tupla .)
    $end            reduce using rule 60 (valor -> tupla .)
    BREAK           reduce using rule 60 (valor -> tupla .)
    AND             reduce using rule 60 (valor -> tupla .)
    OR              reduce using rule 60 (valor -> tupla .)


state 61

    (67) variable -> tipo . VARIABLE

    VARIABLE        shift and go to state 103


state 62

    (68) tipo -> MAP .

    VARIABLE        reduce using rule 68 (tipo -> MAP .)
    COMMA           reduce using rule 68 (tipo -> MAP .)
    RANGLE          reduce using rule 68 (tipo -> MAP .)


state 63

    (72) tipo -> SET .

    VARIABLE        reduce using rule 72 (tipo -> SET .)
    COMMA           reduce using rule 72 (tipo -> SET .)
    RANGLE          reduce using rule 72 (tipo -> SET .)


state 64

    (73) tipo -> LIST .

    VARIABLE        reduce using rule 73 (tipo -> LIST .)
    COMMA           reduce using rule 73 (tipo -> LIST .)
    RANGLE          reduce using rule 73 (tipo -> LIST .)


state 65

    (75) tipo -> TUPLE .

    VARIABLE        reduce using rule 75 (tipo -> TUPLE .)
    COMMA           reduce using rule 75 (tipo -> TUPLE .)
    RANGLE          reduce using rule 75 (tipo -> TUPLE .)


state 66

    (77) declaracion -> tipo VARIABLE . EQUALS valor DOTCOMMA
    (101) funcion_Anonima -> tipo VARIABLE . EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (86) funcion_flecha -> tipo VARIABLE . LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> tipo VARIABLE . LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (67) variable -> tipo VARIABLE .

    EQUALS          shift and go to state 104
    LPAREN          shift and go to state 105
    PLUS            reduce using rule 67 (variable -> tipo VARIABLE .)
    MINUS           reduce using rule 67 (variable -> tipo VARIABLE .)
    TIMES           reduce using rule 67 (variable -> tipo VARIABLE .)
    DIVIDE          reduce using rule 67 (variable -> tipo VARIABLE .)


state 67

    (81) funcion -> VARIABLE LPAREN . valores RPAREN
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    valores                        shift and go to state 106
    valor                          shift and go to state 59
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 68

    (82) funcion_Data -> VARIABLE DOT . VARIABLE LPAREN valores RPAREN DOTCOMMA

    VARIABLE        shift and go to state 107


state 69

    (78) operacion -> valor operador . expresion
    (79) expresion -> . LPAREN valor operador expresion RPAREN
    (80) expresion -> . valor
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    LPAREN          shift and go to state 110
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    valor                          shift and go to state 108
    expresion                      shift and go to state 109
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 70

    (92) operador -> PLUS .

    LPAREN          reduce using rule 92 (operador -> PLUS .)
    NUMBER          reduce using rule 92 (operador -> PLUS .)
    FLOAT           reduce using rule 92 (operador -> PLUS .)
    CHAINCHAR       reduce using rule 92 (operador -> PLUS .)
    DOLLAR          reduce using rule 92 (operador -> PLUS .)
    TRUE            reduce using rule 92 (operador -> PLUS .)
    FALSE           reduce using rule 92 (operador -> PLUS .)
    LBRACKET        reduce using rule 92 (operador -> PLUS .)
    LBRACE          reduce using rule 92 (operador -> PLUS .)
    MAP             reduce using rule 92 (operador -> PLUS .)
    DOUBLE          reduce using rule 92 (operador -> PLUS .)
    STRING          reduce using rule 92 (operador -> PLUS .)
    INT             reduce using rule 92 (operador -> PLUS .)
    SET             reduce using rule 92 (operador -> PLUS .)
    LIST            reduce using rule 92 (operador -> PLUS .)
    BOOLEAN         reduce using rule 92 (operador -> PLUS .)
    TUPLE           reduce using rule 92 (operador -> PLUS .)
    VAR             reduce using rule 92 (operador -> PLUS .)


state 71

    (93) operador -> MINUS .

    LPAREN          reduce using rule 93 (operador -> MINUS .)
    NUMBER          reduce using rule 93 (operador -> MINUS .)
    FLOAT           reduce using rule 93 (operador -> MINUS .)
    CHAINCHAR       reduce using rule 93 (operador -> MINUS .)
    DOLLAR          reduce using rule 93 (operador -> MINUS .)
    TRUE            reduce using rule 93 (operador -> MINUS .)
    FALSE           reduce using rule 93 (operador -> MINUS .)
    LBRACKET        reduce using rule 93 (operador -> MINUS .)
    LBRACE          reduce using rule 93 (operador -> MINUS .)
    MAP             reduce using rule 93 (operador -> MINUS .)
    DOUBLE          reduce using rule 93 (operador -> MINUS .)
    STRING          reduce using rule 93 (operador -> MINUS .)
    INT             reduce using rule 93 (operador -> MINUS .)
    SET             reduce using rule 93 (operador -> MINUS .)
    LIST            reduce using rule 93 (operador -> MINUS .)
    BOOLEAN         reduce using rule 93 (operador -> MINUS .)
    TUPLE           reduce using rule 93 (operador -> MINUS .)
    VAR             reduce using rule 93 (operador -> MINUS .)


state 72

    (94) operador -> TIMES .

    LPAREN          reduce using rule 94 (operador -> TIMES .)
    NUMBER          reduce using rule 94 (operador -> TIMES .)
    FLOAT           reduce using rule 94 (operador -> TIMES .)
    CHAINCHAR       reduce using rule 94 (operador -> TIMES .)
    DOLLAR          reduce using rule 94 (operador -> TIMES .)
    TRUE            reduce using rule 94 (operador -> TIMES .)
    FALSE           reduce using rule 94 (operador -> TIMES .)
    LBRACKET        reduce using rule 94 (operador -> TIMES .)
    LBRACE          reduce using rule 94 (operador -> TIMES .)
    MAP             reduce using rule 94 (operador -> TIMES .)
    DOUBLE          reduce using rule 94 (operador -> TIMES .)
    STRING          reduce using rule 94 (operador -> TIMES .)
    INT             reduce using rule 94 (operador -> TIMES .)
    SET             reduce using rule 94 (operador -> TIMES .)
    LIST            reduce using rule 94 (operador -> TIMES .)
    BOOLEAN         reduce using rule 94 (operador -> TIMES .)
    TUPLE           reduce using rule 94 (operador -> TIMES .)
    VAR             reduce using rule 94 (operador -> TIMES .)


state 73

    (95) operador -> DIVIDE .

    LPAREN          reduce using rule 95 (operador -> DIVIDE .)
    NUMBER          reduce using rule 95 (operador -> DIVIDE .)
    FLOAT           reduce using rule 95 (operador -> DIVIDE .)
    CHAINCHAR       reduce using rule 95 (operador -> DIVIDE .)
    DOLLAR          reduce using rule 95 (operador -> DIVIDE .)
    TRUE            reduce using rule 95 (operador -> DIVIDE .)
    FALSE           reduce using rule 95 (operador -> DIVIDE .)
    LBRACKET        reduce using rule 95 (operador -> DIVIDE .)
    LBRACE          reduce using rule 95 (operador -> DIVIDE .)
    MAP             reduce using rule 95 (operador -> DIVIDE .)
    DOUBLE          reduce using rule 95 (operador -> DIVIDE .)
    STRING          reduce using rule 95 (operador -> DIVIDE .)
    INT             reduce using rule 95 (operador -> DIVIDE .)
    SET             reduce using rule 95 (operador -> DIVIDE .)
    LIST            reduce using rule 95 (operador -> DIVIDE .)
    BOOLEAN         reduce using rule 95 (operador -> DIVIDE .)
    TUPLE           reduce using rule 95 (operador -> DIVIDE .)
    VAR             reduce using rule 95 (operador -> DIVIDE .)


state 74

    (42) return -> RETURN valor . DOTCOMMA

    DOTCOMMA        shift and go to state 111


state 75

    (103) diccionario -> MAP LANGLE . tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    tipo                           shift and go to state 112

state 76

    (88) Conjunto -> SET VARIABLE . EQUALS cuerpo_conjunto DOTCOMMA

    EQUALS          shift and go to state 113


state 77

    (89) Conjunto -> SET LANGLE . tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    tipo                           shift and go to state 114

state 78

    (37) estructura_List -> LIST LANGLE . tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    tipo                           shift and go to state 115

state 79

    (49) estructura_tupla -> TUPLE LANGLE . tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    tipo                           shift and go to state 116

state 80

    (102) funcion_Anonima -> tupla LBRACE . programa RBRACE DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    tupla                          shift and go to state 43
    programa                       shift and go to state 117
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 81

    (28) sentencia_If -> IF LPAREN . condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> IF LPAREN . condiciones RPAREN LBRACE programa RBRACE
    (32) condiciones -> . condicion
    (33) condiciones -> . condicion conector condiciones
    (34) condiciones -> . Bool
    (31) condicion -> . valor Comparador valor
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    condiciones                    shift and go to state 118
    condicion                      shift and go to state 99
    Bool                           shift and go to state 100
    valor                          shift and go to state 119
    variable                       shift and go to state 39
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 82

    (90) cuerpo_conjunto -> LBRACE valores . RBRACE

    RBRACE          shift and go to state 120


state 83

    (91) cuerpo_conjunto -> LBRACE RBRACE .
    (105) cuerpo_Diccionario -> LBRACE RBRACE .

  ! reduce/reduce conflict for PLUS resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for MINUS resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for TIMES resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for COMMA resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for DOTCOMMA resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for TWODOTS resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for EQUALS resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for LANGLE resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for RANGLE resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for NEQ resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for PRINT resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for COMMENTLINE resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for COMMENTBLOCK resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for RETURN resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for MAP resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for STRING resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for INT resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for SET resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for LIST resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for TUPLE resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for VAR resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for NUMBER resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for FLOAT resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for CHAINCHAR resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for IF resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for SWITCH resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for FOR resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for VOID resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for DOLLAR resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for TRUE resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for FALSE resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for LPAREN resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for $end resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for BREAK resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for AND resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for OR resolved using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    PLUS            reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    MINUS           reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    TIMES           reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    DIVIDE          reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    COMMA           reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    RPAREN          reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    DOTCOMMA        reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    TWODOTS         reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    RBRACE          reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    EQUALS          reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    LANGLE          reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    RANGLE          reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    NEQ             reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    PRINT           reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    COMMENTLINE     reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    COMMENTBLOCK    reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    RETURN          reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    MAP             reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    STRING          reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    INT             reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    SET             reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    LIST            reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    BOOLEAN         reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    TUPLE           reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    VAR             reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    NUMBER          reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    FLOAT           reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    CHAINCHAR       reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    IF              reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    SWITCH          reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    FOR             reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    VOID            reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    VARIABLE        reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    DOLLAR          reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    TRUE            reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    FALSE           reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    LPAREN          reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    LBRACE          reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    $end            reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    BREAK           reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    AND             reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)
    OR              reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)

  ! PLUS            [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! MINUS           [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! TIMES           [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! DIVIDE          [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! COMMA           [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! RPAREN          [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! DOTCOMMA        [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! TWODOTS         [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! RBRACE          [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! RBRACKET        [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! EQUALS          [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! LANGLE          [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! RANGLE          [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! NEQ             [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! PRINT           [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! COMMENTLINE     [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! COMMENTBLOCK    [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! RETURN          [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! MAP             [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! DOUBLE          [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! STRING          [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! INT             [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! SET             [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! LIST            [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! BOOLEAN         [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! TUPLE           [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! VAR             [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! NUMBER          [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! FLOAT           [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! CHAINCHAR       [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! IF              [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! SWITCH          [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! FOR             [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! VOID            [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! VARIABLE        [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! DOLLAR          [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! TRUE            [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! FALSE           [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! LPAREN          [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! LBRACKET        [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! LBRACE          [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! $end            [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! BREAK           [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! AND             [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! OR              [ reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .) ]


state 84

    (104) cuerpo_Diccionario -> LBRACE duplas . RBRACE

    RBRACE          shift and go to state 121


state 85

    (51) valores -> valor .
    (52) valores -> valor . COMMA valores
    (108) dupla -> valor . TWODOTS valor

    RBRACE          reduce using rule 51 (valores -> valor .)
    COMMA           shift and go to state 102
    TWODOTS         shift and go to state 122


state 86

    (106) duplas -> dupla .
    (107) duplas -> dupla . COMMA duplas

    RBRACE          reduce using rule 106 (duplas -> dupla .)
    COMMA           shift and go to state 123


state 87

    (83) sentencia_Switch -> SWITCH LPAREN . valor RPAREN LBRACE caso RBRACE
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    valor                          shift and go to state 124
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 88

    (96) ciclo_for -> FOR LPAREN . declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    declaracion                    shift and go to state 125
    tipo                           shift and go to state 126

state 89

    (39) funcion_Void -> VOID VARIABLE . LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> VOID VARIABLE . LPAREN RPAREN LBRACE programa RBRACE

    LPAREN          shift and go to state 127


state 90

    (41) funcion_Void -> VOID MAIN . LPAREN RPAREN LBRACE programa RBRACE

    LPAREN          shift and go to state 128


state 91

    (66) variable -> DOLLAR VARIABLE .

    PLUS            reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    MINUS           reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    TIMES           reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    DIVIDE          reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    COMMA           reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    RPAREN          reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    DOTCOMMA        reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    TWODOTS         reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    RBRACE          reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    RBRACKET        reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    EQUALS          reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    LANGLE          reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    RANGLE          reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    NEQ             reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    PRINT           reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    COMMENTLINE     reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    COMMENTBLOCK    reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    RETURN          reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    MAP             reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    DOUBLE          reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    STRING          reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    INT             reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    SET             reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    LIST            reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    BOOLEAN         reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    TUPLE           reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    VAR             reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    NUMBER          reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    FLOAT           reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    CHAINCHAR       reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    IF              reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    SWITCH          reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    FOR             reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    VOID            reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    VARIABLE        reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    DOLLAR          reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    TRUE            reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    FALSE           reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    LPAREN          reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    LBRACKET        reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    LBRACE          reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    $end            reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    BREAK           reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    AND             reduce using rule 66 (variable -> DOLLAR VARIABLE .)
    OR              reduce using rule 66 (variable -> DOLLAR VARIABLE .)


state 92

    (38) lista -> LBRACKET valores . RBRACKET

    RBRACKET        shift and go to state 129


state 93

    (23) impresion -> PRINT LPAREN valores . RPAREN DOTCOMMA

    RPAREN          shift and go to state 130


state 94

    (27) impresion -> PRINT LPAREN RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 131


state 95

    (24) impresion -> PRINT LPAREN CHAINCHAR . RPAREN DOTCOMMA
    (58) valor -> CHAINCHAR .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 132
    COMMA           reduce using rule 58 (valor -> CHAINCHAR .)
    PLUS            reduce using rule 58 (valor -> CHAINCHAR .)
    MINUS           reduce using rule 58 (valor -> CHAINCHAR .)
    TIMES           reduce using rule 58 (valor -> CHAINCHAR .)
    DIVIDE          reduce using rule 58 (valor -> CHAINCHAR .)
    EQUALS          reduce using rule 58 (valor -> CHAINCHAR .)
    LANGLE          reduce using rule 58 (valor -> CHAINCHAR .)
    RANGLE          reduce using rule 58 (valor -> CHAINCHAR .)
    NEQ             reduce using rule 58 (valor -> CHAINCHAR .)

  ! RPAREN          [ reduce using rule 58 (valor -> CHAINCHAR .) ]


state 96

    (25) impresion -> PRINT LPAREN operacion . RPAREN DOTCOMMA

    RPAREN          shift and go to state 133


state 97

    (26) impresion -> PRINT LPAREN condiciones . RPAREN DOTCOMMA

    RPAREN          shift and go to state 134


state 98

    (51) valores -> valor .
    (52) valores -> valor . COMMA valores
    (78) operacion -> valor . operador expresion
    (31) condicion -> valor . Comparador valor
    (92) operador -> . PLUS
    (93) operador -> . MINUS
    (94) operador -> . TIMES
    (95) operador -> . DIVIDE
    (43) Comparador -> . EQUALS EQUALS
    (44) Comparador -> . LANGLE
    (45) Comparador -> . RANGLE
    (46) Comparador -> . LANGLE EQUALS
    (47) Comparador -> . RANGLE EQUALS
    (48) Comparador -> . NEQ

    RPAREN          reduce using rule 51 (valores -> valor .)
    COMMA           shift and go to state 102
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    EQUALS          shift and go to state 136
    LANGLE          shift and go to state 137
    RANGLE          shift and go to state 138
    NEQ             shift and go to state 139

    operador                       shift and go to state 69
    Comparador                     shift and go to state 135

state 99

    (32) condiciones -> condicion .
    (33) condiciones -> condicion . conector condiciones
    (35) conector -> . AND
    (36) conector -> . OR

    RPAREN          reduce using rule 32 (condiciones -> condicion .)
    AND             shift and go to state 141
    OR              shift and go to state 142

    conector                       shift and go to state 140

state 100

    (34) condiciones -> Bool .
    (59) valor -> Bool .

  ! reduce/reduce conflict for RPAREN resolved using rule 34 (condiciones -> Bool .)
    RPAREN          reduce using rule 34 (condiciones -> Bool .)
    COMMA           reduce using rule 59 (valor -> Bool .)
    PLUS            reduce using rule 59 (valor -> Bool .)
    MINUS           reduce using rule 59 (valor -> Bool .)
    TIMES           reduce using rule 59 (valor -> Bool .)
    DIVIDE          reduce using rule 59 (valor -> Bool .)
    EQUALS          reduce using rule 59 (valor -> Bool .)
    LANGLE          reduce using rule 59 (valor -> Bool .)
    RANGLE          reduce using rule 59 (valor -> Bool .)
    NEQ             reduce using rule 59 (valor -> Bool .)

  ! RPAREN          [ reduce using rule 59 (valor -> Bool .) ]


state 101

    (50) tupla -> LPAREN valores RPAREN .

    LBRACE          reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    PLUS            reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    MINUS           reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    TIMES           reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    DIVIDE          reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    COMMA           reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    RPAREN          reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    DOTCOMMA        reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    TWODOTS         reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    RBRACE          reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    RBRACKET        reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    EQUALS          reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    LANGLE          reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    RANGLE          reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    NEQ             reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    PRINT           reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    COMMENTLINE     reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    COMMENTBLOCK    reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    RETURN          reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    MAP             reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    DOUBLE          reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    STRING          reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    INT             reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    SET             reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    LIST            reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    BOOLEAN         reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    TUPLE           reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    VAR             reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    NUMBER          reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    FLOAT           reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    CHAINCHAR       reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    IF              reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    SWITCH          reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    FOR             reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    VOID            reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    VARIABLE        reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    DOLLAR          reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    TRUE            reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    FALSE           reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    LPAREN          reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    LBRACKET        reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    $end            reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    BREAK           reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    AND             reduce using rule 50 (tupla -> LPAREN valores RPAREN .)
    OR              reduce using rule 50 (tupla -> LPAREN valores RPAREN .)


state 102

    (52) valores -> valor COMMA . valores
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    valor                          shift and go to state 59
    valores                        shift and go to state 143
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 103

    (67) variable -> tipo VARIABLE .

    COMMA           reduce using rule 67 (variable -> tipo VARIABLE .)
    RPAREN          reduce using rule 67 (variable -> tipo VARIABLE .)
    DOTCOMMA        reduce using rule 67 (variable -> tipo VARIABLE .)
    TWODOTS         reduce using rule 67 (variable -> tipo VARIABLE .)
    RBRACE          reduce using rule 67 (variable -> tipo VARIABLE .)
    RBRACKET        reduce using rule 67 (variable -> tipo VARIABLE .)
    PLUS            reduce using rule 67 (variable -> tipo VARIABLE .)
    MINUS           reduce using rule 67 (variable -> tipo VARIABLE .)
    TIMES           reduce using rule 67 (variable -> tipo VARIABLE .)
    DIVIDE          reduce using rule 67 (variable -> tipo VARIABLE .)
    EQUALS          reduce using rule 67 (variable -> tipo VARIABLE .)
    LANGLE          reduce using rule 67 (variable -> tipo VARIABLE .)
    RANGLE          reduce using rule 67 (variable -> tipo VARIABLE .)
    NEQ             reduce using rule 67 (variable -> tipo VARIABLE .)
    PRINT           reduce using rule 67 (variable -> tipo VARIABLE .)
    COMMENTLINE     reduce using rule 67 (variable -> tipo VARIABLE .)
    COMMENTBLOCK    reduce using rule 67 (variable -> tipo VARIABLE .)
    RETURN          reduce using rule 67 (variable -> tipo VARIABLE .)
    MAP             reduce using rule 67 (variable -> tipo VARIABLE .)
    DOUBLE          reduce using rule 67 (variable -> tipo VARIABLE .)
    STRING          reduce using rule 67 (variable -> tipo VARIABLE .)
    INT             reduce using rule 67 (variable -> tipo VARIABLE .)
    SET             reduce using rule 67 (variable -> tipo VARIABLE .)
    LIST            reduce using rule 67 (variable -> tipo VARIABLE .)
    BOOLEAN         reduce using rule 67 (variable -> tipo VARIABLE .)
    TUPLE           reduce using rule 67 (variable -> tipo VARIABLE .)
    VAR             reduce using rule 67 (variable -> tipo VARIABLE .)
    NUMBER          reduce using rule 67 (variable -> tipo VARIABLE .)
    FLOAT           reduce using rule 67 (variable -> tipo VARIABLE .)
    CHAINCHAR       reduce using rule 67 (variable -> tipo VARIABLE .)
    IF              reduce using rule 67 (variable -> tipo VARIABLE .)
    SWITCH          reduce using rule 67 (variable -> tipo VARIABLE .)
    FOR             reduce using rule 67 (variable -> tipo VARIABLE .)
    VOID            reduce using rule 67 (variable -> tipo VARIABLE .)
    VARIABLE        reduce using rule 67 (variable -> tipo VARIABLE .)
    DOLLAR          reduce using rule 67 (variable -> tipo VARIABLE .)
    TRUE            reduce using rule 67 (variable -> tipo VARIABLE .)
    FALSE           reduce using rule 67 (variable -> tipo VARIABLE .)
    LPAREN          reduce using rule 67 (variable -> tipo VARIABLE .)
    LBRACKET        reduce using rule 67 (variable -> tipo VARIABLE .)
    LBRACE          reduce using rule 67 (variable -> tipo VARIABLE .)
    $end            reduce using rule 67 (variable -> tipo VARIABLE .)
    BREAK           reduce using rule 67 (variable -> tipo VARIABLE .)
    AND             reduce using rule 67 (variable -> tipo VARIABLE .)
    OR              reduce using rule 67 (variable -> tipo VARIABLE .)


state 104

    (77) declaracion -> tipo VARIABLE EQUALS . valor DOTCOMMA
    (101) funcion_Anonima -> tipo VARIABLE EQUALS . tupla LBRACE programa RBRACE DOTCOMMA
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (50) tupla -> . LPAREN valores RPAREN
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    LPAREN          shift and go to state 10
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    tipo                           shift and go to state 61
    valor                          shift and go to state 144
    tupla                          shift and go to state 145
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 105

    (86) funcion_flecha -> tipo VARIABLE LPAREN . valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> tipo VARIABLE LPAREN . RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    RPAREN          shift and go to state 147
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    tipo                           shift and go to state 61
    valores                        shift and go to state 146
    valor                          shift and go to state 59
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 106

    (81) funcion -> VARIABLE LPAREN valores . RPAREN

    RPAREN          shift and go to state 148


state 107

    (82) funcion_Data -> VARIABLE DOT VARIABLE . LPAREN valores RPAREN DOTCOMMA

    LPAREN          shift and go to state 149


state 108

    (80) expresion -> valor .

    PRINT           reduce using rule 80 (expresion -> valor .)
    COMMENTLINE     reduce using rule 80 (expresion -> valor .)
    COMMENTBLOCK    reduce using rule 80 (expresion -> valor .)
    RETURN          reduce using rule 80 (expresion -> valor .)
    MAP             reduce using rule 80 (expresion -> valor .)
    DOUBLE          reduce using rule 80 (expresion -> valor .)
    STRING          reduce using rule 80 (expresion -> valor .)
    INT             reduce using rule 80 (expresion -> valor .)
    SET             reduce using rule 80 (expresion -> valor .)
    LIST            reduce using rule 80 (expresion -> valor .)
    BOOLEAN         reduce using rule 80 (expresion -> valor .)
    TUPLE           reduce using rule 80 (expresion -> valor .)
    VAR             reduce using rule 80 (expresion -> valor .)
    NUMBER          reduce using rule 80 (expresion -> valor .)
    FLOAT           reduce using rule 80 (expresion -> valor .)
    CHAINCHAR       reduce using rule 80 (expresion -> valor .)
    IF              reduce using rule 80 (expresion -> valor .)
    SWITCH          reduce using rule 80 (expresion -> valor .)
    FOR             reduce using rule 80 (expresion -> valor .)
    VOID            reduce using rule 80 (expresion -> valor .)
    VARIABLE        reduce using rule 80 (expresion -> valor .)
    DOLLAR          reduce using rule 80 (expresion -> valor .)
    TRUE            reduce using rule 80 (expresion -> valor .)
    FALSE           reduce using rule 80 (expresion -> valor .)
    LPAREN          reduce using rule 80 (expresion -> valor .)
    LBRACKET        reduce using rule 80 (expresion -> valor .)
    LBRACE          reduce using rule 80 (expresion -> valor .)
    $end            reduce using rule 80 (expresion -> valor .)
    RPAREN          reduce using rule 80 (expresion -> valor .)
    RBRACE          reduce using rule 80 (expresion -> valor .)
    DOTCOMMA        reduce using rule 80 (expresion -> valor .)
    BREAK           reduce using rule 80 (expresion -> valor .)


state 109

    (78) operacion -> valor operador expresion .

    PRINT           reduce using rule 78 (operacion -> valor operador expresion .)
    COMMENTLINE     reduce using rule 78 (operacion -> valor operador expresion .)
    COMMENTBLOCK    reduce using rule 78 (operacion -> valor operador expresion .)
    RETURN          reduce using rule 78 (operacion -> valor operador expresion .)
    MAP             reduce using rule 78 (operacion -> valor operador expresion .)
    DOUBLE          reduce using rule 78 (operacion -> valor operador expresion .)
    STRING          reduce using rule 78 (operacion -> valor operador expresion .)
    INT             reduce using rule 78 (operacion -> valor operador expresion .)
    SET             reduce using rule 78 (operacion -> valor operador expresion .)
    LIST            reduce using rule 78 (operacion -> valor operador expresion .)
    BOOLEAN         reduce using rule 78 (operacion -> valor operador expresion .)
    TUPLE           reduce using rule 78 (operacion -> valor operador expresion .)
    VAR             reduce using rule 78 (operacion -> valor operador expresion .)
    NUMBER          reduce using rule 78 (operacion -> valor operador expresion .)
    FLOAT           reduce using rule 78 (operacion -> valor operador expresion .)
    CHAINCHAR       reduce using rule 78 (operacion -> valor operador expresion .)
    IF              reduce using rule 78 (operacion -> valor operador expresion .)
    SWITCH          reduce using rule 78 (operacion -> valor operador expresion .)
    FOR             reduce using rule 78 (operacion -> valor operador expresion .)
    VOID            reduce using rule 78 (operacion -> valor operador expresion .)
    VARIABLE        reduce using rule 78 (operacion -> valor operador expresion .)
    DOLLAR          reduce using rule 78 (operacion -> valor operador expresion .)
    TRUE            reduce using rule 78 (operacion -> valor operador expresion .)
    FALSE           reduce using rule 78 (operacion -> valor operador expresion .)
    LPAREN          reduce using rule 78 (operacion -> valor operador expresion .)
    LBRACKET        reduce using rule 78 (operacion -> valor operador expresion .)
    LBRACE          reduce using rule 78 (operacion -> valor operador expresion .)
    $end            reduce using rule 78 (operacion -> valor operador expresion .)
    RPAREN          reduce using rule 78 (operacion -> valor operador expresion .)
    RBRACE          reduce using rule 78 (operacion -> valor operador expresion .)
    DOTCOMMA        reduce using rule 78 (operacion -> valor operador expresion .)
    BREAK           reduce using rule 78 (operacion -> valor operador expresion .)


state 110

    (79) expresion -> LPAREN . valor operador expresion RPAREN
    (50) tupla -> LPAREN . valores RPAREN
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    valor                          shift and go to state 150
    valores                        shift and go to state 58
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 111

    (42) return -> RETURN valor DOTCOMMA .

    PRINT           reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    COMMENTLINE     reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    RETURN          reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    MAP             reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    DOUBLE          reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    STRING          reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    INT             reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    SET             reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    LIST            reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    BOOLEAN         reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    TUPLE           reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    VAR             reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    NUMBER          reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    FLOAT           reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    CHAINCHAR       reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    IF              reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    SWITCH          reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    FOR             reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    VOID            reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    VARIABLE        reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    DOLLAR          reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    TRUE            reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    FALSE           reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    LPAREN          reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    LBRACKET        reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    LBRACE          reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    $end            reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    RBRACE          reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    DOTCOMMA        reduce using rule 42 (return -> RETURN valor DOTCOMMA .)
    BREAK           reduce using rule 42 (return -> RETURN valor DOTCOMMA .)


state 112

    (103) diccionario -> MAP LANGLE tipo . COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    COMMA           shift and go to state 151


state 113

    (88) Conjunto -> SET VARIABLE EQUALS . cuerpo_conjunto DOTCOMMA
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE

    LBRACE          shift and go to state 153

    cuerpo_conjunto                shift and go to state 152

state 114

    (89) Conjunto -> SET LANGLE tipo . RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA

    RANGLE          shift and go to state 154


state 115

    (37) estructura_List -> LIST LANGLE tipo . RANGLE VARIABLE EQUALS lista DOTCOMMA

    RANGLE          shift and go to state 155


state 116

    (49) estructura_tupla -> TUPLE LANGLE tipo . RANGLE VARIABLE EQUALS tupla DOTCOMMA

    RANGLE          shift and go to state 156


state 117

    (102) funcion_Anonima -> tupla LBRACE programa . RBRACE DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    RBRACE          shift and go to state 157
    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    tupla                          shift and go to state 43
    cuerpo                         shift and go to state 56
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 118

    (28) sentencia_If -> IF LPAREN condiciones . RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> IF LPAREN condiciones . RPAREN LBRACE programa RBRACE

    RPAREN          shift and go to state 158


state 119

    (31) condicion -> valor . Comparador valor
    (43) Comparador -> . EQUALS EQUALS
    (44) Comparador -> . LANGLE
    (45) Comparador -> . RANGLE
    (46) Comparador -> . LANGLE EQUALS
    (47) Comparador -> . RANGLE EQUALS
    (48) Comparador -> . NEQ

    EQUALS          shift and go to state 136
    LANGLE          shift and go to state 137
    RANGLE          shift and go to state 138
    NEQ             shift and go to state 139

    Comparador                     shift and go to state 135

state 120

    (90) cuerpo_conjunto -> LBRACE valores RBRACE .

    PLUS            reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    MINUS           reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    TIMES           reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    DIVIDE          reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    COMMA           reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    RPAREN          reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    DOTCOMMA        reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    TWODOTS         reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    RBRACE          reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    RBRACKET        reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    EQUALS          reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    LANGLE          reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    RANGLE          reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    NEQ             reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    PRINT           reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    COMMENTLINE     reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    COMMENTBLOCK    reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    RETURN          reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    MAP             reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    DOUBLE          reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    STRING          reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    INT             reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    SET             reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    LIST            reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    BOOLEAN         reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    TUPLE           reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    VAR             reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    NUMBER          reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    FLOAT           reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    CHAINCHAR       reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    IF              reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    SWITCH          reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    FOR             reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    VOID            reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    VARIABLE        reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    DOLLAR          reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    TRUE            reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    FALSE           reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    LPAREN          reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    LBRACKET        reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    LBRACE          reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    $end            reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    BREAK           reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    AND             reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    OR              reduce using rule 90 (cuerpo_conjunto -> LBRACE valores RBRACE .)


state 121

    (104) cuerpo_Diccionario -> LBRACE duplas RBRACE .

    PLUS            reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    MINUS           reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    TIMES           reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    DIVIDE          reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    COMMA           reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    RPAREN          reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    DOTCOMMA        reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    TWODOTS         reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    RBRACE          reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    RBRACKET        reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    EQUALS          reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    LANGLE          reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    RANGLE          reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    NEQ             reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    PRINT           reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    COMMENTLINE     reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    COMMENTBLOCK    reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    RETURN          reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    MAP             reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    DOUBLE          reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    STRING          reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    INT             reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    SET             reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    LIST            reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    BOOLEAN         reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    TUPLE           reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    VAR             reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    NUMBER          reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    FLOAT           reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    CHAINCHAR       reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    IF              reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    SWITCH          reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    FOR             reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    VOID            reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    VARIABLE        reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    DOLLAR          reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    TRUE            reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    FALSE           reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    LPAREN          reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    LBRACKET        reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    LBRACE          reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    $end            reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    BREAK           reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    AND             reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    OR              reduce using rule 104 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)


state 122

    (108) dupla -> valor TWODOTS . valor
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    valor                          shift and go to state 159
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 123

    (107) duplas -> dupla COMMA . duplas
    (106) duplas -> . dupla
    (107) duplas -> . dupla COMMA duplas
    (108) dupla -> . valor TWODOTS valor
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    dupla                          shift and go to state 86
    duplas                         shift and go to state 160
    valor                          shift and go to state 161
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 124

    (83) sentencia_Switch -> SWITCH LPAREN valor . RPAREN LBRACE caso RBRACE

    RPAREN          shift and go to state 162


state 125

    (96) ciclo_for -> FOR LPAREN declaracion . condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (31) condicion -> . valor Comparador valor
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    condicion                      shift and go to state 163
    valor                          shift and go to state 119
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 126

    (77) declaracion -> tipo . VARIABLE EQUALS valor DOTCOMMA

    VARIABLE        shift and go to state 164


state 127

    (39) funcion_Void -> VOID VARIABLE LPAREN . valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> VOID VARIABLE LPAREN . RPAREN LBRACE programa RBRACE
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    RPAREN          shift and go to state 166
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    valores                        shift and go to state 165
    valor                          shift and go to state 59
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 128

    (41) funcion_Void -> VOID MAIN LPAREN . RPAREN LBRACE programa RBRACE

    RPAREN          shift and go to state 167


state 129

    (38) lista -> LBRACKET valores RBRACKET .

    PLUS            reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    MINUS           reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    TIMES           reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    DIVIDE          reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    COMMA           reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    RPAREN          reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    DOTCOMMA        reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    TWODOTS         reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    RBRACE          reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    RBRACKET        reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    EQUALS          reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    LANGLE          reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    RANGLE          reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    NEQ             reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    PRINT           reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    COMMENTLINE     reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    COMMENTBLOCK    reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    RETURN          reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    MAP             reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    DOUBLE          reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    STRING          reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    INT             reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    SET             reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    LIST            reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    BOOLEAN         reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    TUPLE           reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    VAR             reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    NUMBER          reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    FLOAT           reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    CHAINCHAR       reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    IF              reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    SWITCH          reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    FOR             reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    VOID            reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    VARIABLE        reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    DOLLAR          reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    TRUE            reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    FALSE           reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    LPAREN          reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    LBRACKET        reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    LBRACE          reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    $end            reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    BREAK           reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    AND             reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)
    OR              reduce using rule 38 (lista -> LBRACKET valores RBRACKET .)


state 130

    (23) impresion -> PRINT LPAREN valores RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 168


state 131

    (27) impresion -> PRINT LPAREN RPAREN DOTCOMMA .

    PRINT           reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    RETURN          reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    MAP             reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    STRING          reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    INT             reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    SET             reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    LIST            reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    TUPLE           reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    VAR             reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    IF              reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    FOR             reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    VOID            reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    DOLLAR          reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    TRUE            reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    FALSE           reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    LBRACKET        reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    LBRACE          reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    $end            reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    BREAK           reduce using rule 27 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)


state 132

    (24) impresion -> PRINT LPAREN CHAINCHAR RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 169


state 133

    (25) impresion -> PRINT LPAREN operacion RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 170


state 134

    (26) impresion -> PRINT LPAREN condiciones RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 171


state 135

    (31) condicion -> valor Comparador . valor
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    valor                          shift and go to state 172
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 136

    (43) Comparador -> EQUALS . EQUALS

    EQUALS          shift and go to state 173


state 137

    (44) Comparador -> LANGLE .
    (46) Comparador -> LANGLE . EQUALS

    NUMBER          reduce using rule 44 (Comparador -> LANGLE .)
    FLOAT           reduce using rule 44 (Comparador -> LANGLE .)
    CHAINCHAR       reduce using rule 44 (Comparador -> LANGLE .)
    DOLLAR          reduce using rule 44 (Comparador -> LANGLE .)
    TRUE            reduce using rule 44 (Comparador -> LANGLE .)
    FALSE           reduce using rule 44 (Comparador -> LANGLE .)
    LPAREN          reduce using rule 44 (Comparador -> LANGLE .)
    LBRACKET        reduce using rule 44 (Comparador -> LANGLE .)
    LBRACE          reduce using rule 44 (Comparador -> LANGLE .)
    MAP             reduce using rule 44 (Comparador -> LANGLE .)
    DOUBLE          reduce using rule 44 (Comparador -> LANGLE .)
    STRING          reduce using rule 44 (Comparador -> LANGLE .)
    INT             reduce using rule 44 (Comparador -> LANGLE .)
    SET             reduce using rule 44 (Comparador -> LANGLE .)
    LIST            reduce using rule 44 (Comparador -> LANGLE .)
    BOOLEAN         reduce using rule 44 (Comparador -> LANGLE .)
    TUPLE           reduce using rule 44 (Comparador -> LANGLE .)
    VAR             reduce using rule 44 (Comparador -> LANGLE .)
    EQUALS          shift and go to state 174


state 138

    (45) Comparador -> RANGLE .
    (47) Comparador -> RANGLE . EQUALS

    NUMBER          reduce using rule 45 (Comparador -> RANGLE .)
    FLOAT           reduce using rule 45 (Comparador -> RANGLE .)
    CHAINCHAR       reduce using rule 45 (Comparador -> RANGLE .)
    DOLLAR          reduce using rule 45 (Comparador -> RANGLE .)
    TRUE            reduce using rule 45 (Comparador -> RANGLE .)
    FALSE           reduce using rule 45 (Comparador -> RANGLE .)
    LPAREN          reduce using rule 45 (Comparador -> RANGLE .)
    LBRACKET        reduce using rule 45 (Comparador -> RANGLE .)
    LBRACE          reduce using rule 45 (Comparador -> RANGLE .)
    MAP             reduce using rule 45 (Comparador -> RANGLE .)
    DOUBLE          reduce using rule 45 (Comparador -> RANGLE .)
    STRING          reduce using rule 45 (Comparador -> RANGLE .)
    INT             reduce using rule 45 (Comparador -> RANGLE .)
    SET             reduce using rule 45 (Comparador -> RANGLE .)
    LIST            reduce using rule 45 (Comparador -> RANGLE .)
    BOOLEAN         reduce using rule 45 (Comparador -> RANGLE .)
    TUPLE           reduce using rule 45 (Comparador -> RANGLE .)
    VAR             reduce using rule 45 (Comparador -> RANGLE .)
    EQUALS          shift and go to state 175


state 139

    (48) Comparador -> NEQ .

    NUMBER          reduce using rule 48 (Comparador -> NEQ .)
    FLOAT           reduce using rule 48 (Comparador -> NEQ .)
    CHAINCHAR       reduce using rule 48 (Comparador -> NEQ .)
    DOLLAR          reduce using rule 48 (Comparador -> NEQ .)
    TRUE            reduce using rule 48 (Comparador -> NEQ .)
    FALSE           reduce using rule 48 (Comparador -> NEQ .)
    LPAREN          reduce using rule 48 (Comparador -> NEQ .)
    LBRACKET        reduce using rule 48 (Comparador -> NEQ .)
    LBRACE          reduce using rule 48 (Comparador -> NEQ .)
    MAP             reduce using rule 48 (Comparador -> NEQ .)
    DOUBLE          reduce using rule 48 (Comparador -> NEQ .)
    STRING          reduce using rule 48 (Comparador -> NEQ .)
    INT             reduce using rule 48 (Comparador -> NEQ .)
    SET             reduce using rule 48 (Comparador -> NEQ .)
    LIST            reduce using rule 48 (Comparador -> NEQ .)
    BOOLEAN         reduce using rule 48 (Comparador -> NEQ .)
    TUPLE           reduce using rule 48 (Comparador -> NEQ .)
    VAR             reduce using rule 48 (Comparador -> NEQ .)


state 140

    (33) condiciones -> condicion conector . condiciones
    (32) condiciones -> . condicion
    (33) condiciones -> . condicion conector condiciones
    (34) condiciones -> . Bool
    (31) condicion -> . valor Comparador valor
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    condicion                      shift and go to state 99
    condiciones                    shift and go to state 176
    Bool                           shift and go to state 100
    valor                          shift and go to state 119
    variable                       shift and go to state 39
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 141

    (35) conector -> AND .

    TRUE            reduce using rule 35 (conector -> AND .)
    FALSE           reduce using rule 35 (conector -> AND .)
    NUMBER          reduce using rule 35 (conector -> AND .)
    FLOAT           reduce using rule 35 (conector -> AND .)
    CHAINCHAR       reduce using rule 35 (conector -> AND .)
    DOLLAR          reduce using rule 35 (conector -> AND .)
    LPAREN          reduce using rule 35 (conector -> AND .)
    LBRACKET        reduce using rule 35 (conector -> AND .)
    LBRACE          reduce using rule 35 (conector -> AND .)
    MAP             reduce using rule 35 (conector -> AND .)
    DOUBLE          reduce using rule 35 (conector -> AND .)
    STRING          reduce using rule 35 (conector -> AND .)
    INT             reduce using rule 35 (conector -> AND .)
    SET             reduce using rule 35 (conector -> AND .)
    LIST            reduce using rule 35 (conector -> AND .)
    BOOLEAN         reduce using rule 35 (conector -> AND .)
    TUPLE           reduce using rule 35 (conector -> AND .)
    VAR             reduce using rule 35 (conector -> AND .)


state 142

    (36) conector -> OR .

    TRUE            reduce using rule 36 (conector -> OR .)
    FALSE           reduce using rule 36 (conector -> OR .)
    NUMBER          reduce using rule 36 (conector -> OR .)
    FLOAT           reduce using rule 36 (conector -> OR .)
    CHAINCHAR       reduce using rule 36 (conector -> OR .)
    DOLLAR          reduce using rule 36 (conector -> OR .)
    LPAREN          reduce using rule 36 (conector -> OR .)
    LBRACKET        reduce using rule 36 (conector -> OR .)
    LBRACE          reduce using rule 36 (conector -> OR .)
    MAP             reduce using rule 36 (conector -> OR .)
    DOUBLE          reduce using rule 36 (conector -> OR .)
    STRING          reduce using rule 36 (conector -> OR .)
    INT             reduce using rule 36 (conector -> OR .)
    SET             reduce using rule 36 (conector -> OR .)
    LIST            reduce using rule 36 (conector -> OR .)
    BOOLEAN         reduce using rule 36 (conector -> OR .)
    TUPLE           reduce using rule 36 (conector -> OR .)
    VAR             reduce using rule 36 (conector -> OR .)


state 143

    (52) valores -> valor COMMA valores .

    RPAREN          reduce using rule 52 (valores -> valor COMMA valores .)
    RBRACE          reduce using rule 52 (valores -> valor COMMA valores .)
    RBRACKET        reduce using rule 52 (valores -> valor COMMA valores .)


state 144

    (77) declaracion -> tipo VARIABLE EQUALS valor . DOTCOMMA

    DOTCOMMA        shift and go to state 177


state 145

    (101) funcion_Anonima -> tipo VARIABLE EQUALS tupla . LBRACE programa RBRACE DOTCOMMA
    (60) valor -> tupla .

    LBRACE          shift and go to state 178
    DOTCOMMA        reduce using rule 60 (valor -> tupla .)


state 146

    (86) funcion_flecha -> tipo VARIABLE LPAREN valores . RPAREN ARROWFUNCTION cuerpo DOTCOMMA

    RPAREN          shift and go to state 179


state 147

    (87) funcion_flecha -> tipo VARIABLE LPAREN RPAREN . ARROWFUNCTION cuerpo DOTCOMMA

    ARROWFUNCTION   shift and go to state 180


state 148

    (81) funcion -> VARIABLE LPAREN valores RPAREN .

    PRINT           reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    COMMENTLINE     reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    COMMENTBLOCK    reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    RETURN          reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    MAP             reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    DOUBLE          reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    STRING          reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    INT             reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    SET             reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    LIST            reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    BOOLEAN         reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    TUPLE           reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    VAR             reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    NUMBER          reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    FLOAT           reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    CHAINCHAR       reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    IF              reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    SWITCH          reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    FOR             reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    VOID            reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    VARIABLE        reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    DOLLAR          reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    TRUE            reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    FALSE           reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    LPAREN          reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    LBRACKET        reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    LBRACE          reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    $end            reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    RBRACE          reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    DOTCOMMA        reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)
    BREAK           reduce using rule 81 (funcion -> VARIABLE LPAREN valores RPAREN .)


state 149

    (82) funcion_Data -> VARIABLE DOT VARIABLE LPAREN . valores RPAREN DOTCOMMA
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    valores                        shift and go to state 181
    valor                          shift and go to state 59
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 150

    (79) expresion -> LPAREN valor . operador expresion RPAREN
    (51) valores -> valor .
    (52) valores -> valor . COMMA valores
    (92) operador -> . PLUS
    (93) operador -> . MINUS
    (94) operador -> . TIMES
    (95) operador -> . DIVIDE

    RPAREN          reduce using rule 51 (valores -> valor .)
    COMMA           shift and go to state 102
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73

    operador                       shift and go to state 182

state 151

    (103) diccionario -> MAP LANGLE tipo COMMA . tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    tipo                           shift and go to state 183

state 152

    (88) Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto . DOTCOMMA

    DOTCOMMA        shift and go to state 184


state 153

    (90) cuerpo_conjunto -> LBRACE . valores RBRACE
    (91) cuerpo_conjunto -> LBRACE . RBRACE
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    RBRACE          shift and go to state 185
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    valores                        shift and go to state 82
    valor                          shift and go to state 59
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 154

    (89) Conjunto -> SET LANGLE tipo RANGLE . VARIABLE EQUALS cuerpo_conjunto DOTCOMMA

    VARIABLE        shift and go to state 186


state 155

    (37) estructura_List -> LIST LANGLE tipo RANGLE . VARIABLE EQUALS lista DOTCOMMA

    VARIABLE        shift and go to state 187


state 156

    (49) estructura_tupla -> TUPLE LANGLE tipo RANGLE . VARIABLE EQUALS tupla DOTCOMMA

    VARIABLE        shift and go to state 188


state 157

    (102) funcion_Anonima -> tupla LBRACE programa RBRACE . DOTCOMMA

    DOTCOMMA        shift and go to state 189


state 158

    (28) sentencia_If -> IF LPAREN condiciones RPAREN . LBRACE programa RBRACE else
    (29) sentencia_If -> IF LPAREN condiciones RPAREN . LBRACE programa RBRACE

    LBRACE          shift and go to state 190


state 159

    (108) dupla -> valor TWODOTS valor .

    COMMA           reduce using rule 108 (dupla -> valor TWODOTS valor .)
    RBRACE          reduce using rule 108 (dupla -> valor TWODOTS valor .)


state 160

    (107) duplas -> dupla COMMA duplas .

    RBRACE          reduce using rule 107 (duplas -> dupla COMMA duplas .)


state 161

    (108) dupla -> valor . TWODOTS valor

    TWODOTS         shift and go to state 122


state 162

    (83) sentencia_Switch -> SWITCH LPAREN valor RPAREN . LBRACE caso RBRACE

    LBRACE          shift and go to state 191


state 163

    (96) ciclo_for -> FOR LPAREN declaracion condicion . DOTCOMMA contador RPAREN LBRACE programa RBRACE

    DOTCOMMA        shift and go to state 192


state 164

    (77) declaracion -> tipo VARIABLE . EQUALS valor DOTCOMMA

    EQUALS          shift and go to state 193


state 165

    (39) funcion_Void -> VOID VARIABLE LPAREN valores . RPAREN LBRACE programa RBRACE

    RPAREN          shift and go to state 194


state 166

    (40) funcion_Void -> VOID VARIABLE LPAREN RPAREN . LBRACE programa RBRACE

    LBRACE          shift and go to state 195


state 167

    (41) funcion_Void -> VOID MAIN LPAREN RPAREN . LBRACE programa RBRACE

    LBRACE          shift and go to state 196


state 168

    (23) impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .

    PRINT           reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    RETURN          reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    MAP             reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    STRING          reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    INT             reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    SET             reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    LIST            reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    TUPLE           reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    VAR             reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    IF              reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    FOR             reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    VOID            reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    DOLLAR          reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    TRUE            reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    FALSE           reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    LBRACKET        reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    LBRACE          reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    $end            reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    BREAK           reduce using rule 23 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)


state 169

    (24) impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .

    PRINT           reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    RETURN          reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    MAP             reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    STRING          reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    INT             reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    SET             reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    LIST            reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    TUPLE           reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    VAR             reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    IF              reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    FOR             reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    VOID            reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    DOLLAR          reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    TRUE            reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    FALSE           reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    LBRACKET        reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    LBRACE          reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    $end            reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)
    BREAK           reduce using rule 24 (impresion -> PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA .)


state 170

    (25) impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .

    PRINT           reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    RETURN          reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    MAP             reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    STRING          reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    INT             reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    SET             reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    LIST            reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    TUPLE           reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    VAR             reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    IF              reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    FOR             reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    VOID            reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    DOLLAR          reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    TRUE            reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    FALSE           reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    LBRACKET        reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    LBRACE          reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    $end            reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    BREAK           reduce using rule 25 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)


state 171

    (26) impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .

    PRINT           reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    RETURN          reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    MAP             reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    STRING          reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    INT             reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    SET             reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    LIST            reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    TUPLE           reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    VAR             reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    IF              reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    FOR             reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    VOID            reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    DOLLAR          reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    TRUE            reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    FALSE           reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    LBRACKET        reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    LBRACE          reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    $end            reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    BREAK           reduce using rule 26 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)


state 172

    (31) condicion -> valor Comparador valor .

    AND             reduce using rule 31 (condicion -> valor Comparador valor .)
    OR              reduce using rule 31 (condicion -> valor Comparador valor .)
    RPAREN          reduce using rule 31 (condicion -> valor Comparador valor .)
    DOTCOMMA        reduce using rule 31 (condicion -> valor Comparador valor .)


state 173

    (43) Comparador -> EQUALS EQUALS .

    NUMBER          reduce using rule 43 (Comparador -> EQUALS EQUALS .)
    FLOAT           reduce using rule 43 (Comparador -> EQUALS EQUALS .)
    CHAINCHAR       reduce using rule 43 (Comparador -> EQUALS EQUALS .)
    DOLLAR          reduce using rule 43 (Comparador -> EQUALS EQUALS .)
    TRUE            reduce using rule 43 (Comparador -> EQUALS EQUALS .)
    FALSE           reduce using rule 43 (Comparador -> EQUALS EQUALS .)
    LPAREN          reduce using rule 43 (Comparador -> EQUALS EQUALS .)
    LBRACKET        reduce using rule 43 (Comparador -> EQUALS EQUALS .)
    LBRACE          reduce using rule 43 (Comparador -> EQUALS EQUALS .)
    MAP             reduce using rule 43 (Comparador -> EQUALS EQUALS .)
    DOUBLE          reduce using rule 43 (Comparador -> EQUALS EQUALS .)
    STRING          reduce using rule 43 (Comparador -> EQUALS EQUALS .)
    INT             reduce using rule 43 (Comparador -> EQUALS EQUALS .)
    SET             reduce using rule 43 (Comparador -> EQUALS EQUALS .)
    LIST            reduce using rule 43 (Comparador -> EQUALS EQUALS .)
    BOOLEAN         reduce using rule 43 (Comparador -> EQUALS EQUALS .)
    TUPLE           reduce using rule 43 (Comparador -> EQUALS EQUALS .)
    VAR             reduce using rule 43 (Comparador -> EQUALS EQUALS .)


state 174

    (46) Comparador -> LANGLE EQUALS .

    NUMBER          reduce using rule 46 (Comparador -> LANGLE EQUALS .)
    FLOAT           reduce using rule 46 (Comparador -> LANGLE EQUALS .)
    CHAINCHAR       reduce using rule 46 (Comparador -> LANGLE EQUALS .)
    DOLLAR          reduce using rule 46 (Comparador -> LANGLE EQUALS .)
    TRUE            reduce using rule 46 (Comparador -> LANGLE EQUALS .)
    FALSE           reduce using rule 46 (Comparador -> LANGLE EQUALS .)
    LPAREN          reduce using rule 46 (Comparador -> LANGLE EQUALS .)
    LBRACKET        reduce using rule 46 (Comparador -> LANGLE EQUALS .)
    LBRACE          reduce using rule 46 (Comparador -> LANGLE EQUALS .)
    MAP             reduce using rule 46 (Comparador -> LANGLE EQUALS .)
    DOUBLE          reduce using rule 46 (Comparador -> LANGLE EQUALS .)
    STRING          reduce using rule 46 (Comparador -> LANGLE EQUALS .)
    INT             reduce using rule 46 (Comparador -> LANGLE EQUALS .)
    SET             reduce using rule 46 (Comparador -> LANGLE EQUALS .)
    LIST            reduce using rule 46 (Comparador -> LANGLE EQUALS .)
    BOOLEAN         reduce using rule 46 (Comparador -> LANGLE EQUALS .)
    TUPLE           reduce using rule 46 (Comparador -> LANGLE EQUALS .)
    VAR             reduce using rule 46 (Comparador -> LANGLE EQUALS .)


state 175

    (47) Comparador -> RANGLE EQUALS .

    NUMBER          reduce using rule 47 (Comparador -> RANGLE EQUALS .)
    FLOAT           reduce using rule 47 (Comparador -> RANGLE EQUALS .)
    CHAINCHAR       reduce using rule 47 (Comparador -> RANGLE EQUALS .)
    DOLLAR          reduce using rule 47 (Comparador -> RANGLE EQUALS .)
    TRUE            reduce using rule 47 (Comparador -> RANGLE EQUALS .)
    FALSE           reduce using rule 47 (Comparador -> RANGLE EQUALS .)
    LPAREN          reduce using rule 47 (Comparador -> RANGLE EQUALS .)
    LBRACKET        reduce using rule 47 (Comparador -> RANGLE EQUALS .)
    LBRACE          reduce using rule 47 (Comparador -> RANGLE EQUALS .)
    MAP             reduce using rule 47 (Comparador -> RANGLE EQUALS .)
    DOUBLE          reduce using rule 47 (Comparador -> RANGLE EQUALS .)
    STRING          reduce using rule 47 (Comparador -> RANGLE EQUALS .)
    INT             reduce using rule 47 (Comparador -> RANGLE EQUALS .)
    SET             reduce using rule 47 (Comparador -> RANGLE EQUALS .)
    LIST            reduce using rule 47 (Comparador -> RANGLE EQUALS .)
    BOOLEAN         reduce using rule 47 (Comparador -> RANGLE EQUALS .)
    TUPLE           reduce using rule 47 (Comparador -> RANGLE EQUALS .)
    VAR             reduce using rule 47 (Comparador -> RANGLE EQUALS .)


state 176

    (33) condiciones -> condicion conector condiciones .

    RPAREN          reduce using rule 33 (condiciones -> condicion conector condiciones .)


state 177

    (77) declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .

    PRINT           reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTLINE     reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    RETURN          reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    MAP             reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    DOUBLE          reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    STRING          reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    INT             reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    SET             reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    LIST            reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    BOOLEAN         reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    TUPLE           reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    VAR             reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    NUMBER          reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    FLOAT           reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    CHAINCHAR       reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    IF              reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    SWITCH          reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    FOR             reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    VOID            reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    VARIABLE        reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    DOLLAR          reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    TRUE            reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    FALSE           reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    LPAREN          reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    LBRACKET        reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    LBRACE          reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    $end            reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    RBRACE          reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    DOTCOMMA        reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    BREAK           reduce using rule 77 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)


state 178

    (101) funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE . programa RBRACE DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    tipo                           shift and go to state 12
    tupla                          shift and go to state 43
    programa                       shift and go to state 197
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 179

    (86) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN . ARROWFUNCTION cuerpo DOTCOMMA

    ARROWFUNCTION   shift and go to state 198


state 180

    (87) funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION . cuerpo DOTCOMMA
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    tipo                           shift and go to state 12
    cuerpo                         shift and go to state 199
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 181

    (82) funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores . RPAREN DOTCOMMA

    RPAREN          shift and go to state 200


state 182

    (79) expresion -> LPAREN valor operador . expresion RPAREN
    (79) expresion -> . LPAREN valor operador expresion RPAREN
    (80) expresion -> . valor
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    LPAREN          shift and go to state 110
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    valor                          shift and go to state 108
    expresion                      shift and go to state 201
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 183

    (103) diccionario -> MAP LANGLE tipo COMMA tipo . RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    RANGLE          shift and go to state 202


state 184

    (88) Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .

    PRINT           reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTLINE     reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    RETURN          reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    MAP             reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOUBLE          reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    STRING          reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    INT             reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SET             reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LIST            reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BOOLEAN         reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    TUPLE           reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VAR             reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    NUMBER          reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FLOAT           reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    CHAINCHAR       reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    IF              reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SWITCH          reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FOR             reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VOID            reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VARIABLE        reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOLLAR          reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    TRUE            reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FALSE           reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LPAREN          reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LBRACKET        reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LBRACE          reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    $end            reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    RBRACE          reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOTCOMMA        reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BREAK           reduce using rule 88 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)


state 185

    (91) cuerpo_conjunto -> LBRACE RBRACE .

    DOTCOMMA        reduce using rule 91 (cuerpo_conjunto -> LBRACE RBRACE .)


state 186

    (89) Conjunto -> SET LANGLE tipo RANGLE VARIABLE . EQUALS cuerpo_conjunto DOTCOMMA

    EQUALS          shift and go to state 203


state 187

    (37) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE . EQUALS lista DOTCOMMA

    EQUALS          shift and go to state 204


state 188

    (49) estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE . EQUALS tupla DOTCOMMA

    EQUALS          shift and go to state 205


state 189

    (102) funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .

    PRINT           reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTLINE     reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    RETURN          reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    MAP             reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    DOUBLE          reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    STRING          reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    INT             reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    SET             reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    LIST            reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    BOOLEAN         reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    TUPLE           reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    VAR             reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    NUMBER          reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    FLOAT           reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    CHAINCHAR       reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    IF              reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    SWITCH          reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    FOR             reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    VOID            reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    VARIABLE        reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    DOLLAR          reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    TRUE            reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    FALSE           reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    LPAREN          reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    LBRACKET        reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    LBRACE          reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    $end            reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    RBRACE          reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    DOTCOMMA        reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    BREAK           reduce using rule 102 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)


state 190

    (28) sentencia_If -> IF LPAREN condiciones RPAREN LBRACE . programa RBRACE else
    (29) sentencia_If -> IF LPAREN condiciones RPAREN LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    programa                       shift and go to state 206
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 191

    (83) sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE . caso RBRACE
    (84) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA caso
    (85) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA

    CASE            shift and go to state 208

    caso                           shift and go to state 207

state 192

    (96) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA . contador RPAREN LBRACE programa RBRACE
    (97) contador -> . variable PLUS PLUS
    (98) contador -> . variable PLUS EQUALS valor
    (99) contador -> . variable MINUS MINUS
    (100) contador -> . variable MINUS EQUALS valor
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    DOLLAR          shift and go to state 52
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    contador                       shift and go to state 209
    variable                       shift and go to state 210
    tipo                           shift and go to state 61

state 193

    (77) declaracion -> tipo VARIABLE EQUALS . valor DOTCOMMA
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    tipo                           shift and go to state 61
    valor                          shift and go to state 144
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 194

    (39) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN . LBRACE programa RBRACE

    LBRACE          shift and go to state 211


state 195

    (40) funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    programa                       shift and go to state 212
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 196

    (41) funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    programa                       shift and go to state 213
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 197

    (101) funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa . RBRACE DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    RBRACE          shift and go to state 214
    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    tipo                           shift and go to state 12
    tupla                          shift and go to state 43
    cuerpo                         shift and go to state 56
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 198

    (86) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION . cuerpo DOTCOMMA
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    tipo                           shift and go to state 12
    cuerpo                         shift and go to state 215
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 199

    (87) funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo . DOTCOMMA

    DOTCOMMA        shift and go to state 216


state 200

    (82) funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 217


state 201

    (79) expresion -> LPAREN valor operador expresion . RPAREN

    RPAREN          shift and go to state 218


state 202

    (103) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE . VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    VARIABLE        shift and go to state 219


state 203

    (89) Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS . cuerpo_conjunto DOTCOMMA
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE

    LBRACE          shift and go to state 153

    cuerpo_conjunto                shift and go to state 220

state 204

    (37) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS . lista DOTCOMMA
    (38) lista -> . LBRACKET valores RBRACKET

    LBRACKET        shift and go to state 55

    lista                          shift and go to state 221

state 205

    (49) estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS . tupla DOTCOMMA
    (50) tupla -> . LPAREN valores RPAREN

    LPAREN          shift and go to state 10

    tupla                          shift and go to state 222

state 206

    (28) sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa . RBRACE else
    (29) sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    RBRACE          shift and go to state 223
    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    cuerpo                         shift and go to state 56
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 207

    (83) sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso . RBRACE

    RBRACE          shift and go to state 224


state 208

    (84) caso -> CASE . valor TWODOTS programa BREAK DOTCOMMA caso
    (85) caso -> CASE . valor TWODOTS programa BREAK DOTCOMMA
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    valor                          shift and go to state 225
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 209

    (96) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador . RPAREN LBRACE programa RBRACE

    RPAREN          shift and go to state 226


state 210

    (97) contador -> variable . PLUS PLUS
    (98) contador -> variable . PLUS EQUALS valor
    (99) contador -> variable . MINUS MINUS
    (100) contador -> variable . MINUS EQUALS valor

    PLUS            shift and go to state 227
    MINUS           shift and go to state 228


state 211

    (39) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    programa                       shift and go to state 229
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 212

    (40) funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    RBRACE          shift and go to state 230
    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    cuerpo                         shift and go to state 56
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 213

    (41) funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    RBRACE          shift and go to state 231
    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    cuerpo                         shift and go to state 56
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 214

    (101) funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE . DOTCOMMA

    DOTCOMMA        shift and go to state 232


state 215

    (86) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo . DOTCOMMA

    DOTCOMMA        shift and go to state 233


state 216

    (87) funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .

    PRINT           reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    COMMENTLINE     reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    RETURN          reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    MAP             reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    DOUBLE          reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    STRING          reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    INT             reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    SET             reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    LIST            reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    BOOLEAN         reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    TUPLE           reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    VAR             reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    NUMBER          reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    FLOAT           reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    CHAINCHAR       reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    IF              reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    SWITCH          reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    FOR             reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    VOID            reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    VARIABLE        reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    DOLLAR          reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    TRUE            reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    FALSE           reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    LPAREN          reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    LBRACKET        reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    LBRACE          reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    $end            reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    RBRACE          reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    DOTCOMMA        reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    BREAK           reduce using rule 87 (funcion_flecha -> tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)


state 217

    (82) funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .

    PRINT           reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    RETURN          reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    MAP             reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    STRING          reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    INT             reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    SET             reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    LIST            reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    TUPLE           reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    VAR             reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    IF              reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    FOR             reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    VOID            reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    DOLLAR          reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    TRUE            reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    FALSE           reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    LBRACKET        reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    LBRACE          reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    $end            reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    BREAK           reduce using rule 82 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)


state 218

    (79) expresion -> LPAREN valor operador expresion RPAREN .

    PRINT           reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    COMMENTLINE     reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    COMMENTBLOCK    reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    RETURN          reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    MAP             reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    DOUBLE          reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    STRING          reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    INT             reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    SET             reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    LIST            reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    BOOLEAN         reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    TUPLE           reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    VAR             reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    NUMBER          reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    FLOAT           reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    CHAINCHAR       reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    IF              reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    SWITCH          reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    FOR             reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    VOID            reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    VARIABLE        reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    DOLLAR          reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    TRUE            reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    FALSE           reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    LPAREN          reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    LBRACKET        reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    LBRACE          reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    $end            reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    RPAREN          reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    RBRACE          reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    DOTCOMMA        reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)
    BREAK           reduce using rule 79 (expresion -> LPAREN valor operador expresion RPAREN .)


state 219

    (103) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE . EQUALS cuerpo_Diccionario DOTCOMMA

    EQUALS          shift and go to state 234


state 220

    (89) Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto . DOTCOMMA

    DOTCOMMA        shift and go to state 235


state 221

    (37) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista . DOTCOMMA

    DOTCOMMA        shift and go to state 236


state 222

    (49) estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla . DOTCOMMA

    DOTCOMMA        shift and go to state 237


state 223

    (28) sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE . else
    (29) sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .
    (30) else -> . ELSE LBRACE programa RBRACE

    PRINT           reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    RETURN          reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    MAP             reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    STRING          reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    INT             reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    SET             reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    LIST            reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    TUPLE           reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    VAR             reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    NUMBER          reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    FLOAT           reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    IF              reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    SWITCH          reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    FOR             reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    VOID            reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    DOLLAR          reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    TRUE            reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    FALSE           reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    LPAREN          reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    LBRACKET        reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    LBRACE          reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    $end            reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    RBRACE          reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    BREAK           reduce using rule 29 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    ELSE            shift and go to state 239

    else                           shift and go to state 238

state 224

    (83) sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .

    PRINT           reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    COMMENTLINE     reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    COMMENTBLOCK    reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    RETURN          reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    MAP             reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    DOUBLE          reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    STRING          reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    INT             reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    SET             reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    LIST            reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    BOOLEAN         reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    TUPLE           reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    VAR             reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    NUMBER          reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    FLOAT           reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    CHAINCHAR       reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    IF              reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    SWITCH          reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    FOR             reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    VOID            reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    VARIABLE        reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    DOLLAR          reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    TRUE            reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    FALSE           reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    LPAREN          reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    LBRACKET        reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    LBRACE          reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    $end            reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    RBRACE          reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    DOTCOMMA        reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    BREAK           reduce using rule 83 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)


state 225

    (84) caso -> CASE valor . TWODOTS programa BREAK DOTCOMMA caso
    (85) caso -> CASE valor . TWODOTS programa BREAK DOTCOMMA

    TWODOTS         shift and go to state 240


state 226

    (96) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN . LBRACE programa RBRACE

    LBRACE          shift and go to state 241


state 227

    (97) contador -> variable PLUS . PLUS
    (98) contador -> variable PLUS . EQUALS valor

    PLUS            shift and go to state 242
    EQUALS          shift and go to state 243


state 228

    (99) contador -> variable MINUS . MINUS
    (100) contador -> variable MINUS . EQUALS valor

    MINUS           shift and go to state 244
    EQUALS          shift and go to state 245


state 229

    (39) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    RBRACE          shift and go to state 246
    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    cuerpo                         shift and go to state 56
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 230

    (40) funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .

    PRINT           reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    RETURN          reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    MAP             reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    STRING          reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    INT             reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    SET             reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    LIST            reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    TUPLE           reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    VAR             reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    NUMBER          reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    FLOAT           reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    IF              reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    SWITCH          reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    FOR             reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    VOID            reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    DOLLAR          reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    TRUE            reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    FALSE           reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    LPAREN          reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    LBRACKET        reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    LBRACE          reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    $end            reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    RBRACE          reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    BREAK           reduce using rule 40 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)


state 231

    (41) funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .

    PRINT           reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    RETURN          reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    MAP             reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    STRING          reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    INT             reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    SET             reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    LIST            reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    TUPLE           reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    VAR             reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    NUMBER          reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    FLOAT           reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    IF              reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    SWITCH          reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    FOR             reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    VOID            reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    DOLLAR          reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    TRUE            reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    FALSE           reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    LPAREN          reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    LBRACKET        reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    LBRACE          reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    $end            reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    RBRACE          reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    BREAK           reduce using rule 41 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)


state 232

    (101) funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .

    PRINT           reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTLINE     reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    RETURN          reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    MAP             reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    DOUBLE          reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    STRING          reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    INT             reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    SET             reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    LIST            reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    BOOLEAN         reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    TUPLE           reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    VAR             reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    NUMBER          reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    FLOAT           reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    CHAINCHAR       reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    IF              reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    SWITCH          reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    FOR             reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    VOID            reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    VARIABLE        reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    DOLLAR          reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    TRUE            reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    FALSE           reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    LPAREN          reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    LBRACKET        reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    LBRACE          reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    $end            reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    RBRACE          reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    DOTCOMMA        reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    BREAK           reduce using rule 101 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)


state 233

    (86) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .

    PRINT           reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    COMMENTLINE     reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    RETURN          reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    MAP             reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    DOUBLE          reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    STRING          reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    INT             reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    SET             reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    LIST            reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    BOOLEAN         reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    TUPLE           reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    VAR             reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    NUMBER          reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    FLOAT           reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    CHAINCHAR       reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    IF              reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    SWITCH          reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    FOR             reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    VOID            reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    VARIABLE        reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    DOLLAR          reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    TRUE            reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    FALSE           reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    LPAREN          reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    LBRACKET        reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    LBRACE          reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    $end            reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    RBRACE          reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    DOTCOMMA        reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)
    BREAK           reduce using rule 86 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA .)


state 234

    (103) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS . cuerpo_Diccionario DOTCOMMA
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    LBRACE          shift and go to state 248

    cuerpo_Diccionario             shift and go to state 247

state 235

    (89) Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .

    PRINT           reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTLINE     reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    RETURN          reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    MAP             reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOUBLE          reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    STRING          reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    INT             reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SET             reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LIST            reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BOOLEAN         reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    TUPLE           reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VAR             reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    NUMBER          reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FLOAT           reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    CHAINCHAR       reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    IF              reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SWITCH          reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FOR             reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VOID            reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VARIABLE        reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOLLAR          reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    TRUE            reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FALSE           reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LPAREN          reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LBRACKET        reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LBRACE          reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    $end            reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    RBRACE          reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOTCOMMA        reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BREAK           reduce using rule 89 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)


state 236

    (37) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .

    PRINT           reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    COMMENTLINE     reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    RETURN          reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    MAP             reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    DOUBLE          reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    STRING          reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    INT             reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    SET             reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    LIST            reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    BOOLEAN         reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    TUPLE           reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    VAR             reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    NUMBER          reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    FLOAT           reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    CHAINCHAR       reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    IF              reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    SWITCH          reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    FOR             reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    VOID            reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    VARIABLE        reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    DOLLAR          reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    TRUE            reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    FALSE           reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    LPAREN          reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    LBRACKET        reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    LBRACE          reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    $end            reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    RBRACE          reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    DOTCOMMA        reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    BREAK           reduce using rule 37 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)


state 237

    (49) estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .

    PRINT           reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    COMMENTLINE     reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    RETURN          reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    MAP             reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    DOUBLE          reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    STRING          reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    INT             reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    SET             reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    LIST            reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    BOOLEAN         reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    TUPLE           reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    VAR             reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    NUMBER          reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    FLOAT           reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    CHAINCHAR       reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    IF              reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    SWITCH          reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    FOR             reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    VOID            reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    VARIABLE        reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    DOLLAR          reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    TRUE            reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    FALSE           reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    LPAREN          reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    LBRACKET        reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    LBRACE          reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    $end            reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    RBRACE          reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    DOTCOMMA        reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)
    BREAK           reduce using rule 49 (estructura_tupla -> TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA .)


state 238

    (28) sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .

    PRINT           reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    COMMENTLINE     reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    COMMENTBLOCK    reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    RETURN          reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    MAP             reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    DOUBLE          reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    STRING          reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    INT             reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    SET             reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    LIST            reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    BOOLEAN         reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    TUPLE           reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    VAR             reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    NUMBER          reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    FLOAT           reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    CHAINCHAR       reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    IF              reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    SWITCH          reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    FOR             reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    VOID            reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    VARIABLE        reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    DOLLAR          reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    TRUE            reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    FALSE           reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    LPAREN          reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    LBRACKET        reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    LBRACE          reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    $end            reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    RBRACE          reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    DOTCOMMA        reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    BREAK           reduce using rule 28 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)


state 239

    (30) else -> ELSE . LBRACE programa RBRACE

    LBRACE          shift and go to state 249


state 240

    (84) caso -> CASE valor TWODOTS . programa BREAK DOTCOMMA caso
    (85) caso -> CASE valor TWODOTS . programa BREAK DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    valor                          shift and go to state 14
    programa                       shift and go to state 250
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    tipo                           shift and go to state 12
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 241

    (96) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    declaracion                    shift and go to state 4
    programa                       shift and go to state 251
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 242

    (97) contador -> variable PLUS PLUS .

    RPAREN          reduce using rule 97 (contador -> variable PLUS PLUS .)


state 243

    (98) contador -> variable PLUS EQUALS . valor
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    variable                       shift and go to state 39
    valor                          shift and go to state 252
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 244

    (99) contador -> variable MINUS MINUS .

    RPAREN          reduce using rule 99 (contador -> variable MINUS MINUS .)


state 245

    (100) contador -> variable MINUS EQUALS . valor
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    variable                       shift and go to state 39
    valor                          shift and go to state 253
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 246

    (39) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .

    PRINT           reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    RETURN          reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    MAP             reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    STRING          reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    INT             reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    SET             reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    LIST            reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    TUPLE           reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    VAR             reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    NUMBER          reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    FLOAT           reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    IF              reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    SWITCH          reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    FOR             reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    VOID            reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    DOLLAR          reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    TRUE            reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    FALSE           reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    LPAREN          reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    LBRACKET        reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    LBRACE          reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    $end            reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    RBRACE          reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    BREAK           reduce using rule 39 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)


state 247

    (103) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario . DOTCOMMA

    DOTCOMMA        shift and go to state 254


state 248

    (104) cuerpo_Diccionario -> LBRACE . duplas RBRACE
    (105) cuerpo_Diccionario -> LBRACE . RBRACE
    (106) duplas -> . dupla
    (107) duplas -> . dupla COMMA duplas
    (108) dupla -> . valor TWODOTS valor
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR

    RBRACE          shift and go to state 255
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48
    MAP             shift and go to state 62
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 63
    LIST            shift and go to state 64
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 65
    VAR             shift and go to state 38

    duplas                         shift and go to state 84
    dupla                          shift and go to state 86
    valor                          shift and go to state 161
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 60
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46
    tipo                           shift and go to state 61

state 249

    (30) else -> ELSE LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    programa                       shift and go to state 256
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 250

    (84) caso -> CASE valor TWODOTS programa . BREAK DOTCOMMA caso
    (85) caso -> CASE valor TWODOTS programa . BREAK DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    BREAK           shift and go to state 257
    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    valor                          shift and go to state 14
    cuerpo                         shift and go to state 56
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    tipo                           shift and go to state 12
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 251

    (96) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    RBRACE          shift and go to state 258
    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    declaracion                    shift and go to state 4
    cuerpo                         shift and go to state 56
    impresion                      shift and go to state 3
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 252

    (98) contador -> variable PLUS EQUALS valor .

    RPAREN          reduce using rule 98 (contador -> variable PLUS EQUALS valor .)


state 253

    (100) contador -> variable MINUS EQUALS valor .

    RPAREN          reduce using rule 100 (contador -> variable MINUS EQUALS valor .)


state 254

    (103) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .

    PRINT           reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    COMMENTLINE     reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    RETURN          reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    MAP             reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    DOUBLE          reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    STRING          reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    INT             reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    SET             reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    LIST            reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    BOOLEAN         reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    TUPLE           reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    VAR             reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    NUMBER          reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    FLOAT           reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    CHAINCHAR       reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    IF              reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    SWITCH          reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    FOR             reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    VOID            reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    VARIABLE        reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    DOLLAR          reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    TRUE            reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    FALSE           reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    LPAREN          reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    LBRACKET        reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    LBRACE          reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    $end            reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    RBRACE          reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    DOTCOMMA        reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    BREAK           reduce using rule 103 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)


state 255

    (105) cuerpo_Diccionario -> LBRACE RBRACE .

    DOTCOMMA        reduce using rule 105 (cuerpo_Diccionario -> LBRACE RBRACE .)


state 256

    (30) else -> ELSE LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . return
    (23) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN CHAINCHAR RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (26) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (27) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (77) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (78) operacion -> . valor operador expresion
    (21) comentario -> . COMMENTLINE
    (22) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (20) estructuras_de_Control -> . estructura_tupla
    (42) return -> . RETURN valor DOTCOMMA
    (68) tipo -> . MAP
    (69) tipo -> . DOUBLE
    (70) tipo -> . STRING
    (71) tipo -> . INT
    (72) tipo -> . SET
    (73) tipo -> . LIST
    (74) tipo -> . BOOLEAN
    (75) tipo -> . TUPLE
    (76) tipo -> . VAR
    (55) valor -> . variable
    (56) valor -> . NUMBER
    (57) valor -> . FLOAT
    (58) valor -> . CHAINCHAR
    (59) valor -> . Bool
    (60) valor -> . tupla
    (61) valor -> . lista
    (62) valor -> . cuerpo_conjunto
    (63) valor -> . cuerpo_Diccionario
    (28) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (29) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (83) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (96) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (101) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (102) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (103) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (88) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (89) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (86) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (87) funcion_flecha -> . tipo VARIABLE LPAREN RPAREN ARROWFUNCTION cuerpo DOTCOMMA
    (39) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (40) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (41) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (81) funcion -> . VARIABLE LPAREN valores RPAREN
    (82) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (37) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (49) estructura_tupla -> . TUPLE LANGLE tipo RANGLE VARIABLE EQUALS tupla DOTCOMMA
    (66) variable -> . DOLLAR VARIABLE
    (67) variable -> . tipo VARIABLE
    (53) Bool -> . TRUE
    (54) Bool -> . FALSE
    (50) tupla -> . LPAREN valores RPAREN
    (38) lista -> . LBRACKET valores RBRACKET
    (90) cuerpo_conjunto -> . LBRACE valores RBRACE
    (91) cuerpo_conjunto -> . LBRACE RBRACE
    (104) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (105) cuerpo_Diccionario -> . LBRACE RBRACE

    RBRACE          shift and go to state 259
    PRINT           shift and go to state 9
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    RETURN          shift and go to state 29
    MAP             shift and go to state 30
    DOUBLE          shift and go to state 31
    STRING          shift and go to state 32
    INT             shift and go to state 33
    SET             shift and go to state 34
    LIST            shift and go to state 35
    BOOLEAN         shift and go to state 36
    TUPLE           shift and go to state 37
    VAR             shift and go to state 38
    NUMBER          shift and go to state 40
    FLOAT           shift and go to state 41
    CHAINCHAR       shift and go to state 11
    IF              shift and go to state 47
    SWITCH          shift and go to state 49
    FOR             shift and go to state 50
    VOID            shift and go to state 51
    VARIABLE        shift and go to state 13
    DOLLAR          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    LPAREN          shift and go to state 10
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 48

    cuerpo                         shift and go to state 56
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    return                         shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    estructura_tupla               shift and go to state 28
    variable                       shift and go to state 39
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43
    lista                          shift and go to state 44
    cuerpo_conjunto                shift and go to state 45
    cuerpo_Diccionario             shift and go to state 46

state 257

    (84) caso -> CASE valor TWODOTS programa BREAK . DOTCOMMA caso
    (85) caso -> CASE valor TWODOTS programa BREAK . DOTCOMMA

    DOTCOMMA        shift and go to state 260


state 258

    (96) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .

    PRINT           reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    RETURN          reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    MAP             reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    STRING          reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    INT             reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    SET             reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    LIST            reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    TUPLE           reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    VAR             reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    NUMBER          reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    FLOAT           reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    IF              reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    SWITCH          reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    FOR             reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    VOID            reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    DOLLAR          reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    TRUE            reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    FALSE           reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    LPAREN          reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    LBRACKET        reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    LBRACE          reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    $end            reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    RBRACE          reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    BREAK           reduce using rule 96 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)


state 259

    (30) else -> ELSE LBRACE programa RBRACE .

    PRINT           reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    RETURN          reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    MAP             reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    STRING          reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    INT             reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    SET             reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    LIST            reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    TUPLE           reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    VAR             reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    NUMBER          reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    FLOAT           reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    IF              reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    SWITCH          reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    FOR             reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    VOID            reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    DOLLAR          reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    TRUE            reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    FALSE           reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    LPAREN          reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    LBRACKET        reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    LBRACE          reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    $end            reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    RBRACE          reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)
    BREAK           reduce using rule 30 (else -> ELSE LBRACE programa RBRACE .)


state 260

    (84) caso -> CASE valor TWODOTS programa BREAK DOTCOMMA . caso
    (85) caso -> CASE valor TWODOTS programa BREAK DOTCOMMA .
    (84) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA caso
    (85) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA

    RBRACE          reduce using rule 85 (caso -> CASE valor TWODOTS programa BREAK DOTCOMMA .)
    CASE            shift and go to state 208

    caso                           shift and go to state 261

state 261

    (84) caso -> CASE valor TWODOTS programa BREAK DOTCOMMA caso .

    RBRACE          reduce using rule 84 (caso -> CASE valor TWODOTS programa BREAK DOTCOMMA caso .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 34 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 95 resolved as shift
WARNING: reduce/reduce conflict in state 83 resolved using rule (cuerpo_conjunto -> LBRACE RBRACE)
WARNING: rejected rule (cuerpo_Diccionario -> LBRACE RBRACE) in state 83
WARNING: reduce/reduce conflict in state 100 resolved using rule (condiciones -> Bool)
WARNING: rejected rule (valor -> Bool) in state 100
