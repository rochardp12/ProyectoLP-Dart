Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ADMIRATION
    AS
    CATCH
    CLASS
    CONST
    DEF
    DEFAULT
    DOLLAR
    DYNAMIC
    ELIF
    ENUM
    EXTENDS
    FINAL
    FINALLY
    IN
    INTEGERDIVISION
    INTERFACE
    IS
    MAIN
    METHOD
    MOD
    MODULE
    NEW
    NULL
    PRIVATE
    PROTECTED
    PUBLIC
    STATIC
    SUPER
    THIS
    TRY
    TYPEDEF
    WHILE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> cuerpo
Rule 2     programa -> programa cuerpo
Rule 3     cuerpo -> impresion
Rule 4     cuerpo -> declaracion
Rule 5     cuerpo -> operacion
Rule 6     cuerpo -> comentario
Rule 7     cuerpo -> estructuras_de_Control
Rule 8     cuerpo -> RETURN valor DOTCOMMA
Rule 9     estructuras_de_Control -> sentencia_If
Rule 10    estructuras_de_Control -> sentencia_Switch
Rule 11    estructuras_de_Control -> ciclo_for
Rule 12    estructuras_de_Control -> funcion_Anonima
Rule 13    estructuras_de_Control -> diccionario
Rule 14    estructuras_de_Control -> Conjunto
Rule 15    estructuras_de_Control -> funcion_flecha
Rule 16    estructuras_de_Control -> funcion_Void
Rule 17    estructuras_de_Control -> funcion
Rule 18    estructuras_de_Control -> funcion_Data
Rule 19    estructuras_de_Control -> estructura_List
Rule 20    comentario -> COMMENTLINE
Rule 21    comentario -> COMMENTBLOCK
Rule 22    impresion -> PRINT LPAREN valores RPAREN DOTCOMMA
Rule 23    impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA
Rule 24    impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA
Rule 25    impresion -> PRINT LPAREN RPAREN DOTCOMMA
Rule 26    sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
Rule 27    sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE
Rule 28    else -> ELSE LBRACE programa RBRACE
Rule 29    condicion -> valor Comparador valor
Rule 30    condiciones -> condicion
Rule 31    condiciones -> condicion conector condiciones
Rule 32    conector -> AND
Rule 33    conector -> OR
Rule 34    estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
Rule 35    lista -> LBRACKET valores RBRACKET
Rule 36    funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
Rule 37    Comparador -> EQUALS EQUALS
Rule 38    Comparador -> LANGLE
Rule 39    Comparador -> RANGLE
Rule 40    Comparador -> LANGLE EQUALS
Rule 41    Comparador -> RANGLE EQUALS
Rule 42    Comparador -> NEQ
Rule 43    tupla -> LPAREN valores RPAREN
Rule 44    valores -> valor
Rule 45    valores -> valor COMMA valores
Rule 46    Bool -> TRUE
Rule 47    Bool -> FALSE
Rule 48    valor -> VARIABLE
Rule 49    valor -> NUMBER
Rule 50    valor -> FLOAT
Rule 51    valor -> CHAINCHAR
Rule 52    valor -> Bool
Rule 53    valor -> operacion
Rule 54    valor -> tupla
Rule 55    valor -> lista
Rule 56    valor -> cuerpo_conjunto
Rule 57    valor -> cuerpo_Diccionario
Rule 58    tipo -> MAP
Rule 59    tipo -> DOUBLE
Rule 60    tipo -> STRING
Rule 61    tipo -> INT
Rule 62    tipo -> SET
Rule 63    tipo -> LIST
Rule 64    tipo -> BOOLEAN
Rule 65    tipo -> TUPLE
Rule 66    declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA
Rule 67    declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA
Rule 68    operacion -> valor operador expresion
Rule 69    expresion -> LPAREN operacion RPAREN
Rule 70    expresion -> valor
Rule 71    funcion -> VARIABLE LPAREN valores RPAREN
Rule 72    funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
Rule 73    sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
Rule 74    caso -> CASE valor TWODOTS programa BREAK DOTCOMMA caso
Rule 75    caso -> CASE valor TWODOTS programa BREAK DOTCOMMA
Rule 76    funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
Rule 77    Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
Rule 78    Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
Rule 79    cuerpo_conjunto -> LBRACE valores RBRACE
Rule 80    cuerpo_conjunto -> LBRACE RBRACE
Rule 81    operador -> PLUS
Rule 82    operador -> MINUS
Rule 83    operador -> TIMES
Rule 84    operador -> DIVIDE
Rule 85    ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
Rule 86    contador -> VARIABLE PLUS PLUS
Rule 87    contador -> VARIABLE PLUS EQUALS valor
Rule 88    contador -> VARIABLE MINUS MINUS
Rule 89    contador -> VARIABLE MINUS EQUALS valor
Rule 90    funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
Rule 91    funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA
Rule 92    diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
Rule 93    cuerpo_Diccionario -> LBRACE duplas RBRACE
Rule 94    cuerpo_Diccionario -> LBRACE RBRACE
Rule 95    duplas -> dupla
Rule 96    duplas -> dupla COMMA duplas
Rule 97    dupla -> valor TWODOTS valor

Terminals, with rules where they appear

ABSTRACT             : 
ADMIRATION           : 
AND                  : 32
ARROWFUNCTION        : 76
AS                   : 
BOOLEAN              : 64
BREAK                : 74 75
CASE                 : 74 75
CATCH                : 
CHAINCHAR            : 51
CLASS                : 
COMMA                : 45 92 96
COMMENTBLOCK         : 21
COMMENTLINE          : 20
CONST                : 
DEF                  : 
DEFAULT              : 
DIVIDE               : 84
DOLLAR               : 
DOT                  : 72
DOTCOMMA             : 8 22 23 24 25 34 36 66 67 72 74 75 76 77 78 85 90 91 92
DOUBLE               : 59
DYNAMIC              : 
ELIF                 : 
ELSE                 : 28
ENUM                 : 
EQUALS               : 34 37 37 40 41 66 67 77 78 87 89 90 92
EXTENDS              : 
FALSE                : 47
FINAL                : 
FINALLY              : 
FLOAT                : 50
FOR                  : 85
IF                   : 26 27
IN                   : 
INT                  : 61
INTEGERDIVISION      : 
INTERFACE            : 
IS                   : 
LANGLE               : 34 38 40 78 92
LBRACE               : 26 27 28 36 73 79 80 85 90 91 93 94
LBRACKET             : 35
LIST                 : 34 63
LPAREN               : 22 23 24 25 26 27 36 43 69 71 72 73 76 85
MAIN                 : 
MAP                  : 58 92
METHOD               : 
MINUS                : 82 88 88 89
MOD                  : 
MODULE               : 
NEQ                  : 42
NEW                  : 
NULL                 : 
NUMBER               : 49
OR                   : 33
PLUS                 : 81 86 86 87
PRINT                : 22 23 24 25
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
RANGLE               : 34 39 41 78 92
RBRACE               : 26 27 28 36 73 79 80 85 90 91 93 94
RBRACKET             : 35
RETURN               : 8
RPAREN               : 22 23 24 25 26 27 36 43 69 71 72 73 76 85
SET                  : 62 77 78
STATIC               : 
STRING               : 60
SUPER                : 
SWITCH               : 73
THIS                 : 
TIMES                : 83
TRUE                 : 46
TRY                  : 
TUPLE                : 65
TWODOTS              : 74 75 97
TYPEDEF              : 
VAR                  : 67
VARIABLE             : 34 36 48 66 67 71 72 72 76 77 78 86 87 88 89 90 92
VOID                 : 36
WHILE                : 
error                : 

Nonterminals, with rules where they appear

Bool                 : 52
Comparador           : 29
Conjunto             : 14
caso                 : 73 74
ciclo_for            : 11
comentario           : 6
condicion            : 30 31 85
condiciones          : 24 26 27 31
conector             : 31
contador             : 85
cuerpo               : 1 2
cuerpo_Diccionario   : 57 92
cuerpo_conjunto      : 56 77 78
declaracion          : 4 85
diccionario          : 13
dupla                : 95 96
duplas               : 93 96
else                 : 26
estructura_List      : 19
estructuras_de_Control : 7
expresion            : 68
funcion              : 17
funcion_Anonima      : 12
funcion_Data         : 18
funcion_Void         : 16
funcion_flecha       : 15
impresion            : 3
lista                : 34 55
operacion            : 5 23 53 69
operador             : 68
programa             : 2 26 27 28 36 74 75 76 85 90 91 0
sentencia_If         : 9
sentencia_Switch     : 10
tipo                 : 34 66 76 78 90 92 92
tupla                : 54 90 91
valor                : 8 29 29 44 45 66 67 68 70 73 74 75 87 89 97 97
valores              : 22 35 36 43 45 71 72 76 79

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN valor DOTCOMMA
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (68) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (26) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (73) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (85) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (90) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (91) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (92) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (77) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (76) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (36) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (71) funcion -> . VARIABLE LPAREN valores RPAREN
    (72) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RETURN          shift and go to state 8
    PRINT           shift and go to state 10
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    IF              shift and go to state 44
    SWITCH          shift and go to state 46
    FOR             shift and go to state 47
    VOID            shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    programa                       shift and go to state 1
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 9
    tipo                           shift and go to state 12
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 39
    tupla                          shift and go to state 40
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 1

    (0) S' -> programa .
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN valor DOTCOMMA
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (68) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (26) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (73) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (85) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (90) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (91) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (92) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (77) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (76) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (36) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (71) funcion -> . VARIABLE LPAREN valores RPAREN
    (72) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RETURN          shift and go to state 8
    PRINT           shift and go to state 10
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    IF              shift and go to state 44
    SWITCH          shift and go to state 46
    FOR             shift and go to state 47
    VOID            shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    cuerpo                         shift and go to state 52
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 9
    tipo                           shift and go to state 12
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 39
    tupla                          shift and go to state 40
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 2

    (1) programa -> cuerpo .

    RETURN          reduce using rule 1 (programa -> cuerpo .)
    PRINT           reduce using rule 1 (programa -> cuerpo .)
    VAR             reduce using rule 1 (programa -> cuerpo .)
    COMMENTLINE     reduce using rule 1 (programa -> cuerpo .)
    COMMENTBLOCK    reduce using rule 1 (programa -> cuerpo .)
    MAP             reduce using rule 1 (programa -> cuerpo .)
    DOUBLE          reduce using rule 1 (programa -> cuerpo .)
    STRING          reduce using rule 1 (programa -> cuerpo .)
    INT             reduce using rule 1 (programa -> cuerpo .)
    SET             reduce using rule 1 (programa -> cuerpo .)
    LIST            reduce using rule 1 (programa -> cuerpo .)
    BOOLEAN         reduce using rule 1 (programa -> cuerpo .)
    TUPLE           reduce using rule 1 (programa -> cuerpo .)
    VARIABLE        reduce using rule 1 (programa -> cuerpo .)
    NUMBER          reduce using rule 1 (programa -> cuerpo .)
    FLOAT           reduce using rule 1 (programa -> cuerpo .)
    CHAINCHAR       reduce using rule 1 (programa -> cuerpo .)
    IF              reduce using rule 1 (programa -> cuerpo .)
    SWITCH          reduce using rule 1 (programa -> cuerpo .)
    FOR             reduce using rule 1 (programa -> cuerpo .)
    VOID            reduce using rule 1 (programa -> cuerpo .)
    TRUE            reduce using rule 1 (programa -> cuerpo .)
    FALSE           reduce using rule 1 (programa -> cuerpo .)
    LPAREN          reduce using rule 1 (programa -> cuerpo .)
    LBRACKET        reduce using rule 1 (programa -> cuerpo .)
    LBRACE          reduce using rule 1 (programa -> cuerpo .)
    $end            reduce using rule 1 (programa -> cuerpo .)
    RBRACE          reduce using rule 1 (programa -> cuerpo .)
    DOTCOMMA        reduce using rule 1 (programa -> cuerpo .)
    BREAK           reduce using rule 1 (programa -> cuerpo .)


state 3

    (3) cuerpo -> impresion .

    RETURN          reduce using rule 3 (cuerpo -> impresion .)
    PRINT           reduce using rule 3 (cuerpo -> impresion .)
    VAR             reduce using rule 3 (cuerpo -> impresion .)
    COMMENTLINE     reduce using rule 3 (cuerpo -> impresion .)
    COMMENTBLOCK    reduce using rule 3 (cuerpo -> impresion .)
    MAP             reduce using rule 3 (cuerpo -> impresion .)
    DOUBLE          reduce using rule 3 (cuerpo -> impresion .)
    STRING          reduce using rule 3 (cuerpo -> impresion .)
    INT             reduce using rule 3 (cuerpo -> impresion .)
    SET             reduce using rule 3 (cuerpo -> impresion .)
    LIST            reduce using rule 3 (cuerpo -> impresion .)
    BOOLEAN         reduce using rule 3 (cuerpo -> impresion .)
    TUPLE           reduce using rule 3 (cuerpo -> impresion .)
    VARIABLE        reduce using rule 3 (cuerpo -> impresion .)
    NUMBER          reduce using rule 3 (cuerpo -> impresion .)
    FLOAT           reduce using rule 3 (cuerpo -> impresion .)
    CHAINCHAR       reduce using rule 3 (cuerpo -> impresion .)
    IF              reduce using rule 3 (cuerpo -> impresion .)
    SWITCH          reduce using rule 3 (cuerpo -> impresion .)
    FOR             reduce using rule 3 (cuerpo -> impresion .)
    VOID            reduce using rule 3 (cuerpo -> impresion .)
    TRUE            reduce using rule 3 (cuerpo -> impresion .)
    FALSE           reduce using rule 3 (cuerpo -> impresion .)
    LPAREN          reduce using rule 3 (cuerpo -> impresion .)
    LBRACKET        reduce using rule 3 (cuerpo -> impresion .)
    LBRACE          reduce using rule 3 (cuerpo -> impresion .)
    $end            reduce using rule 3 (cuerpo -> impresion .)
    RBRACE          reduce using rule 3 (cuerpo -> impresion .)
    DOTCOMMA        reduce using rule 3 (cuerpo -> impresion .)
    BREAK           reduce using rule 3 (cuerpo -> impresion .)


state 4

    (4) cuerpo -> declaracion .

    RETURN          reduce using rule 4 (cuerpo -> declaracion .)
    PRINT           reduce using rule 4 (cuerpo -> declaracion .)
    VAR             reduce using rule 4 (cuerpo -> declaracion .)
    COMMENTLINE     reduce using rule 4 (cuerpo -> declaracion .)
    COMMENTBLOCK    reduce using rule 4 (cuerpo -> declaracion .)
    MAP             reduce using rule 4 (cuerpo -> declaracion .)
    DOUBLE          reduce using rule 4 (cuerpo -> declaracion .)
    STRING          reduce using rule 4 (cuerpo -> declaracion .)
    INT             reduce using rule 4 (cuerpo -> declaracion .)
    SET             reduce using rule 4 (cuerpo -> declaracion .)
    LIST            reduce using rule 4 (cuerpo -> declaracion .)
    BOOLEAN         reduce using rule 4 (cuerpo -> declaracion .)
    TUPLE           reduce using rule 4 (cuerpo -> declaracion .)
    VARIABLE        reduce using rule 4 (cuerpo -> declaracion .)
    NUMBER          reduce using rule 4 (cuerpo -> declaracion .)
    FLOAT           reduce using rule 4 (cuerpo -> declaracion .)
    CHAINCHAR       reduce using rule 4 (cuerpo -> declaracion .)
    IF              reduce using rule 4 (cuerpo -> declaracion .)
    SWITCH          reduce using rule 4 (cuerpo -> declaracion .)
    FOR             reduce using rule 4 (cuerpo -> declaracion .)
    VOID            reduce using rule 4 (cuerpo -> declaracion .)
    TRUE            reduce using rule 4 (cuerpo -> declaracion .)
    FALSE           reduce using rule 4 (cuerpo -> declaracion .)
    LPAREN          reduce using rule 4 (cuerpo -> declaracion .)
    LBRACKET        reduce using rule 4 (cuerpo -> declaracion .)
    LBRACE          reduce using rule 4 (cuerpo -> declaracion .)
    $end            reduce using rule 4 (cuerpo -> declaracion .)
    RBRACE          reduce using rule 4 (cuerpo -> declaracion .)
    DOTCOMMA        reduce using rule 4 (cuerpo -> declaracion .)
    BREAK           reduce using rule 4 (cuerpo -> declaracion .)


state 5

    (5) cuerpo -> operacion .
    (53) valor -> operacion .

    RETURN          reduce using rule 5 (cuerpo -> operacion .)
    PRINT           reduce using rule 5 (cuerpo -> operacion .)
    VAR             reduce using rule 5 (cuerpo -> operacion .)
    COMMENTLINE     reduce using rule 5 (cuerpo -> operacion .)
    COMMENTBLOCK    reduce using rule 5 (cuerpo -> operacion .)
    MAP             reduce using rule 5 (cuerpo -> operacion .)
    DOUBLE          reduce using rule 5 (cuerpo -> operacion .)
    STRING          reduce using rule 5 (cuerpo -> operacion .)
    INT             reduce using rule 5 (cuerpo -> operacion .)
    SET             reduce using rule 5 (cuerpo -> operacion .)
    LIST            reduce using rule 5 (cuerpo -> operacion .)
    BOOLEAN         reduce using rule 5 (cuerpo -> operacion .)
    TUPLE           reduce using rule 5 (cuerpo -> operacion .)
    VARIABLE        reduce using rule 5 (cuerpo -> operacion .)
    NUMBER          reduce using rule 5 (cuerpo -> operacion .)
    FLOAT           reduce using rule 5 (cuerpo -> operacion .)
    CHAINCHAR       reduce using rule 5 (cuerpo -> operacion .)
    IF              reduce using rule 5 (cuerpo -> operacion .)
    SWITCH          reduce using rule 5 (cuerpo -> operacion .)
    FOR             reduce using rule 5 (cuerpo -> operacion .)
    VOID            reduce using rule 5 (cuerpo -> operacion .)
    TRUE            reduce using rule 5 (cuerpo -> operacion .)
    FALSE           reduce using rule 5 (cuerpo -> operacion .)
    LPAREN          reduce using rule 5 (cuerpo -> operacion .)
    LBRACKET        reduce using rule 5 (cuerpo -> operacion .)
    LBRACE          reduce using rule 5 (cuerpo -> operacion .)
    $end            reduce using rule 5 (cuerpo -> operacion .)
    RBRACE          reduce using rule 5 (cuerpo -> operacion .)
    DOTCOMMA        reduce using rule 5 (cuerpo -> operacion .)
    BREAK           reduce using rule 5 (cuerpo -> operacion .)
    PLUS            reduce using rule 53 (valor -> operacion .)
    MINUS           reduce using rule 53 (valor -> operacion .)
    TIMES           reduce using rule 53 (valor -> operacion .)
    DIVIDE          reduce using rule 53 (valor -> operacion .)


state 6

    (6) cuerpo -> comentario .

    RETURN          reduce using rule 6 (cuerpo -> comentario .)
    PRINT           reduce using rule 6 (cuerpo -> comentario .)
    VAR             reduce using rule 6 (cuerpo -> comentario .)
    COMMENTLINE     reduce using rule 6 (cuerpo -> comentario .)
    COMMENTBLOCK    reduce using rule 6 (cuerpo -> comentario .)
    MAP             reduce using rule 6 (cuerpo -> comentario .)
    DOUBLE          reduce using rule 6 (cuerpo -> comentario .)
    STRING          reduce using rule 6 (cuerpo -> comentario .)
    INT             reduce using rule 6 (cuerpo -> comentario .)
    SET             reduce using rule 6 (cuerpo -> comentario .)
    LIST            reduce using rule 6 (cuerpo -> comentario .)
    BOOLEAN         reduce using rule 6 (cuerpo -> comentario .)
    TUPLE           reduce using rule 6 (cuerpo -> comentario .)
    VARIABLE        reduce using rule 6 (cuerpo -> comentario .)
    NUMBER          reduce using rule 6 (cuerpo -> comentario .)
    FLOAT           reduce using rule 6 (cuerpo -> comentario .)
    CHAINCHAR       reduce using rule 6 (cuerpo -> comentario .)
    IF              reduce using rule 6 (cuerpo -> comentario .)
    SWITCH          reduce using rule 6 (cuerpo -> comentario .)
    FOR             reduce using rule 6 (cuerpo -> comentario .)
    VOID            reduce using rule 6 (cuerpo -> comentario .)
    TRUE            reduce using rule 6 (cuerpo -> comentario .)
    FALSE           reduce using rule 6 (cuerpo -> comentario .)
    LPAREN          reduce using rule 6 (cuerpo -> comentario .)
    LBRACKET        reduce using rule 6 (cuerpo -> comentario .)
    LBRACE          reduce using rule 6 (cuerpo -> comentario .)
    $end            reduce using rule 6 (cuerpo -> comentario .)
    RBRACE          reduce using rule 6 (cuerpo -> comentario .)
    DOTCOMMA        reduce using rule 6 (cuerpo -> comentario .)
    BREAK           reduce using rule 6 (cuerpo -> comentario .)


state 7

    (7) cuerpo -> estructuras_de_Control .

    RETURN          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    PRINT           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    VAR             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    COMMENTLINE     reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    COMMENTBLOCK    reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    MAP             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    DOUBLE          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    STRING          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    INT             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    SET             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    LIST            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    BOOLEAN         reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    TUPLE           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    VARIABLE        reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    NUMBER          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    FLOAT           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    CHAINCHAR       reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    IF              reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    SWITCH          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    FOR             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    VOID            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    TRUE            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    FALSE           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    LPAREN          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    LBRACKET        reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    LBRACE          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    $end            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    RBRACE          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    DOTCOMMA        reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    BREAK           reduce using rule 7 (cuerpo -> estructuras_de_Control .)


state 8

    (8) cuerpo -> RETURN . valor DOTCOMMA
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valor                          shift and go to state 53
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 9

    (68) operacion -> valor . operador expresion
    (81) operador -> . PLUS
    (82) operador -> . MINUS
    (83) operador -> . TIMES
    (84) operador -> . DIVIDE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61

    operador                       shift and go to state 57

state 10

    (22) impresion -> PRINT . LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> PRINT . LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> PRINT . LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> PRINT . LPAREN RPAREN DOTCOMMA

    LPAREN          shift and go to state 62


state 11

    (43) tupla -> LPAREN . valores RPAREN
    (44) valores -> . valor
    (45) valores -> . valor COMMA valores
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valores                        shift and go to state 63
    valor                          shift and go to state 64
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 12

    (66) declaracion -> tipo . VARIABLE EQUALS valor DOTCOMMA
    (90) funcion_Anonima -> tipo . VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (76) funcion_flecha -> tipo . VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA

    VARIABLE        shift and go to state 65


state 13

    (48) valor -> VARIABLE .
    (71) funcion -> VARIABLE . LPAREN valores RPAREN
    (72) funcion_Data -> VARIABLE . DOT VARIABLE LPAREN valores RPAREN DOTCOMMA

    PLUS            reduce using rule 48 (valor -> VARIABLE .)
    MINUS           reduce using rule 48 (valor -> VARIABLE .)
    TIMES           reduce using rule 48 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 48 (valor -> VARIABLE .)
    LPAREN          shift and go to state 66
    DOT             shift and go to state 67


state 14

    (67) declaracion -> VAR . VARIABLE EQUALS valor DOTCOMMA

    VARIABLE        shift and go to state 68


state 15

    (20) comentario -> COMMENTLINE .

    RETURN          reduce using rule 20 (comentario -> COMMENTLINE .)
    PRINT           reduce using rule 20 (comentario -> COMMENTLINE .)
    VAR             reduce using rule 20 (comentario -> COMMENTLINE .)
    COMMENTLINE     reduce using rule 20 (comentario -> COMMENTLINE .)
    COMMENTBLOCK    reduce using rule 20 (comentario -> COMMENTLINE .)
    MAP             reduce using rule 20 (comentario -> COMMENTLINE .)
    DOUBLE          reduce using rule 20 (comentario -> COMMENTLINE .)
    STRING          reduce using rule 20 (comentario -> COMMENTLINE .)
    INT             reduce using rule 20 (comentario -> COMMENTLINE .)
    SET             reduce using rule 20 (comentario -> COMMENTLINE .)
    LIST            reduce using rule 20 (comentario -> COMMENTLINE .)
    BOOLEAN         reduce using rule 20 (comentario -> COMMENTLINE .)
    TUPLE           reduce using rule 20 (comentario -> COMMENTLINE .)
    VARIABLE        reduce using rule 20 (comentario -> COMMENTLINE .)
    NUMBER          reduce using rule 20 (comentario -> COMMENTLINE .)
    FLOAT           reduce using rule 20 (comentario -> COMMENTLINE .)
    CHAINCHAR       reduce using rule 20 (comentario -> COMMENTLINE .)
    IF              reduce using rule 20 (comentario -> COMMENTLINE .)
    SWITCH          reduce using rule 20 (comentario -> COMMENTLINE .)
    FOR             reduce using rule 20 (comentario -> COMMENTLINE .)
    VOID            reduce using rule 20 (comentario -> COMMENTLINE .)
    TRUE            reduce using rule 20 (comentario -> COMMENTLINE .)
    FALSE           reduce using rule 20 (comentario -> COMMENTLINE .)
    LPAREN          reduce using rule 20 (comentario -> COMMENTLINE .)
    LBRACKET        reduce using rule 20 (comentario -> COMMENTLINE .)
    LBRACE          reduce using rule 20 (comentario -> COMMENTLINE .)
    $end            reduce using rule 20 (comentario -> COMMENTLINE .)
    RBRACE          reduce using rule 20 (comentario -> COMMENTLINE .)
    DOTCOMMA        reduce using rule 20 (comentario -> COMMENTLINE .)
    BREAK           reduce using rule 20 (comentario -> COMMENTLINE .)


state 16

    (21) comentario -> COMMENTBLOCK .

    RETURN          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    PRINT           reduce using rule 21 (comentario -> COMMENTBLOCK .)
    VAR             reduce using rule 21 (comentario -> COMMENTBLOCK .)
    COMMENTLINE     reduce using rule 21 (comentario -> COMMENTBLOCK .)
    COMMENTBLOCK    reduce using rule 21 (comentario -> COMMENTBLOCK .)
    MAP             reduce using rule 21 (comentario -> COMMENTBLOCK .)
    DOUBLE          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    STRING          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    INT             reduce using rule 21 (comentario -> COMMENTBLOCK .)
    SET             reduce using rule 21 (comentario -> COMMENTBLOCK .)
    LIST            reduce using rule 21 (comentario -> COMMENTBLOCK .)
    BOOLEAN         reduce using rule 21 (comentario -> COMMENTBLOCK .)
    TUPLE           reduce using rule 21 (comentario -> COMMENTBLOCK .)
    VARIABLE        reduce using rule 21 (comentario -> COMMENTBLOCK .)
    NUMBER          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    FLOAT           reduce using rule 21 (comentario -> COMMENTBLOCK .)
    CHAINCHAR       reduce using rule 21 (comentario -> COMMENTBLOCK .)
    IF              reduce using rule 21 (comentario -> COMMENTBLOCK .)
    SWITCH          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    FOR             reduce using rule 21 (comentario -> COMMENTBLOCK .)
    VOID            reduce using rule 21 (comentario -> COMMENTBLOCK .)
    TRUE            reduce using rule 21 (comentario -> COMMENTBLOCK .)
    FALSE           reduce using rule 21 (comentario -> COMMENTBLOCK .)
    LPAREN          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    LBRACKET        reduce using rule 21 (comentario -> COMMENTBLOCK .)
    LBRACE          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    $end            reduce using rule 21 (comentario -> COMMENTBLOCK .)
    RBRACE          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    DOTCOMMA        reduce using rule 21 (comentario -> COMMENTBLOCK .)
    BREAK           reduce using rule 21 (comentario -> COMMENTBLOCK .)


state 17

    (9) estructuras_de_Control -> sentencia_If .

    RETURN          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    PRINT           reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    VAR             reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    COMMENTLINE     reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    COMMENTBLOCK    reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    MAP             reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    DOUBLE          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    STRING          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    INT             reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    SET             reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    LIST            reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    BOOLEAN         reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    TUPLE           reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    VARIABLE        reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    NUMBER          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    FLOAT           reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    CHAINCHAR       reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    IF              reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    SWITCH          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    FOR             reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    VOID            reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    TRUE            reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    FALSE           reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    LPAREN          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    LBRACKET        reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    LBRACE          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    $end            reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    RBRACE          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    DOTCOMMA        reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    BREAK           reduce using rule 9 (estructuras_de_Control -> sentencia_If .)


state 18

    (10) estructuras_de_Control -> sentencia_Switch .

    RETURN          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    PRINT           reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    VAR             reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    COMMENTLINE     reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    COMMENTBLOCK    reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    MAP             reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    DOUBLE          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    STRING          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    INT             reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    SET             reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    LIST            reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    BOOLEAN         reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    TUPLE           reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    VARIABLE        reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    NUMBER          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    FLOAT           reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    CHAINCHAR       reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    IF              reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    SWITCH          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    FOR             reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    VOID            reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    TRUE            reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    FALSE           reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    LPAREN          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    LBRACKET        reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    LBRACE          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    $end            reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    RBRACE          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    DOTCOMMA        reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    BREAK           reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)


state 19

    (11) estructuras_de_Control -> ciclo_for .

    RETURN          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    PRINT           reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    VAR             reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    COMMENTLINE     reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    COMMENTBLOCK    reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    MAP             reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    DOUBLE          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    STRING          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    INT             reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    SET             reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    LIST            reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    BOOLEAN         reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    TUPLE           reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    VARIABLE        reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    NUMBER          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    FLOAT           reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    CHAINCHAR       reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    IF              reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    SWITCH          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    FOR             reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    VOID            reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    TRUE            reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    FALSE           reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    LPAREN          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    LBRACKET        reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    LBRACE          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    $end            reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    RBRACE          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    DOTCOMMA        reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    BREAK           reduce using rule 11 (estructuras_de_Control -> ciclo_for .)


state 20

    (12) estructuras_de_Control -> funcion_Anonima .

    RETURN          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    PRINT           reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    VAR             reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    COMMENTLINE     reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    COMMENTBLOCK    reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    MAP             reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    DOUBLE          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    STRING          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    INT             reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    SET             reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    LIST            reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    BOOLEAN         reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    TUPLE           reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    VARIABLE        reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    NUMBER          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    FLOAT           reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    CHAINCHAR       reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    IF              reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    SWITCH          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    FOR             reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    VOID            reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    TRUE            reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    FALSE           reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    LPAREN          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    LBRACKET        reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    LBRACE          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    $end            reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    RBRACE          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    DOTCOMMA        reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    BREAK           reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)


state 21

    (13) estructuras_de_Control -> diccionario .

    RETURN          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    PRINT           reduce using rule 13 (estructuras_de_Control -> diccionario .)
    VAR             reduce using rule 13 (estructuras_de_Control -> diccionario .)
    COMMENTLINE     reduce using rule 13 (estructuras_de_Control -> diccionario .)
    COMMENTBLOCK    reduce using rule 13 (estructuras_de_Control -> diccionario .)
    MAP             reduce using rule 13 (estructuras_de_Control -> diccionario .)
    DOUBLE          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    STRING          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    INT             reduce using rule 13 (estructuras_de_Control -> diccionario .)
    SET             reduce using rule 13 (estructuras_de_Control -> diccionario .)
    LIST            reduce using rule 13 (estructuras_de_Control -> diccionario .)
    BOOLEAN         reduce using rule 13 (estructuras_de_Control -> diccionario .)
    TUPLE           reduce using rule 13 (estructuras_de_Control -> diccionario .)
    VARIABLE        reduce using rule 13 (estructuras_de_Control -> diccionario .)
    NUMBER          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    FLOAT           reduce using rule 13 (estructuras_de_Control -> diccionario .)
    CHAINCHAR       reduce using rule 13 (estructuras_de_Control -> diccionario .)
    IF              reduce using rule 13 (estructuras_de_Control -> diccionario .)
    SWITCH          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    FOR             reduce using rule 13 (estructuras_de_Control -> diccionario .)
    VOID            reduce using rule 13 (estructuras_de_Control -> diccionario .)
    TRUE            reduce using rule 13 (estructuras_de_Control -> diccionario .)
    FALSE           reduce using rule 13 (estructuras_de_Control -> diccionario .)
    LPAREN          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    LBRACKET        reduce using rule 13 (estructuras_de_Control -> diccionario .)
    LBRACE          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    $end            reduce using rule 13 (estructuras_de_Control -> diccionario .)
    RBRACE          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    DOTCOMMA        reduce using rule 13 (estructuras_de_Control -> diccionario .)
    BREAK           reduce using rule 13 (estructuras_de_Control -> diccionario .)


state 22

    (14) estructuras_de_Control -> Conjunto .

    RETURN          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    PRINT           reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    VAR             reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    COMMENTLINE     reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    COMMENTBLOCK    reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    MAP             reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    DOUBLE          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    STRING          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    INT             reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    SET             reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    LIST            reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    BOOLEAN         reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    TUPLE           reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    VARIABLE        reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    NUMBER          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    FLOAT           reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    CHAINCHAR       reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    IF              reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    SWITCH          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    FOR             reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    VOID            reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    TRUE            reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    FALSE           reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    LPAREN          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    LBRACKET        reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    LBRACE          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    $end            reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    RBRACE          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    DOTCOMMA        reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    BREAK           reduce using rule 14 (estructuras_de_Control -> Conjunto .)


state 23

    (15) estructuras_de_Control -> funcion_flecha .

    RETURN          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    PRINT           reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    VAR             reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    COMMENTLINE     reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    COMMENTBLOCK    reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    MAP             reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    DOUBLE          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    STRING          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    INT             reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    SET             reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    LIST            reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    BOOLEAN         reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    TUPLE           reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    VARIABLE        reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    NUMBER          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    FLOAT           reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    CHAINCHAR       reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    IF              reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    SWITCH          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    FOR             reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    VOID            reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    TRUE            reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    FALSE           reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    LPAREN          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    LBRACKET        reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    LBRACE          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    $end            reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    RBRACE          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    DOTCOMMA        reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    BREAK           reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)


state 24

    (16) estructuras_de_Control -> funcion_Void .

    RETURN          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    PRINT           reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    VAR             reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    COMMENTLINE     reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    COMMENTBLOCK    reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    MAP             reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    DOUBLE          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    STRING          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    INT             reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    SET             reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    LIST            reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    BOOLEAN         reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    TUPLE           reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    VARIABLE        reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    NUMBER          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    FLOAT           reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    CHAINCHAR       reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    IF              reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    SWITCH          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    FOR             reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    VOID            reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    TRUE            reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    FALSE           reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    LPAREN          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    LBRACKET        reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    LBRACE          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    $end            reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    RBRACE          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    DOTCOMMA        reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    BREAK           reduce using rule 16 (estructuras_de_Control -> funcion_Void .)


state 25

    (17) estructuras_de_Control -> funcion .

    RETURN          reduce using rule 17 (estructuras_de_Control -> funcion .)
    PRINT           reduce using rule 17 (estructuras_de_Control -> funcion .)
    VAR             reduce using rule 17 (estructuras_de_Control -> funcion .)
    COMMENTLINE     reduce using rule 17 (estructuras_de_Control -> funcion .)
    COMMENTBLOCK    reduce using rule 17 (estructuras_de_Control -> funcion .)
    MAP             reduce using rule 17 (estructuras_de_Control -> funcion .)
    DOUBLE          reduce using rule 17 (estructuras_de_Control -> funcion .)
    STRING          reduce using rule 17 (estructuras_de_Control -> funcion .)
    INT             reduce using rule 17 (estructuras_de_Control -> funcion .)
    SET             reduce using rule 17 (estructuras_de_Control -> funcion .)
    LIST            reduce using rule 17 (estructuras_de_Control -> funcion .)
    BOOLEAN         reduce using rule 17 (estructuras_de_Control -> funcion .)
    TUPLE           reduce using rule 17 (estructuras_de_Control -> funcion .)
    VARIABLE        reduce using rule 17 (estructuras_de_Control -> funcion .)
    NUMBER          reduce using rule 17 (estructuras_de_Control -> funcion .)
    FLOAT           reduce using rule 17 (estructuras_de_Control -> funcion .)
    CHAINCHAR       reduce using rule 17 (estructuras_de_Control -> funcion .)
    IF              reduce using rule 17 (estructuras_de_Control -> funcion .)
    SWITCH          reduce using rule 17 (estructuras_de_Control -> funcion .)
    FOR             reduce using rule 17 (estructuras_de_Control -> funcion .)
    VOID            reduce using rule 17 (estructuras_de_Control -> funcion .)
    TRUE            reduce using rule 17 (estructuras_de_Control -> funcion .)
    FALSE           reduce using rule 17 (estructuras_de_Control -> funcion .)
    LPAREN          reduce using rule 17 (estructuras_de_Control -> funcion .)
    LBRACKET        reduce using rule 17 (estructuras_de_Control -> funcion .)
    LBRACE          reduce using rule 17 (estructuras_de_Control -> funcion .)
    $end            reduce using rule 17 (estructuras_de_Control -> funcion .)
    RBRACE          reduce using rule 17 (estructuras_de_Control -> funcion .)
    DOTCOMMA        reduce using rule 17 (estructuras_de_Control -> funcion .)
    BREAK           reduce using rule 17 (estructuras_de_Control -> funcion .)


state 26

    (18) estructuras_de_Control -> funcion_Data .

    RETURN          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    PRINT           reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    VAR             reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    COMMENTLINE     reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    COMMENTBLOCK    reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    MAP             reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    DOUBLE          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    STRING          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    INT             reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    SET             reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    LIST            reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    BOOLEAN         reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    TUPLE           reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    VARIABLE        reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    NUMBER          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    FLOAT           reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    CHAINCHAR       reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    IF              reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    SWITCH          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    FOR             reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    VOID            reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    TRUE            reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    FALSE           reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    LPAREN          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    LBRACKET        reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    LBRACE          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    $end            reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    RBRACE          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    DOTCOMMA        reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    BREAK           reduce using rule 18 (estructuras_de_Control -> funcion_Data .)


state 27

    (19) estructuras_de_Control -> estructura_List .

    RETURN          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    PRINT           reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    VAR             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    COMMENTLINE     reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    COMMENTBLOCK    reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    MAP             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    DOUBLE          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    STRING          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    INT             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    SET             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    LIST            reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    BOOLEAN         reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    TUPLE           reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    VARIABLE        reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    NUMBER          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    FLOAT           reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    CHAINCHAR       reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    IF              reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    SWITCH          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    FOR             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    VOID            reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    TRUE            reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    FALSE           reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    LPAREN          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    LBRACKET        reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    LBRACE          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    $end            reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    RBRACE          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    DOTCOMMA        reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    BREAK           reduce using rule 19 (estructuras_de_Control -> estructura_List .)


state 28

    (58) tipo -> MAP .
    (92) diccionario -> MAP . LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    VARIABLE        reduce using rule 58 (tipo -> MAP .)
    LANGLE          shift and go to state 69


state 29

    (59) tipo -> DOUBLE .

    VARIABLE        reduce using rule 59 (tipo -> DOUBLE .)
    COMMA           reduce using rule 59 (tipo -> DOUBLE .)
    RANGLE          reduce using rule 59 (tipo -> DOUBLE .)


state 30

    (60) tipo -> STRING .

    VARIABLE        reduce using rule 60 (tipo -> STRING .)
    COMMA           reduce using rule 60 (tipo -> STRING .)
    RANGLE          reduce using rule 60 (tipo -> STRING .)


state 31

    (61) tipo -> INT .

    VARIABLE        reduce using rule 61 (tipo -> INT .)
    COMMA           reduce using rule 61 (tipo -> INT .)
    RANGLE          reduce using rule 61 (tipo -> INT .)


state 32

    (62) tipo -> SET .
    (77) Conjunto -> SET . VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> SET . LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA

  ! shift/reduce conflict for VARIABLE resolved as shift
    VARIABLE        shift and go to state 70
    LANGLE          shift and go to state 71

  ! VARIABLE        [ reduce using rule 62 (tipo -> SET .) ]


state 33

    (63) tipo -> LIST .
    (34) estructura_List -> LIST . LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA

    VARIABLE        reduce using rule 63 (tipo -> LIST .)
    LANGLE          shift and go to state 72


state 34

    (64) tipo -> BOOLEAN .

    VARIABLE        reduce using rule 64 (tipo -> BOOLEAN .)
    COMMA           reduce using rule 64 (tipo -> BOOLEAN .)
    RANGLE          reduce using rule 64 (tipo -> BOOLEAN .)


state 35

    (65) tipo -> TUPLE .

    VARIABLE        reduce using rule 65 (tipo -> TUPLE .)
    COMMA           reduce using rule 65 (tipo -> TUPLE .)
    RANGLE          reduce using rule 65 (tipo -> TUPLE .)


state 36

    (49) valor -> NUMBER .

    PLUS            reduce using rule 49 (valor -> NUMBER .)
    MINUS           reduce using rule 49 (valor -> NUMBER .)
    TIMES           reduce using rule 49 (valor -> NUMBER .)
    DIVIDE          reduce using rule 49 (valor -> NUMBER .)
    DOTCOMMA        reduce using rule 49 (valor -> NUMBER .)
    COMMA           reduce using rule 49 (valor -> NUMBER .)
    RPAREN          reduce using rule 49 (valor -> NUMBER .)
    TWODOTS         reduce using rule 49 (valor -> NUMBER .)
    RBRACE          reduce using rule 49 (valor -> NUMBER .)
    RBRACKET        reduce using rule 49 (valor -> NUMBER .)
    RETURN          reduce using rule 49 (valor -> NUMBER .)
    PRINT           reduce using rule 49 (valor -> NUMBER .)
    VAR             reduce using rule 49 (valor -> NUMBER .)
    COMMENTLINE     reduce using rule 49 (valor -> NUMBER .)
    COMMENTBLOCK    reduce using rule 49 (valor -> NUMBER .)
    MAP             reduce using rule 49 (valor -> NUMBER .)
    DOUBLE          reduce using rule 49 (valor -> NUMBER .)
    STRING          reduce using rule 49 (valor -> NUMBER .)
    INT             reduce using rule 49 (valor -> NUMBER .)
    SET             reduce using rule 49 (valor -> NUMBER .)
    LIST            reduce using rule 49 (valor -> NUMBER .)
    BOOLEAN         reduce using rule 49 (valor -> NUMBER .)
    TUPLE           reduce using rule 49 (valor -> NUMBER .)
    VARIABLE        reduce using rule 49 (valor -> NUMBER .)
    NUMBER          reduce using rule 49 (valor -> NUMBER .)
    FLOAT           reduce using rule 49 (valor -> NUMBER .)
    CHAINCHAR       reduce using rule 49 (valor -> NUMBER .)
    IF              reduce using rule 49 (valor -> NUMBER .)
    SWITCH          reduce using rule 49 (valor -> NUMBER .)
    FOR             reduce using rule 49 (valor -> NUMBER .)
    VOID            reduce using rule 49 (valor -> NUMBER .)
    TRUE            reduce using rule 49 (valor -> NUMBER .)
    FALSE           reduce using rule 49 (valor -> NUMBER .)
    LPAREN          reduce using rule 49 (valor -> NUMBER .)
    LBRACKET        reduce using rule 49 (valor -> NUMBER .)
    LBRACE          reduce using rule 49 (valor -> NUMBER .)
    $end            reduce using rule 49 (valor -> NUMBER .)
    EQUALS          reduce using rule 49 (valor -> NUMBER .)
    LANGLE          reduce using rule 49 (valor -> NUMBER .)
    RANGLE          reduce using rule 49 (valor -> NUMBER .)
    NEQ             reduce using rule 49 (valor -> NUMBER .)
    AND             reduce using rule 49 (valor -> NUMBER .)
    OR              reduce using rule 49 (valor -> NUMBER .)
    BREAK           reduce using rule 49 (valor -> NUMBER .)


state 37

    (50) valor -> FLOAT .

    PLUS            reduce using rule 50 (valor -> FLOAT .)
    MINUS           reduce using rule 50 (valor -> FLOAT .)
    TIMES           reduce using rule 50 (valor -> FLOAT .)
    DIVIDE          reduce using rule 50 (valor -> FLOAT .)
    DOTCOMMA        reduce using rule 50 (valor -> FLOAT .)
    COMMA           reduce using rule 50 (valor -> FLOAT .)
    RPAREN          reduce using rule 50 (valor -> FLOAT .)
    TWODOTS         reduce using rule 50 (valor -> FLOAT .)
    RBRACE          reduce using rule 50 (valor -> FLOAT .)
    RBRACKET        reduce using rule 50 (valor -> FLOAT .)
    RETURN          reduce using rule 50 (valor -> FLOAT .)
    PRINT           reduce using rule 50 (valor -> FLOAT .)
    VAR             reduce using rule 50 (valor -> FLOAT .)
    COMMENTLINE     reduce using rule 50 (valor -> FLOAT .)
    COMMENTBLOCK    reduce using rule 50 (valor -> FLOAT .)
    MAP             reduce using rule 50 (valor -> FLOAT .)
    DOUBLE          reduce using rule 50 (valor -> FLOAT .)
    STRING          reduce using rule 50 (valor -> FLOAT .)
    INT             reduce using rule 50 (valor -> FLOAT .)
    SET             reduce using rule 50 (valor -> FLOAT .)
    LIST            reduce using rule 50 (valor -> FLOAT .)
    BOOLEAN         reduce using rule 50 (valor -> FLOAT .)
    TUPLE           reduce using rule 50 (valor -> FLOAT .)
    VARIABLE        reduce using rule 50 (valor -> FLOAT .)
    NUMBER          reduce using rule 50 (valor -> FLOAT .)
    FLOAT           reduce using rule 50 (valor -> FLOAT .)
    CHAINCHAR       reduce using rule 50 (valor -> FLOAT .)
    IF              reduce using rule 50 (valor -> FLOAT .)
    SWITCH          reduce using rule 50 (valor -> FLOAT .)
    FOR             reduce using rule 50 (valor -> FLOAT .)
    VOID            reduce using rule 50 (valor -> FLOAT .)
    TRUE            reduce using rule 50 (valor -> FLOAT .)
    FALSE           reduce using rule 50 (valor -> FLOAT .)
    LPAREN          reduce using rule 50 (valor -> FLOAT .)
    LBRACKET        reduce using rule 50 (valor -> FLOAT .)
    LBRACE          reduce using rule 50 (valor -> FLOAT .)
    $end            reduce using rule 50 (valor -> FLOAT .)
    EQUALS          reduce using rule 50 (valor -> FLOAT .)
    LANGLE          reduce using rule 50 (valor -> FLOAT .)
    RANGLE          reduce using rule 50 (valor -> FLOAT .)
    NEQ             reduce using rule 50 (valor -> FLOAT .)
    AND             reduce using rule 50 (valor -> FLOAT .)
    OR              reduce using rule 50 (valor -> FLOAT .)
    BREAK           reduce using rule 50 (valor -> FLOAT .)


state 38

    (51) valor -> CHAINCHAR .

    PLUS            reduce using rule 51 (valor -> CHAINCHAR .)
    MINUS           reduce using rule 51 (valor -> CHAINCHAR .)
    TIMES           reduce using rule 51 (valor -> CHAINCHAR .)
    DIVIDE          reduce using rule 51 (valor -> CHAINCHAR .)
    DOTCOMMA        reduce using rule 51 (valor -> CHAINCHAR .)
    COMMA           reduce using rule 51 (valor -> CHAINCHAR .)
    RPAREN          reduce using rule 51 (valor -> CHAINCHAR .)
    TWODOTS         reduce using rule 51 (valor -> CHAINCHAR .)
    RBRACE          reduce using rule 51 (valor -> CHAINCHAR .)
    RBRACKET        reduce using rule 51 (valor -> CHAINCHAR .)
    RETURN          reduce using rule 51 (valor -> CHAINCHAR .)
    PRINT           reduce using rule 51 (valor -> CHAINCHAR .)
    VAR             reduce using rule 51 (valor -> CHAINCHAR .)
    COMMENTLINE     reduce using rule 51 (valor -> CHAINCHAR .)
    COMMENTBLOCK    reduce using rule 51 (valor -> CHAINCHAR .)
    MAP             reduce using rule 51 (valor -> CHAINCHAR .)
    DOUBLE          reduce using rule 51 (valor -> CHAINCHAR .)
    STRING          reduce using rule 51 (valor -> CHAINCHAR .)
    INT             reduce using rule 51 (valor -> CHAINCHAR .)
    SET             reduce using rule 51 (valor -> CHAINCHAR .)
    LIST            reduce using rule 51 (valor -> CHAINCHAR .)
    BOOLEAN         reduce using rule 51 (valor -> CHAINCHAR .)
    TUPLE           reduce using rule 51 (valor -> CHAINCHAR .)
    VARIABLE        reduce using rule 51 (valor -> CHAINCHAR .)
    NUMBER          reduce using rule 51 (valor -> CHAINCHAR .)
    FLOAT           reduce using rule 51 (valor -> CHAINCHAR .)
    CHAINCHAR       reduce using rule 51 (valor -> CHAINCHAR .)
    IF              reduce using rule 51 (valor -> CHAINCHAR .)
    SWITCH          reduce using rule 51 (valor -> CHAINCHAR .)
    FOR             reduce using rule 51 (valor -> CHAINCHAR .)
    VOID            reduce using rule 51 (valor -> CHAINCHAR .)
    TRUE            reduce using rule 51 (valor -> CHAINCHAR .)
    FALSE           reduce using rule 51 (valor -> CHAINCHAR .)
    LPAREN          reduce using rule 51 (valor -> CHAINCHAR .)
    LBRACKET        reduce using rule 51 (valor -> CHAINCHAR .)
    LBRACE          reduce using rule 51 (valor -> CHAINCHAR .)
    $end            reduce using rule 51 (valor -> CHAINCHAR .)
    EQUALS          reduce using rule 51 (valor -> CHAINCHAR .)
    LANGLE          reduce using rule 51 (valor -> CHAINCHAR .)
    RANGLE          reduce using rule 51 (valor -> CHAINCHAR .)
    NEQ             reduce using rule 51 (valor -> CHAINCHAR .)
    AND             reduce using rule 51 (valor -> CHAINCHAR .)
    OR              reduce using rule 51 (valor -> CHAINCHAR .)
    BREAK           reduce using rule 51 (valor -> CHAINCHAR .)


state 39

    (52) valor -> Bool .

    PLUS            reduce using rule 52 (valor -> Bool .)
    MINUS           reduce using rule 52 (valor -> Bool .)
    TIMES           reduce using rule 52 (valor -> Bool .)
    DIVIDE          reduce using rule 52 (valor -> Bool .)
    DOTCOMMA        reduce using rule 52 (valor -> Bool .)
    COMMA           reduce using rule 52 (valor -> Bool .)
    RPAREN          reduce using rule 52 (valor -> Bool .)
    TWODOTS         reduce using rule 52 (valor -> Bool .)
    RBRACE          reduce using rule 52 (valor -> Bool .)
    RBRACKET        reduce using rule 52 (valor -> Bool .)
    RETURN          reduce using rule 52 (valor -> Bool .)
    PRINT           reduce using rule 52 (valor -> Bool .)
    VAR             reduce using rule 52 (valor -> Bool .)
    COMMENTLINE     reduce using rule 52 (valor -> Bool .)
    COMMENTBLOCK    reduce using rule 52 (valor -> Bool .)
    MAP             reduce using rule 52 (valor -> Bool .)
    DOUBLE          reduce using rule 52 (valor -> Bool .)
    STRING          reduce using rule 52 (valor -> Bool .)
    INT             reduce using rule 52 (valor -> Bool .)
    SET             reduce using rule 52 (valor -> Bool .)
    LIST            reduce using rule 52 (valor -> Bool .)
    BOOLEAN         reduce using rule 52 (valor -> Bool .)
    TUPLE           reduce using rule 52 (valor -> Bool .)
    VARIABLE        reduce using rule 52 (valor -> Bool .)
    NUMBER          reduce using rule 52 (valor -> Bool .)
    FLOAT           reduce using rule 52 (valor -> Bool .)
    CHAINCHAR       reduce using rule 52 (valor -> Bool .)
    IF              reduce using rule 52 (valor -> Bool .)
    SWITCH          reduce using rule 52 (valor -> Bool .)
    FOR             reduce using rule 52 (valor -> Bool .)
    VOID            reduce using rule 52 (valor -> Bool .)
    TRUE            reduce using rule 52 (valor -> Bool .)
    FALSE           reduce using rule 52 (valor -> Bool .)
    LPAREN          reduce using rule 52 (valor -> Bool .)
    LBRACKET        reduce using rule 52 (valor -> Bool .)
    LBRACE          reduce using rule 52 (valor -> Bool .)
    $end            reduce using rule 52 (valor -> Bool .)
    EQUALS          reduce using rule 52 (valor -> Bool .)
    LANGLE          reduce using rule 52 (valor -> Bool .)
    RANGLE          reduce using rule 52 (valor -> Bool .)
    NEQ             reduce using rule 52 (valor -> Bool .)
    AND             reduce using rule 52 (valor -> Bool .)
    OR              reduce using rule 52 (valor -> Bool .)
    BREAK           reduce using rule 52 (valor -> Bool .)


state 40

    (54) valor -> tupla .
    (91) funcion_Anonima -> tupla . LBRACE programa RBRACE DOTCOMMA

    PLUS            reduce using rule 54 (valor -> tupla .)
    MINUS           reduce using rule 54 (valor -> tupla .)
    TIMES           reduce using rule 54 (valor -> tupla .)
    DIVIDE          reduce using rule 54 (valor -> tupla .)
    LBRACE          shift and go to state 73


state 41

    (55) valor -> lista .

    PLUS            reduce using rule 55 (valor -> lista .)
    MINUS           reduce using rule 55 (valor -> lista .)
    TIMES           reduce using rule 55 (valor -> lista .)
    DIVIDE          reduce using rule 55 (valor -> lista .)
    DOTCOMMA        reduce using rule 55 (valor -> lista .)
    COMMA           reduce using rule 55 (valor -> lista .)
    RPAREN          reduce using rule 55 (valor -> lista .)
    TWODOTS         reduce using rule 55 (valor -> lista .)
    RBRACE          reduce using rule 55 (valor -> lista .)
    RBRACKET        reduce using rule 55 (valor -> lista .)
    RETURN          reduce using rule 55 (valor -> lista .)
    PRINT           reduce using rule 55 (valor -> lista .)
    VAR             reduce using rule 55 (valor -> lista .)
    COMMENTLINE     reduce using rule 55 (valor -> lista .)
    COMMENTBLOCK    reduce using rule 55 (valor -> lista .)
    MAP             reduce using rule 55 (valor -> lista .)
    DOUBLE          reduce using rule 55 (valor -> lista .)
    STRING          reduce using rule 55 (valor -> lista .)
    INT             reduce using rule 55 (valor -> lista .)
    SET             reduce using rule 55 (valor -> lista .)
    LIST            reduce using rule 55 (valor -> lista .)
    BOOLEAN         reduce using rule 55 (valor -> lista .)
    TUPLE           reduce using rule 55 (valor -> lista .)
    VARIABLE        reduce using rule 55 (valor -> lista .)
    NUMBER          reduce using rule 55 (valor -> lista .)
    FLOAT           reduce using rule 55 (valor -> lista .)
    CHAINCHAR       reduce using rule 55 (valor -> lista .)
    IF              reduce using rule 55 (valor -> lista .)
    SWITCH          reduce using rule 55 (valor -> lista .)
    FOR             reduce using rule 55 (valor -> lista .)
    VOID            reduce using rule 55 (valor -> lista .)
    TRUE            reduce using rule 55 (valor -> lista .)
    FALSE           reduce using rule 55 (valor -> lista .)
    LPAREN          reduce using rule 55 (valor -> lista .)
    LBRACKET        reduce using rule 55 (valor -> lista .)
    LBRACE          reduce using rule 55 (valor -> lista .)
    $end            reduce using rule 55 (valor -> lista .)
    EQUALS          reduce using rule 55 (valor -> lista .)
    LANGLE          reduce using rule 55 (valor -> lista .)
    RANGLE          reduce using rule 55 (valor -> lista .)
    NEQ             reduce using rule 55 (valor -> lista .)
    AND             reduce using rule 55 (valor -> lista .)
    OR              reduce using rule 55 (valor -> lista .)
    BREAK           reduce using rule 55 (valor -> lista .)


state 42

    (56) valor -> cuerpo_conjunto .

    PLUS            reduce using rule 56 (valor -> cuerpo_conjunto .)
    MINUS           reduce using rule 56 (valor -> cuerpo_conjunto .)
    TIMES           reduce using rule 56 (valor -> cuerpo_conjunto .)
    DIVIDE          reduce using rule 56 (valor -> cuerpo_conjunto .)
    DOTCOMMA        reduce using rule 56 (valor -> cuerpo_conjunto .)
    COMMA           reduce using rule 56 (valor -> cuerpo_conjunto .)
    RPAREN          reduce using rule 56 (valor -> cuerpo_conjunto .)
    TWODOTS         reduce using rule 56 (valor -> cuerpo_conjunto .)
    RBRACE          reduce using rule 56 (valor -> cuerpo_conjunto .)
    RBRACKET        reduce using rule 56 (valor -> cuerpo_conjunto .)
    RETURN          reduce using rule 56 (valor -> cuerpo_conjunto .)
    PRINT           reduce using rule 56 (valor -> cuerpo_conjunto .)
    VAR             reduce using rule 56 (valor -> cuerpo_conjunto .)
    COMMENTLINE     reduce using rule 56 (valor -> cuerpo_conjunto .)
    COMMENTBLOCK    reduce using rule 56 (valor -> cuerpo_conjunto .)
    MAP             reduce using rule 56 (valor -> cuerpo_conjunto .)
    DOUBLE          reduce using rule 56 (valor -> cuerpo_conjunto .)
    STRING          reduce using rule 56 (valor -> cuerpo_conjunto .)
    INT             reduce using rule 56 (valor -> cuerpo_conjunto .)
    SET             reduce using rule 56 (valor -> cuerpo_conjunto .)
    LIST            reduce using rule 56 (valor -> cuerpo_conjunto .)
    BOOLEAN         reduce using rule 56 (valor -> cuerpo_conjunto .)
    TUPLE           reduce using rule 56 (valor -> cuerpo_conjunto .)
    VARIABLE        reduce using rule 56 (valor -> cuerpo_conjunto .)
    NUMBER          reduce using rule 56 (valor -> cuerpo_conjunto .)
    FLOAT           reduce using rule 56 (valor -> cuerpo_conjunto .)
    CHAINCHAR       reduce using rule 56 (valor -> cuerpo_conjunto .)
    IF              reduce using rule 56 (valor -> cuerpo_conjunto .)
    SWITCH          reduce using rule 56 (valor -> cuerpo_conjunto .)
    FOR             reduce using rule 56 (valor -> cuerpo_conjunto .)
    VOID            reduce using rule 56 (valor -> cuerpo_conjunto .)
    TRUE            reduce using rule 56 (valor -> cuerpo_conjunto .)
    FALSE           reduce using rule 56 (valor -> cuerpo_conjunto .)
    LPAREN          reduce using rule 56 (valor -> cuerpo_conjunto .)
    LBRACKET        reduce using rule 56 (valor -> cuerpo_conjunto .)
    LBRACE          reduce using rule 56 (valor -> cuerpo_conjunto .)
    $end            reduce using rule 56 (valor -> cuerpo_conjunto .)
    EQUALS          reduce using rule 56 (valor -> cuerpo_conjunto .)
    LANGLE          reduce using rule 56 (valor -> cuerpo_conjunto .)
    RANGLE          reduce using rule 56 (valor -> cuerpo_conjunto .)
    NEQ             reduce using rule 56 (valor -> cuerpo_conjunto .)
    AND             reduce using rule 56 (valor -> cuerpo_conjunto .)
    OR              reduce using rule 56 (valor -> cuerpo_conjunto .)
    BREAK           reduce using rule 56 (valor -> cuerpo_conjunto .)


state 43

    (57) valor -> cuerpo_Diccionario .

    PLUS            reduce using rule 57 (valor -> cuerpo_Diccionario .)
    MINUS           reduce using rule 57 (valor -> cuerpo_Diccionario .)
    TIMES           reduce using rule 57 (valor -> cuerpo_Diccionario .)
    DIVIDE          reduce using rule 57 (valor -> cuerpo_Diccionario .)
    DOTCOMMA        reduce using rule 57 (valor -> cuerpo_Diccionario .)
    COMMA           reduce using rule 57 (valor -> cuerpo_Diccionario .)
    RPAREN          reduce using rule 57 (valor -> cuerpo_Diccionario .)
    TWODOTS         reduce using rule 57 (valor -> cuerpo_Diccionario .)
    RBRACE          reduce using rule 57 (valor -> cuerpo_Diccionario .)
    RBRACKET        reduce using rule 57 (valor -> cuerpo_Diccionario .)
    RETURN          reduce using rule 57 (valor -> cuerpo_Diccionario .)
    PRINT           reduce using rule 57 (valor -> cuerpo_Diccionario .)
    VAR             reduce using rule 57 (valor -> cuerpo_Diccionario .)
    COMMENTLINE     reduce using rule 57 (valor -> cuerpo_Diccionario .)
    COMMENTBLOCK    reduce using rule 57 (valor -> cuerpo_Diccionario .)
    MAP             reduce using rule 57 (valor -> cuerpo_Diccionario .)
    DOUBLE          reduce using rule 57 (valor -> cuerpo_Diccionario .)
    STRING          reduce using rule 57 (valor -> cuerpo_Diccionario .)
    INT             reduce using rule 57 (valor -> cuerpo_Diccionario .)
    SET             reduce using rule 57 (valor -> cuerpo_Diccionario .)
    LIST            reduce using rule 57 (valor -> cuerpo_Diccionario .)
    BOOLEAN         reduce using rule 57 (valor -> cuerpo_Diccionario .)
    TUPLE           reduce using rule 57 (valor -> cuerpo_Diccionario .)
    VARIABLE        reduce using rule 57 (valor -> cuerpo_Diccionario .)
    NUMBER          reduce using rule 57 (valor -> cuerpo_Diccionario .)
    FLOAT           reduce using rule 57 (valor -> cuerpo_Diccionario .)
    CHAINCHAR       reduce using rule 57 (valor -> cuerpo_Diccionario .)
    IF              reduce using rule 57 (valor -> cuerpo_Diccionario .)
    SWITCH          reduce using rule 57 (valor -> cuerpo_Diccionario .)
    FOR             reduce using rule 57 (valor -> cuerpo_Diccionario .)
    VOID            reduce using rule 57 (valor -> cuerpo_Diccionario .)
    TRUE            reduce using rule 57 (valor -> cuerpo_Diccionario .)
    FALSE           reduce using rule 57 (valor -> cuerpo_Diccionario .)
    LPAREN          reduce using rule 57 (valor -> cuerpo_Diccionario .)
    LBRACKET        reduce using rule 57 (valor -> cuerpo_Diccionario .)
    LBRACE          reduce using rule 57 (valor -> cuerpo_Diccionario .)
    $end            reduce using rule 57 (valor -> cuerpo_Diccionario .)
    EQUALS          reduce using rule 57 (valor -> cuerpo_Diccionario .)
    LANGLE          reduce using rule 57 (valor -> cuerpo_Diccionario .)
    RANGLE          reduce using rule 57 (valor -> cuerpo_Diccionario .)
    NEQ             reduce using rule 57 (valor -> cuerpo_Diccionario .)
    AND             reduce using rule 57 (valor -> cuerpo_Diccionario .)
    OR              reduce using rule 57 (valor -> cuerpo_Diccionario .)
    BREAK           reduce using rule 57 (valor -> cuerpo_Diccionario .)


state 44

    (26) sentencia_If -> IF . LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> IF . LPAREN condiciones RPAREN LBRACE programa RBRACE

    LPAREN          shift and go to state 74


state 45

    (79) cuerpo_conjunto -> LBRACE . valores RBRACE
    (80) cuerpo_conjunto -> LBRACE . RBRACE
    (93) cuerpo_Diccionario -> LBRACE . duplas RBRACE
    (94) cuerpo_Diccionario -> LBRACE . RBRACE
    (44) valores -> . valor
    (45) valores -> . valor COMMA valores
    (95) duplas -> . dupla
    (96) duplas -> . dupla COMMA duplas
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (97) dupla -> . valor TWODOTS valor
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RBRACE          shift and go to state 76
    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valores                        shift and go to state 75
    duplas                         shift and go to state 77
    valor                          shift and go to state 78
    dupla                          shift and go to state 79
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 46

    (73) sentencia_Switch -> SWITCH . LPAREN valor RPAREN LBRACE caso RBRACE

    LPAREN          shift and go to state 80


state 47

    (85) ciclo_for -> FOR . LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE

    LPAREN          shift and go to state 81


state 48

    (36) funcion_Void -> VOID . VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA

    VARIABLE        shift and go to state 82


state 49

    (46) Bool -> TRUE .

    PLUS            reduce using rule 46 (Bool -> TRUE .)
    MINUS           reduce using rule 46 (Bool -> TRUE .)
    TIMES           reduce using rule 46 (Bool -> TRUE .)
    DIVIDE          reduce using rule 46 (Bool -> TRUE .)
    DOTCOMMA        reduce using rule 46 (Bool -> TRUE .)
    COMMA           reduce using rule 46 (Bool -> TRUE .)
    RPAREN          reduce using rule 46 (Bool -> TRUE .)
    TWODOTS         reduce using rule 46 (Bool -> TRUE .)
    RBRACE          reduce using rule 46 (Bool -> TRUE .)
    RBRACKET        reduce using rule 46 (Bool -> TRUE .)
    RETURN          reduce using rule 46 (Bool -> TRUE .)
    PRINT           reduce using rule 46 (Bool -> TRUE .)
    VAR             reduce using rule 46 (Bool -> TRUE .)
    COMMENTLINE     reduce using rule 46 (Bool -> TRUE .)
    COMMENTBLOCK    reduce using rule 46 (Bool -> TRUE .)
    MAP             reduce using rule 46 (Bool -> TRUE .)
    DOUBLE          reduce using rule 46 (Bool -> TRUE .)
    STRING          reduce using rule 46 (Bool -> TRUE .)
    INT             reduce using rule 46 (Bool -> TRUE .)
    SET             reduce using rule 46 (Bool -> TRUE .)
    LIST            reduce using rule 46 (Bool -> TRUE .)
    BOOLEAN         reduce using rule 46 (Bool -> TRUE .)
    TUPLE           reduce using rule 46 (Bool -> TRUE .)
    VARIABLE        reduce using rule 46 (Bool -> TRUE .)
    NUMBER          reduce using rule 46 (Bool -> TRUE .)
    FLOAT           reduce using rule 46 (Bool -> TRUE .)
    CHAINCHAR       reduce using rule 46 (Bool -> TRUE .)
    IF              reduce using rule 46 (Bool -> TRUE .)
    SWITCH          reduce using rule 46 (Bool -> TRUE .)
    FOR             reduce using rule 46 (Bool -> TRUE .)
    VOID            reduce using rule 46 (Bool -> TRUE .)
    TRUE            reduce using rule 46 (Bool -> TRUE .)
    FALSE           reduce using rule 46 (Bool -> TRUE .)
    LPAREN          reduce using rule 46 (Bool -> TRUE .)
    LBRACKET        reduce using rule 46 (Bool -> TRUE .)
    LBRACE          reduce using rule 46 (Bool -> TRUE .)
    $end            reduce using rule 46 (Bool -> TRUE .)
    EQUALS          reduce using rule 46 (Bool -> TRUE .)
    LANGLE          reduce using rule 46 (Bool -> TRUE .)
    RANGLE          reduce using rule 46 (Bool -> TRUE .)
    NEQ             reduce using rule 46 (Bool -> TRUE .)
    AND             reduce using rule 46 (Bool -> TRUE .)
    OR              reduce using rule 46 (Bool -> TRUE .)
    BREAK           reduce using rule 46 (Bool -> TRUE .)


state 50

    (47) Bool -> FALSE .

    PLUS            reduce using rule 47 (Bool -> FALSE .)
    MINUS           reduce using rule 47 (Bool -> FALSE .)
    TIMES           reduce using rule 47 (Bool -> FALSE .)
    DIVIDE          reduce using rule 47 (Bool -> FALSE .)
    DOTCOMMA        reduce using rule 47 (Bool -> FALSE .)
    COMMA           reduce using rule 47 (Bool -> FALSE .)
    RPAREN          reduce using rule 47 (Bool -> FALSE .)
    TWODOTS         reduce using rule 47 (Bool -> FALSE .)
    RBRACE          reduce using rule 47 (Bool -> FALSE .)
    RBRACKET        reduce using rule 47 (Bool -> FALSE .)
    RETURN          reduce using rule 47 (Bool -> FALSE .)
    PRINT           reduce using rule 47 (Bool -> FALSE .)
    VAR             reduce using rule 47 (Bool -> FALSE .)
    COMMENTLINE     reduce using rule 47 (Bool -> FALSE .)
    COMMENTBLOCK    reduce using rule 47 (Bool -> FALSE .)
    MAP             reduce using rule 47 (Bool -> FALSE .)
    DOUBLE          reduce using rule 47 (Bool -> FALSE .)
    STRING          reduce using rule 47 (Bool -> FALSE .)
    INT             reduce using rule 47 (Bool -> FALSE .)
    SET             reduce using rule 47 (Bool -> FALSE .)
    LIST            reduce using rule 47 (Bool -> FALSE .)
    BOOLEAN         reduce using rule 47 (Bool -> FALSE .)
    TUPLE           reduce using rule 47 (Bool -> FALSE .)
    VARIABLE        reduce using rule 47 (Bool -> FALSE .)
    NUMBER          reduce using rule 47 (Bool -> FALSE .)
    FLOAT           reduce using rule 47 (Bool -> FALSE .)
    CHAINCHAR       reduce using rule 47 (Bool -> FALSE .)
    IF              reduce using rule 47 (Bool -> FALSE .)
    SWITCH          reduce using rule 47 (Bool -> FALSE .)
    FOR             reduce using rule 47 (Bool -> FALSE .)
    VOID            reduce using rule 47 (Bool -> FALSE .)
    TRUE            reduce using rule 47 (Bool -> FALSE .)
    FALSE           reduce using rule 47 (Bool -> FALSE .)
    LPAREN          reduce using rule 47 (Bool -> FALSE .)
    LBRACKET        reduce using rule 47 (Bool -> FALSE .)
    LBRACE          reduce using rule 47 (Bool -> FALSE .)
    $end            reduce using rule 47 (Bool -> FALSE .)
    EQUALS          reduce using rule 47 (Bool -> FALSE .)
    LANGLE          reduce using rule 47 (Bool -> FALSE .)
    RANGLE          reduce using rule 47 (Bool -> FALSE .)
    NEQ             reduce using rule 47 (Bool -> FALSE .)
    AND             reduce using rule 47 (Bool -> FALSE .)
    OR              reduce using rule 47 (Bool -> FALSE .)
    BREAK           reduce using rule 47 (Bool -> FALSE .)


state 51

    (35) lista -> LBRACKET . valores RBRACKET
    (44) valores -> . valor
    (45) valores -> . valor COMMA valores
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valores                        shift and go to state 83
    valor                          shift and go to state 64
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 52

    (2) programa -> programa cuerpo .

    RETURN          reduce using rule 2 (programa -> programa cuerpo .)
    PRINT           reduce using rule 2 (programa -> programa cuerpo .)
    VAR             reduce using rule 2 (programa -> programa cuerpo .)
    COMMENTLINE     reduce using rule 2 (programa -> programa cuerpo .)
    COMMENTBLOCK    reduce using rule 2 (programa -> programa cuerpo .)
    MAP             reduce using rule 2 (programa -> programa cuerpo .)
    DOUBLE          reduce using rule 2 (programa -> programa cuerpo .)
    STRING          reduce using rule 2 (programa -> programa cuerpo .)
    INT             reduce using rule 2 (programa -> programa cuerpo .)
    SET             reduce using rule 2 (programa -> programa cuerpo .)
    LIST            reduce using rule 2 (programa -> programa cuerpo .)
    BOOLEAN         reduce using rule 2 (programa -> programa cuerpo .)
    TUPLE           reduce using rule 2 (programa -> programa cuerpo .)
    VARIABLE        reduce using rule 2 (programa -> programa cuerpo .)
    NUMBER          reduce using rule 2 (programa -> programa cuerpo .)
    FLOAT           reduce using rule 2 (programa -> programa cuerpo .)
    CHAINCHAR       reduce using rule 2 (programa -> programa cuerpo .)
    IF              reduce using rule 2 (programa -> programa cuerpo .)
    SWITCH          reduce using rule 2 (programa -> programa cuerpo .)
    FOR             reduce using rule 2 (programa -> programa cuerpo .)
    VOID            reduce using rule 2 (programa -> programa cuerpo .)
    TRUE            reduce using rule 2 (programa -> programa cuerpo .)
    FALSE           reduce using rule 2 (programa -> programa cuerpo .)
    LPAREN          reduce using rule 2 (programa -> programa cuerpo .)
    LBRACKET        reduce using rule 2 (programa -> programa cuerpo .)
    LBRACE          reduce using rule 2 (programa -> programa cuerpo .)
    $end            reduce using rule 2 (programa -> programa cuerpo .)
    RBRACE          reduce using rule 2 (programa -> programa cuerpo .)
    DOTCOMMA        reduce using rule 2 (programa -> programa cuerpo .)
    BREAK           reduce using rule 2 (programa -> programa cuerpo .)


state 53

    (8) cuerpo -> RETURN valor . DOTCOMMA
    (68) operacion -> valor . operador expresion
    (81) operador -> . PLUS
    (82) operador -> . MINUS
    (83) operador -> . TIMES
    (84) operador -> . DIVIDE

    DOTCOMMA        shift and go to state 84
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61

    operador                       shift and go to state 57

state 54

    (48) valor -> VARIABLE .

    DOTCOMMA        reduce using rule 48 (valor -> VARIABLE .)
    PLUS            reduce using rule 48 (valor -> VARIABLE .)
    MINUS           reduce using rule 48 (valor -> VARIABLE .)
    TIMES           reduce using rule 48 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 48 (valor -> VARIABLE .)
    COMMA           reduce using rule 48 (valor -> VARIABLE .)
    RPAREN          reduce using rule 48 (valor -> VARIABLE .)
    TWODOTS         reduce using rule 48 (valor -> VARIABLE .)
    RBRACE          reduce using rule 48 (valor -> VARIABLE .)
    RBRACKET        reduce using rule 48 (valor -> VARIABLE .)
    RETURN          reduce using rule 48 (valor -> VARIABLE .)
    PRINT           reduce using rule 48 (valor -> VARIABLE .)
    VAR             reduce using rule 48 (valor -> VARIABLE .)
    COMMENTLINE     reduce using rule 48 (valor -> VARIABLE .)
    COMMENTBLOCK    reduce using rule 48 (valor -> VARIABLE .)
    MAP             reduce using rule 48 (valor -> VARIABLE .)
    DOUBLE          reduce using rule 48 (valor -> VARIABLE .)
    STRING          reduce using rule 48 (valor -> VARIABLE .)
    INT             reduce using rule 48 (valor -> VARIABLE .)
    SET             reduce using rule 48 (valor -> VARIABLE .)
    LIST            reduce using rule 48 (valor -> VARIABLE .)
    BOOLEAN         reduce using rule 48 (valor -> VARIABLE .)
    TUPLE           reduce using rule 48 (valor -> VARIABLE .)
    VARIABLE        reduce using rule 48 (valor -> VARIABLE .)
    NUMBER          reduce using rule 48 (valor -> VARIABLE .)
    FLOAT           reduce using rule 48 (valor -> VARIABLE .)
    CHAINCHAR       reduce using rule 48 (valor -> VARIABLE .)
    IF              reduce using rule 48 (valor -> VARIABLE .)
    SWITCH          reduce using rule 48 (valor -> VARIABLE .)
    FOR             reduce using rule 48 (valor -> VARIABLE .)
    VOID            reduce using rule 48 (valor -> VARIABLE .)
    TRUE            reduce using rule 48 (valor -> VARIABLE .)
    FALSE           reduce using rule 48 (valor -> VARIABLE .)
    LPAREN          reduce using rule 48 (valor -> VARIABLE .)
    LBRACKET        reduce using rule 48 (valor -> VARIABLE .)
    LBRACE          reduce using rule 48 (valor -> VARIABLE .)
    $end            reduce using rule 48 (valor -> VARIABLE .)
    EQUALS          reduce using rule 48 (valor -> VARIABLE .)
    LANGLE          reduce using rule 48 (valor -> VARIABLE .)
    RANGLE          reduce using rule 48 (valor -> VARIABLE .)
    NEQ             reduce using rule 48 (valor -> VARIABLE .)
    AND             reduce using rule 48 (valor -> VARIABLE .)
    OR              reduce using rule 48 (valor -> VARIABLE .)
    BREAK           reduce using rule 48 (valor -> VARIABLE .)


state 55

    (53) valor -> operacion .

    DOTCOMMA        reduce using rule 53 (valor -> operacion .)
    PLUS            reduce using rule 53 (valor -> operacion .)
    MINUS           reduce using rule 53 (valor -> operacion .)
    TIMES           reduce using rule 53 (valor -> operacion .)
    DIVIDE          reduce using rule 53 (valor -> operacion .)
    COMMA           reduce using rule 53 (valor -> operacion .)
    RPAREN          reduce using rule 53 (valor -> operacion .)
    TWODOTS         reduce using rule 53 (valor -> operacion .)
    RBRACE          reduce using rule 53 (valor -> operacion .)
    RBRACKET        reduce using rule 53 (valor -> operacion .)
    RETURN          reduce using rule 53 (valor -> operacion .)
    PRINT           reduce using rule 53 (valor -> operacion .)
    VAR             reduce using rule 53 (valor -> operacion .)
    COMMENTLINE     reduce using rule 53 (valor -> operacion .)
    COMMENTBLOCK    reduce using rule 53 (valor -> operacion .)
    MAP             reduce using rule 53 (valor -> operacion .)
    DOUBLE          reduce using rule 53 (valor -> operacion .)
    STRING          reduce using rule 53 (valor -> operacion .)
    INT             reduce using rule 53 (valor -> operacion .)
    SET             reduce using rule 53 (valor -> operacion .)
    LIST            reduce using rule 53 (valor -> operacion .)
    BOOLEAN         reduce using rule 53 (valor -> operacion .)
    TUPLE           reduce using rule 53 (valor -> operacion .)
    VARIABLE        reduce using rule 53 (valor -> operacion .)
    NUMBER          reduce using rule 53 (valor -> operacion .)
    FLOAT           reduce using rule 53 (valor -> operacion .)
    CHAINCHAR       reduce using rule 53 (valor -> operacion .)
    IF              reduce using rule 53 (valor -> operacion .)
    SWITCH          reduce using rule 53 (valor -> operacion .)
    FOR             reduce using rule 53 (valor -> operacion .)
    VOID            reduce using rule 53 (valor -> operacion .)
    TRUE            reduce using rule 53 (valor -> operacion .)
    FALSE           reduce using rule 53 (valor -> operacion .)
    LPAREN          reduce using rule 53 (valor -> operacion .)
    LBRACKET        reduce using rule 53 (valor -> operacion .)
    LBRACE          reduce using rule 53 (valor -> operacion .)
    $end            reduce using rule 53 (valor -> operacion .)
    EQUALS          reduce using rule 53 (valor -> operacion .)
    LANGLE          reduce using rule 53 (valor -> operacion .)
    RANGLE          reduce using rule 53 (valor -> operacion .)
    NEQ             reduce using rule 53 (valor -> operacion .)
    AND             reduce using rule 53 (valor -> operacion .)
    OR              reduce using rule 53 (valor -> operacion .)
    BREAK           reduce using rule 53 (valor -> operacion .)


state 56

    (54) valor -> tupla .

    DOTCOMMA        reduce using rule 54 (valor -> tupla .)
    PLUS            reduce using rule 54 (valor -> tupla .)
    MINUS           reduce using rule 54 (valor -> tupla .)
    TIMES           reduce using rule 54 (valor -> tupla .)
    DIVIDE          reduce using rule 54 (valor -> tupla .)
    COMMA           reduce using rule 54 (valor -> tupla .)
    RPAREN          reduce using rule 54 (valor -> tupla .)
    TWODOTS         reduce using rule 54 (valor -> tupla .)
    RBRACE          reduce using rule 54 (valor -> tupla .)
    RBRACKET        reduce using rule 54 (valor -> tupla .)
    RETURN          reduce using rule 54 (valor -> tupla .)
    PRINT           reduce using rule 54 (valor -> tupla .)
    VAR             reduce using rule 54 (valor -> tupla .)
    COMMENTLINE     reduce using rule 54 (valor -> tupla .)
    COMMENTBLOCK    reduce using rule 54 (valor -> tupla .)
    MAP             reduce using rule 54 (valor -> tupla .)
    DOUBLE          reduce using rule 54 (valor -> tupla .)
    STRING          reduce using rule 54 (valor -> tupla .)
    INT             reduce using rule 54 (valor -> tupla .)
    SET             reduce using rule 54 (valor -> tupla .)
    LIST            reduce using rule 54 (valor -> tupla .)
    BOOLEAN         reduce using rule 54 (valor -> tupla .)
    TUPLE           reduce using rule 54 (valor -> tupla .)
    VARIABLE        reduce using rule 54 (valor -> tupla .)
    NUMBER          reduce using rule 54 (valor -> tupla .)
    FLOAT           reduce using rule 54 (valor -> tupla .)
    CHAINCHAR       reduce using rule 54 (valor -> tupla .)
    IF              reduce using rule 54 (valor -> tupla .)
    SWITCH          reduce using rule 54 (valor -> tupla .)
    FOR             reduce using rule 54 (valor -> tupla .)
    VOID            reduce using rule 54 (valor -> tupla .)
    TRUE            reduce using rule 54 (valor -> tupla .)
    FALSE           reduce using rule 54 (valor -> tupla .)
    LPAREN          reduce using rule 54 (valor -> tupla .)
    LBRACKET        reduce using rule 54 (valor -> tupla .)
    LBRACE          reduce using rule 54 (valor -> tupla .)
    $end            reduce using rule 54 (valor -> tupla .)
    EQUALS          reduce using rule 54 (valor -> tupla .)
    LANGLE          reduce using rule 54 (valor -> tupla .)
    RANGLE          reduce using rule 54 (valor -> tupla .)
    NEQ             reduce using rule 54 (valor -> tupla .)
    AND             reduce using rule 54 (valor -> tupla .)
    OR              reduce using rule 54 (valor -> tupla .)
    BREAK           reduce using rule 54 (valor -> tupla .)


state 57

    (68) operacion -> valor operador . expresion
    (69) expresion -> . LPAREN operacion RPAREN
    (70) expresion -> . valor
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    LPAREN          shift and go to state 87
    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valor                          shift and go to state 85
    expresion                      shift and go to state 86
    operacion                      shift and go to state 55
    Bool                           shift and go to state 39
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 58

    (81) operador -> PLUS .

    LPAREN          reduce using rule 81 (operador -> PLUS .)
    VARIABLE        reduce using rule 81 (operador -> PLUS .)
    NUMBER          reduce using rule 81 (operador -> PLUS .)
    FLOAT           reduce using rule 81 (operador -> PLUS .)
    CHAINCHAR       reduce using rule 81 (operador -> PLUS .)
    TRUE            reduce using rule 81 (operador -> PLUS .)
    FALSE           reduce using rule 81 (operador -> PLUS .)
    LBRACKET        reduce using rule 81 (operador -> PLUS .)
    LBRACE          reduce using rule 81 (operador -> PLUS .)


state 59

    (82) operador -> MINUS .

    LPAREN          reduce using rule 82 (operador -> MINUS .)
    VARIABLE        reduce using rule 82 (operador -> MINUS .)
    NUMBER          reduce using rule 82 (operador -> MINUS .)
    FLOAT           reduce using rule 82 (operador -> MINUS .)
    CHAINCHAR       reduce using rule 82 (operador -> MINUS .)
    TRUE            reduce using rule 82 (operador -> MINUS .)
    FALSE           reduce using rule 82 (operador -> MINUS .)
    LBRACKET        reduce using rule 82 (operador -> MINUS .)
    LBRACE          reduce using rule 82 (operador -> MINUS .)


state 60

    (83) operador -> TIMES .

    LPAREN          reduce using rule 83 (operador -> TIMES .)
    VARIABLE        reduce using rule 83 (operador -> TIMES .)
    NUMBER          reduce using rule 83 (operador -> TIMES .)
    FLOAT           reduce using rule 83 (operador -> TIMES .)
    CHAINCHAR       reduce using rule 83 (operador -> TIMES .)
    TRUE            reduce using rule 83 (operador -> TIMES .)
    FALSE           reduce using rule 83 (operador -> TIMES .)
    LBRACKET        reduce using rule 83 (operador -> TIMES .)
    LBRACE          reduce using rule 83 (operador -> TIMES .)


state 61

    (84) operador -> DIVIDE .

    LPAREN          reduce using rule 84 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 84 (operador -> DIVIDE .)
    NUMBER          reduce using rule 84 (operador -> DIVIDE .)
    FLOAT           reduce using rule 84 (operador -> DIVIDE .)
    CHAINCHAR       reduce using rule 84 (operador -> DIVIDE .)
    TRUE            reduce using rule 84 (operador -> DIVIDE .)
    FALSE           reduce using rule 84 (operador -> DIVIDE .)
    LBRACKET        reduce using rule 84 (operador -> DIVIDE .)
    LBRACE          reduce using rule 84 (operador -> DIVIDE .)


state 62

    (22) impresion -> PRINT LPAREN . valores RPAREN DOTCOMMA
    (23) impresion -> PRINT LPAREN . operacion RPAREN DOTCOMMA
    (24) impresion -> PRINT LPAREN . condiciones RPAREN DOTCOMMA
    (25) impresion -> PRINT LPAREN . RPAREN DOTCOMMA
    (44) valores -> . valor
    (45) valores -> . valor COMMA valores
    (68) operacion -> . valor operador expresion
    (30) condiciones -> . condicion
    (31) condiciones -> . condicion conector condiciones
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (29) condicion -> . valor Comparador valor
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RPAREN          shift and go to state 89
    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valores                        shift and go to state 88
    operacion                      shift and go to state 90
    condiciones                    shift and go to state 91
    valor                          shift and go to state 92
    condicion                      shift and go to state 93
    Bool                           shift and go to state 39
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 63

    (43) tupla -> LPAREN valores . RPAREN

    RPAREN          shift and go to state 94


state 64

    (44) valores -> valor .
    (45) valores -> valor . COMMA valores
    (68) operacion -> valor . operador expresion
    (81) operador -> . PLUS
    (82) operador -> . MINUS
    (83) operador -> . TIMES
    (84) operador -> . DIVIDE

    RPAREN          reduce using rule 44 (valores -> valor .)
    RBRACKET        reduce using rule 44 (valores -> valor .)
    RBRACE          reduce using rule 44 (valores -> valor .)
    COMMA           shift and go to state 95
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61

    operador                       shift and go to state 57

state 65

    (66) declaracion -> tipo VARIABLE . EQUALS valor DOTCOMMA
    (90) funcion_Anonima -> tipo VARIABLE . EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (76) funcion_flecha -> tipo VARIABLE . LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA

    EQUALS          shift and go to state 96
    LPAREN          shift and go to state 97


state 66

    (71) funcion -> VARIABLE LPAREN . valores RPAREN
    (44) valores -> . valor
    (45) valores -> . valor COMMA valores
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valores                        shift and go to state 98
    valor                          shift and go to state 64
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 67

    (72) funcion_Data -> VARIABLE DOT . VARIABLE LPAREN valores RPAREN DOTCOMMA

    VARIABLE        shift and go to state 99


state 68

    (67) declaracion -> VAR VARIABLE . EQUALS valor DOTCOMMA

    EQUALS          shift and go to state 100


state 69

    (92) diccionario -> MAP LANGLE . tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE

    MAP             shift and go to state 101
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 103
    LIST            shift and go to state 104
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35

    tipo                           shift and go to state 102

state 70

    (77) Conjunto -> SET VARIABLE . EQUALS cuerpo_conjunto DOTCOMMA

    EQUALS          shift and go to state 105


state 71

    (78) Conjunto -> SET LANGLE . tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE

    MAP             shift and go to state 101
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 103
    LIST            shift and go to state 104
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35

    tipo                           shift and go to state 106

state 72

    (34) estructura_List -> LIST LANGLE . tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE

    MAP             shift and go to state 101
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 103
    LIST            shift and go to state 104
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35

    tipo                           shift and go to state 107

state 73

    (91) funcion_Anonima -> tupla LBRACE . programa RBRACE DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN valor DOTCOMMA
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (68) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (26) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (73) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (85) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (90) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (91) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (92) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (77) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (76) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (36) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (71) funcion -> . VARIABLE LPAREN valores RPAREN
    (72) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RETURN          shift and go to state 8
    PRINT           shift and go to state 10
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    IF              shift and go to state 44
    SWITCH          shift and go to state 46
    FOR             shift and go to state 47
    VOID            shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    tupla                          shift and go to state 40
    programa                       shift and go to state 108
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 9
    tipo                           shift and go to state 12
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 39
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 74

    (26) sentencia_If -> IF LPAREN . condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> IF LPAREN . condiciones RPAREN LBRACE programa RBRACE
    (30) condiciones -> . condicion
    (31) condiciones -> . condicion conector condiciones
    (29) condicion -> . valor Comparador valor
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    condiciones                    shift and go to state 109
    condicion                      shift and go to state 93
    valor                          shift and go to state 110
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 75

    (79) cuerpo_conjunto -> LBRACE valores . RBRACE

    RBRACE          shift and go to state 111


state 76

    (80) cuerpo_conjunto -> LBRACE RBRACE .
    (94) cuerpo_Diccionario -> LBRACE RBRACE .

  ! reduce/reduce conflict for PLUS resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for MINUS resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for TIMES resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for DOTCOMMA resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for COMMA resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for TWODOTS resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for RETURN resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for PRINT resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for VAR resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for COMMENTLINE resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for COMMENTBLOCK resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for MAP resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for STRING resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for INT resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for SET resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for LIST resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for TUPLE resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for NUMBER resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for FLOAT resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for CHAINCHAR resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for IF resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for SWITCH resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for FOR resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for VOID resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for TRUE resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for FALSE resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for LPAREN resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for $end resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for EQUALS resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for LANGLE resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for RANGLE resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for NEQ resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for AND resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for OR resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
  ! reduce/reduce conflict for BREAK resolved using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    PLUS            reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    MINUS           reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    TIMES           reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    DIVIDE          reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    DOTCOMMA        reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    COMMA           reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    RPAREN          reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    TWODOTS         reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    RBRACE          reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    RETURN          reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    PRINT           reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    VAR             reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    COMMENTLINE     reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    COMMENTBLOCK    reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    MAP             reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    STRING          reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    INT             reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    SET             reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    LIST            reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    BOOLEAN         reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    TUPLE           reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    VARIABLE        reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    NUMBER          reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    FLOAT           reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    CHAINCHAR       reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    IF              reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    SWITCH          reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    FOR             reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    VOID            reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    TRUE            reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    FALSE           reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    LPAREN          reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    LBRACE          reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    $end            reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    EQUALS          reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    LANGLE          reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    RANGLE          reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    NEQ             reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    AND             reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    OR              reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)
    BREAK           reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)

  ! PLUS            [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! MINUS           [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! TIMES           [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! DIVIDE          [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! DOTCOMMA        [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! COMMA           [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! RPAREN          [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! TWODOTS         [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! RBRACE          [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! RBRACKET        [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! RETURN          [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! PRINT           [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! VAR             [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! COMMENTLINE     [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! COMMENTBLOCK    [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! MAP             [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! DOUBLE          [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! STRING          [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! INT             [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! SET             [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! LIST            [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! BOOLEAN         [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! TUPLE           [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! VARIABLE        [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! NUMBER          [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! FLOAT           [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! CHAINCHAR       [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! IF              [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! SWITCH          [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! FOR             [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! VOID            [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! TRUE            [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! FALSE           [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! LPAREN          [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! LBRACKET        [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! LBRACE          [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! $end            [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! EQUALS          [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! LANGLE          [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! RANGLE          [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! NEQ             [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! AND             [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! OR              [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]
  ! BREAK           [ reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .) ]


state 77

    (93) cuerpo_Diccionario -> LBRACE duplas . RBRACE

    RBRACE          shift and go to state 112


state 78

    (44) valores -> valor .
    (45) valores -> valor . COMMA valores
    (97) dupla -> valor . TWODOTS valor
    (68) operacion -> valor . operador expresion
    (81) operador -> . PLUS
    (82) operador -> . MINUS
    (83) operador -> . TIMES
    (84) operador -> . DIVIDE

    RBRACE          reduce using rule 44 (valores -> valor .)
    COMMA           shift and go to state 95
    TWODOTS         shift and go to state 113
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61

    operador                       shift and go to state 57

state 79

    (95) duplas -> dupla .
    (96) duplas -> dupla . COMMA duplas

    RBRACE          reduce using rule 95 (duplas -> dupla .)
    COMMA           shift and go to state 114


state 80

    (73) sentencia_Switch -> SWITCH LPAREN . valor RPAREN LBRACE caso RBRACE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valor                          shift and go to state 115
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 81

    (85) ciclo_for -> FOR LPAREN . declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE

    VAR             shift and go to state 14
    MAP             shift and go to state 101
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 103
    LIST            shift and go to state 104
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35

    declaracion                    shift and go to state 116
    tipo                           shift and go to state 117

state 82

    (36) funcion_Void -> VOID VARIABLE . LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA

    LPAREN          shift and go to state 118


state 83

    (35) lista -> LBRACKET valores . RBRACKET

    RBRACKET        shift and go to state 119


state 84

    (8) cuerpo -> RETURN valor DOTCOMMA .

    RETURN          reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    PRINT           reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    VAR             reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    COMMENTLINE     reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    MAP             reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    DOUBLE          reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    STRING          reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    INT             reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    SET             reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    LIST            reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    BOOLEAN         reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    TUPLE           reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    VARIABLE        reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    NUMBER          reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    FLOAT           reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    CHAINCHAR       reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    IF              reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    SWITCH          reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    FOR             reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    VOID            reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    TRUE            reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    FALSE           reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    LPAREN          reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    LBRACKET        reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    LBRACE          reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    $end            reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    RBRACE          reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    DOTCOMMA        reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)
    BREAK           reduce using rule 8 (cuerpo -> RETURN valor DOTCOMMA .)


state 85

    (70) expresion -> valor .
    (68) operacion -> valor . operador expresion
    (81) operador -> . PLUS
    (82) operador -> . MINUS
    (83) operador -> . TIMES
    (84) operador -> . DIVIDE

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    RETURN          reduce using rule 70 (expresion -> valor .)
    PRINT           reduce using rule 70 (expresion -> valor .)
    VAR             reduce using rule 70 (expresion -> valor .)
    COMMENTLINE     reduce using rule 70 (expresion -> valor .)
    COMMENTBLOCK    reduce using rule 70 (expresion -> valor .)
    MAP             reduce using rule 70 (expresion -> valor .)
    DOUBLE          reduce using rule 70 (expresion -> valor .)
    STRING          reduce using rule 70 (expresion -> valor .)
    INT             reduce using rule 70 (expresion -> valor .)
    SET             reduce using rule 70 (expresion -> valor .)
    LIST            reduce using rule 70 (expresion -> valor .)
    BOOLEAN         reduce using rule 70 (expresion -> valor .)
    TUPLE           reduce using rule 70 (expresion -> valor .)
    VARIABLE        reduce using rule 70 (expresion -> valor .)
    NUMBER          reduce using rule 70 (expresion -> valor .)
    FLOAT           reduce using rule 70 (expresion -> valor .)
    CHAINCHAR       reduce using rule 70 (expresion -> valor .)
    IF              reduce using rule 70 (expresion -> valor .)
    SWITCH          reduce using rule 70 (expresion -> valor .)
    FOR             reduce using rule 70 (expresion -> valor .)
    VOID            reduce using rule 70 (expresion -> valor .)
    TRUE            reduce using rule 70 (expresion -> valor .)
    FALSE           reduce using rule 70 (expresion -> valor .)
    LPAREN          reduce using rule 70 (expresion -> valor .)
    LBRACKET        reduce using rule 70 (expresion -> valor .)
    LBRACE          reduce using rule 70 (expresion -> valor .)
    $end            reduce using rule 70 (expresion -> valor .)
    DOTCOMMA        reduce using rule 70 (expresion -> valor .)
    COMMA           reduce using rule 70 (expresion -> valor .)
    RPAREN          reduce using rule 70 (expresion -> valor .)
    TWODOTS         reduce using rule 70 (expresion -> valor .)
    RBRACE          reduce using rule 70 (expresion -> valor .)
    RBRACKET        reduce using rule 70 (expresion -> valor .)
    EQUALS          reduce using rule 70 (expresion -> valor .)
    LANGLE          reduce using rule 70 (expresion -> valor .)
    RANGLE          reduce using rule 70 (expresion -> valor .)
    NEQ             reduce using rule 70 (expresion -> valor .)
    AND             reduce using rule 70 (expresion -> valor .)
    OR              reduce using rule 70 (expresion -> valor .)
    BREAK           reduce using rule 70 (expresion -> valor .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61

  ! PLUS            [ reduce using rule 70 (expresion -> valor .) ]
  ! MINUS           [ reduce using rule 70 (expresion -> valor .) ]
  ! TIMES           [ reduce using rule 70 (expresion -> valor .) ]
  ! DIVIDE          [ reduce using rule 70 (expresion -> valor .) ]

    operador                       shift and go to state 57

state 86

    (68) operacion -> valor operador expresion .

    RETURN          reduce using rule 68 (operacion -> valor operador expresion .)
    PRINT           reduce using rule 68 (operacion -> valor operador expresion .)
    VAR             reduce using rule 68 (operacion -> valor operador expresion .)
    COMMENTLINE     reduce using rule 68 (operacion -> valor operador expresion .)
    COMMENTBLOCK    reduce using rule 68 (operacion -> valor operador expresion .)
    MAP             reduce using rule 68 (operacion -> valor operador expresion .)
    DOUBLE          reduce using rule 68 (operacion -> valor operador expresion .)
    STRING          reduce using rule 68 (operacion -> valor operador expresion .)
    INT             reduce using rule 68 (operacion -> valor operador expresion .)
    SET             reduce using rule 68 (operacion -> valor operador expresion .)
    LIST            reduce using rule 68 (operacion -> valor operador expresion .)
    BOOLEAN         reduce using rule 68 (operacion -> valor operador expresion .)
    TUPLE           reduce using rule 68 (operacion -> valor operador expresion .)
    VARIABLE        reduce using rule 68 (operacion -> valor operador expresion .)
    NUMBER          reduce using rule 68 (operacion -> valor operador expresion .)
    FLOAT           reduce using rule 68 (operacion -> valor operador expresion .)
    CHAINCHAR       reduce using rule 68 (operacion -> valor operador expresion .)
    IF              reduce using rule 68 (operacion -> valor operador expresion .)
    SWITCH          reduce using rule 68 (operacion -> valor operador expresion .)
    FOR             reduce using rule 68 (operacion -> valor operador expresion .)
    VOID            reduce using rule 68 (operacion -> valor operador expresion .)
    TRUE            reduce using rule 68 (operacion -> valor operador expresion .)
    FALSE           reduce using rule 68 (operacion -> valor operador expresion .)
    LPAREN          reduce using rule 68 (operacion -> valor operador expresion .)
    LBRACKET        reduce using rule 68 (operacion -> valor operador expresion .)
    LBRACE          reduce using rule 68 (operacion -> valor operador expresion .)
    $end            reduce using rule 68 (operacion -> valor operador expresion .)
    PLUS            reduce using rule 68 (operacion -> valor operador expresion .)
    MINUS           reduce using rule 68 (operacion -> valor operador expresion .)
    TIMES           reduce using rule 68 (operacion -> valor operador expresion .)
    DIVIDE          reduce using rule 68 (operacion -> valor operador expresion .)
    DOTCOMMA        reduce using rule 68 (operacion -> valor operador expresion .)
    COMMA           reduce using rule 68 (operacion -> valor operador expresion .)
    RPAREN          reduce using rule 68 (operacion -> valor operador expresion .)
    TWODOTS         reduce using rule 68 (operacion -> valor operador expresion .)
    RBRACE          reduce using rule 68 (operacion -> valor operador expresion .)
    RBRACKET        reduce using rule 68 (operacion -> valor operador expresion .)
    EQUALS          reduce using rule 68 (operacion -> valor operador expresion .)
    LANGLE          reduce using rule 68 (operacion -> valor operador expresion .)
    RANGLE          reduce using rule 68 (operacion -> valor operador expresion .)
    NEQ             reduce using rule 68 (operacion -> valor operador expresion .)
    AND             reduce using rule 68 (operacion -> valor operador expresion .)
    OR              reduce using rule 68 (operacion -> valor operador expresion .)
    BREAK           reduce using rule 68 (operacion -> valor operador expresion .)


state 87

    (69) expresion -> LPAREN . operacion RPAREN
    (43) tupla -> LPAREN . valores RPAREN
    (68) operacion -> . valor operador expresion
    (44) valores -> . valor
    (45) valores -> . valor COMMA valores
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    operacion                      shift and go to state 120
    valores                        shift and go to state 63
    valor                          shift and go to state 121
    Bool                           shift and go to state 39
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 88

    (22) impresion -> PRINT LPAREN valores . RPAREN DOTCOMMA

    RPAREN          shift and go to state 122


state 89

    (25) impresion -> PRINT LPAREN RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 123


state 90

    (23) impresion -> PRINT LPAREN operacion . RPAREN DOTCOMMA
    (53) valor -> operacion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 124
    COMMA           reduce using rule 53 (valor -> operacion .)
    PLUS            reduce using rule 53 (valor -> operacion .)
    MINUS           reduce using rule 53 (valor -> operacion .)
    TIMES           reduce using rule 53 (valor -> operacion .)
    DIVIDE          reduce using rule 53 (valor -> operacion .)
    EQUALS          reduce using rule 53 (valor -> operacion .)
    LANGLE          reduce using rule 53 (valor -> operacion .)
    RANGLE          reduce using rule 53 (valor -> operacion .)
    NEQ             reduce using rule 53 (valor -> operacion .)

  ! RPAREN          [ reduce using rule 53 (valor -> operacion .) ]


state 91

    (24) impresion -> PRINT LPAREN condiciones . RPAREN DOTCOMMA

    RPAREN          shift and go to state 125


state 92

    (44) valores -> valor .
    (45) valores -> valor . COMMA valores
    (68) operacion -> valor . operador expresion
    (29) condicion -> valor . Comparador valor
    (81) operador -> . PLUS
    (82) operador -> . MINUS
    (83) operador -> . TIMES
    (84) operador -> . DIVIDE
    (37) Comparador -> . EQUALS EQUALS
    (38) Comparador -> . LANGLE
    (39) Comparador -> . RANGLE
    (40) Comparador -> . LANGLE EQUALS
    (41) Comparador -> . RANGLE EQUALS
    (42) Comparador -> . NEQ

    RPAREN          reduce using rule 44 (valores -> valor .)
    COMMA           shift and go to state 95
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    EQUALS          shift and go to state 127
    LANGLE          shift and go to state 128
    RANGLE          shift and go to state 129
    NEQ             shift and go to state 130

    operador                       shift and go to state 57
    Comparador                     shift and go to state 126

state 93

    (30) condiciones -> condicion .
    (31) condiciones -> condicion . conector condiciones
    (32) conector -> . AND
    (33) conector -> . OR

    RPAREN          reduce using rule 30 (condiciones -> condicion .)
    AND             shift and go to state 132
    OR              shift and go to state 133

    conector                       shift and go to state 131

state 94

    (43) tupla -> LPAREN valores RPAREN .

    LBRACE          reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    PLUS            reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    MINUS           reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    TIMES           reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    DIVIDE          reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    DOTCOMMA        reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    COMMA           reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    RPAREN          reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    TWODOTS         reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    RBRACE          reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    RBRACKET        reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    RETURN          reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    PRINT           reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    VAR             reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    COMMENTLINE     reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    COMMENTBLOCK    reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    MAP             reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    DOUBLE          reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    STRING          reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    INT             reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    SET             reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    LIST            reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    BOOLEAN         reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    TUPLE           reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    VARIABLE        reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    NUMBER          reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    FLOAT           reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    CHAINCHAR       reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    IF              reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    SWITCH          reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    FOR             reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    VOID            reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    TRUE            reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    FALSE           reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    LPAREN          reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    LBRACKET        reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    $end            reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    EQUALS          reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    LANGLE          reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    RANGLE          reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    NEQ             reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    AND             reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    OR              reduce using rule 43 (tupla -> LPAREN valores RPAREN .)
    BREAK           reduce using rule 43 (tupla -> LPAREN valores RPAREN .)


state 95

    (45) valores -> valor COMMA . valores
    (44) valores -> . valor
    (45) valores -> . valor COMMA valores
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valor                          shift and go to state 64
    valores                        shift and go to state 134
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 96

    (66) declaracion -> tipo VARIABLE EQUALS . valor DOTCOMMA
    (90) funcion_Anonima -> tipo VARIABLE EQUALS . tupla LBRACE programa RBRACE DOTCOMMA
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (43) tupla -> . LPAREN valores RPAREN
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    LPAREN          shift and go to state 11
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valor                          shift and go to state 135
    tupla                          shift and go to state 136
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 97

    (76) funcion_flecha -> tipo VARIABLE LPAREN . valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (44) valores -> . valor
    (45) valores -> . valor COMMA valores
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valores                        shift and go to state 137
    valor                          shift and go to state 64
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 98

    (71) funcion -> VARIABLE LPAREN valores . RPAREN

    RPAREN          shift and go to state 138


state 99

    (72) funcion_Data -> VARIABLE DOT VARIABLE . LPAREN valores RPAREN DOTCOMMA

    LPAREN          shift and go to state 139


state 100

    (67) declaracion -> VAR VARIABLE EQUALS . valor DOTCOMMA
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valor                          shift and go to state 140
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 101

    (58) tipo -> MAP .

    COMMA           reduce using rule 58 (tipo -> MAP .)
    RANGLE          reduce using rule 58 (tipo -> MAP .)
    VARIABLE        reduce using rule 58 (tipo -> MAP .)


state 102

    (92) diccionario -> MAP LANGLE tipo . COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    COMMA           shift and go to state 141


state 103

    (62) tipo -> SET .

    COMMA           reduce using rule 62 (tipo -> SET .)
    RANGLE          reduce using rule 62 (tipo -> SET .)
    VARIABLE        reduce using rule 62 (tipo -> SET .)


state 104

    (63) tipo -> LIST .

    COMMA           reduce using rule 63 (tipo -> LIST .)
    RANGLE          reduce using rule 63 (tipo -> LIST .)
    VARIABLE        reduce using rule 63 (tipo -> LIST .)


state 105

    (77) Conjunto -> SET VARIABLE EQUALS . cuerpo_conjunto DOTCOMMA
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE

    LBRACE          shift and go to state 143

    cuerpo_conjunto                shift and go to state 142

state 106

    (78) Conjunto -> SET LANGLE tipo . RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA

    RANGLE          shift and go to state 144


state 107

    (34) estructura_List -> LIST LANGLE tipo . RANGLE VARIABLE EQUALS lista DOTCOMMA

    RANGLE          shift and go to state 145


state 108

    (91) funcion_Anonima -> tupla LBRACE programa . RBRACE DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN valor DOTCOMMA
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (68) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (26) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (73) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (85) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (90) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (91) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (92) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (77) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (76) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (36) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (71) funcion -> . VARIABLE LPAREN valores RPAREN
    (72) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RBRACE          shift and go to state 146
    RETURN          shift and go to state 8
    PRINT           shift and go to state 10
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    IF              shift and go to state 44
    SWITCH          shift and go to state 46
    FOR             shift and go to state 47
    VOID            shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    tupla                          shift and go to state 40
    cuerpo                         shift and go to state 52
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 9
    tipo                           shift and go to state 12
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 39
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 109

    (26) sentencia_If -> IF LPAREN condiciones . RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> IF LPAREN condiciones . RPAREN LBRACE programa RBRACE

    RPAREN          shift and go to state 147


state 110

    (29) condicion -> valor . Comparador valor
    (68) operacion -> valor . operador expresion
    (37) Comparador -> . EQUALS EQUALS
    (38) Comparador -> . LANGLE
    (39) Comparador -> . RANGLE
    (40) Comparador -> . LANGLE EQUALS
    (41) Comparador -> . RANGLE EQUALS
    (42) Comparador -> . NEQ
    (81) operador -> . PLUS
    (82) operador -> . MINUS
    (83) operador -> . TIMES
    (84) operador -> . DIVIDE

    EQUALS          shift and go to state 127
    LANGLE          shift and go to state 128
    RANGLE          shift and go to state 129
    NEQ             shift and go to state 130
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61

    Comparador                     shift and go to state 126
    operador                       shift and go to state 57

state 111

    (79) cuerpo_conjunto -> LBRACE valores RBRACE .

    PLUS            reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    MINUS           reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    TIMES           reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    DIVIDE          reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    DOTCOMMA        reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    COMMA           reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    RPAREN          reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    TWODOTS         reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    RBRACE          reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    RBRACKET        reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    RETURN          reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    PRINT           reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    VAR             reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    COMMENTLINE     reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    COMMENTBLOCK    reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    MAP             reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    DOUBLE          reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    STRING          reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    INT             reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    SET             reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    LIST            reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    BOOLEAN         reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    TUPLE           reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    VARIABLE        reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    NUMBER          reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    FLOAT           reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    CHAINCHAR       reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    IF              reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    SWITCH          reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    FOR             reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    VOID            reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    TRUE            reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    FALSE           reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    LPAREN          reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    LBRACKET        reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    LBRACE          reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    $end            reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    EQUALS          reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    LANGLE          reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    RANGLE          reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    NEQ             reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    AND             reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    OR              reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)
    BREAK           reduce using rule 79 (cuerpo_conjunto -> LBRACE valores RBRACE .)


state 112

    (93) cuerpo_Diccionario -> LBRACE duplas RBRACE .

    PLUS            reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    MINUS           reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    TIMES           reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    DIVIDE          reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    DOTCOMMA        reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    COMMA           reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    RPAREN          reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    TWODOTS         reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    RBRACE          reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    RBRACKET        reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    RETURN          reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    PRINT           reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    VAR             reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    COMMENTLINE     reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    COMMENTBLOCK    reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    MAP             reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    DOUBLE          reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    STRING          reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    INT             reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    SET             reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    LIST            reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    BOOLEAN         reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    TUPLE           reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    VARIABLE        reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    NUMBER          reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    FLOAT           reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    CHAINCHAR       reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    IF              reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    SWITCH          reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    FOR             reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    VOID            reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    TRUE            reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    FALSE           reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    LPAREN          reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    LBRACKET        reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    LBRACE          reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    $end            reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    EQUALS          reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    LANGLE          reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    RANGLE          reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    NEQ             reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    AND             reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    OR              reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)
    BREAK           reduce using rule 93 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)


state 113

    (97) dupla -> valor TWODOTS . valor
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valor                          shift and go to state 148
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 114

    (96) duplas -> dupla COMMA . duplas
    (95) duplas -> . dupla
    (96) duplas -> . dupla COMMA duplas
    (97) dupla -> . valor TWODOTS valor
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    dupla                          shift and go to state 79
    duplas                         shift and go to state 149
    valor                          shift and go to state 150
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 115

    (73) sentencia_Switch -> SWITCH LPAREN valor . RPAREN LBRACE caso RBRACE
    (68) operacion -> valor . operador expresion
    (81) operador -> . PLUS
    (82) operador -> . MINUS
    (83) operador -> . TIMES
    (84) operador -> . DIVIDE

    RPAREN          shift and go to state 151
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61

    operador                       shift and go to state 57

state 116

    (85) ciclo_for -> FOR LPAREN declaracion . condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (29) condicion -> . valor Comparador valor
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    condicion                      shift and go to state 152
    valor                          shift and go to state 110
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 117

    (66) declaracion -> tipo . VARIABLE EQUALS valor DOTCOMMA

    VARIABLE        shift and go to state 153


state 118

    (36) funcion_Void -> VOID VARIABLE LPAREN . valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (44) valores -> . valor
    (45) valores -> . valor COMMA valores
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valores                        shift and go to state 154
    valor                          shift and go to state 64
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 119

    (35) lista -> LBRACKET valores RBRACKET .

    PLUS            reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    MINUS           reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    TIMES           reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    DIVIDE          reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    DOTCOMMA        reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    COMMA           reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    RPAREN          reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    TWODOTS         reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    RBRACE          reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    RBRACKET        reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    RETURN          reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    PRINT           reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    VAR             reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    COMMENTLINE     reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    COMMENTBLOCK    reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    MAP             reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    DOUBLE          reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    STRING          reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    INT             reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    SET             reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    LIST            reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    BOOLEAN         reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    TUPLE           reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    VARIABLE        reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    NUMBER          reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    FLOAT           reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    CHAINCHAR       reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    IF              reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    SWITCH          reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    FOR             reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    VOID            reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    TRUE            reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    FALSE           reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    LPAREN          reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    LBRACKET        reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    LBRACE          reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    $end            reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    EQUALS          reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    LANGLE          reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    RANGLE          reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    NEQ             reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    AND             reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    OR              reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)
    BREAK           reduce using rule 35 (lista -> LBRACKET valores RBRACKET .)


state 120

    (69) expresion -> LPAREN operacion . RPAREN
    (53) valor -> operacion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 155
    COMMA           reduce using rule 53 (valor -> operacion .)
    PLUS            reduce using rule 53 (valor -> operacion .)
    MINUS           reduce using rule 53 (valor -> operacion .)
    TIMES           reduce using rule 53 (valor -> operacion .)
    DIVIDE          reduce using rule 53 (valor -> operacion .)

  ! RPAREN          [ reduce using rule 53 (valor -> operacion .) ]


state 121

    (68) operacion -> valor . operador expresion
    (44) valores -> valor .
    (45) valores -> valor . COMMA valores
    (81) operador -> . PLUS
    (82) operador -> . MINUS
    (83) operador -> . TIMES
    (84) operador -> . DIVIDE

    RPAREN          reduce using rule 44 (valores -> valor .)
    COMMA           shift and go to state 95
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61

    operador                       shift and go to state 57

state 122

    (22) impresion -> PRINT LPAREN valores RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 156


state 123

    (25) impresion -> PRINT LPAREN RPAREN DOTCOMMA .

    RETURN          reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    PRINT           reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    VAR             reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    MAP             reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    STRING          reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    INT             reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    SET             reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    LIST            reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    TUPLE           reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    IF              reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    FOR             reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    VOID            reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    TRUE            reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    FALSE           reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    LBRACKET        reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    LBRACE          reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    $end            reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    BREAK           reduce using rule 25 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)


state 124

    (23) impresion -> PRINT LPAREN operacion RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 157


state 125

    (24) impresion -> PRINT LPAREN condiciones RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 158


state 126

    (29) condicion -> valor Comparador . valor
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valor                          shift and go to state 159
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 127

    (37) Comparador -> EQUALS . EQUALS

    EQUALS          shift and go to state 160


state 128

    (38) Comparador -> LANGLE .
    (40) Comparador -> LANGLE . EQUALS

    VARIABLE        reduce using rule 38 (Comparador -> LANGLE .)
    NUMBER          reduce using rule 38 (Comparador -> LANGLE .)
    FLOAT           reduce using rule 38 (Comparador -> LANGLE .)
    CHAINCHAR       reduce using rule 38 (Comparador -> LANGLE .)
    TRUE            reduce using rule 38 (Comparador -> LANGLE .)
    FALSE           reduce using rule 38 (Comparador -> LANGLE .)
    LPAREN          reduce using rule 38 (Comparador -> LANGLE .)
    LBRACKET        reduce using rule 38 (Comparador -> LANGLE .)
    LBRACE          reduce using rule 38 (Comparador -> LANGLE .)
    EQUALS          shift and go to state 161


state 129

    (39) Comparador -> RANGLE .
    (41) Comparador -> RANGLE . EQUALS

    VARIABLE        reduce using rule 39 (Comparador -> RANGLE .)
    NUMBER          reduce using rule 39 (Comparador -> RANGLE .)
    FLOAT           reduce using rule 39 (Comparador -> RANGLE .)
    CHAINCHAR       reduce using rule 39 (Comparador -> RANGLE .)
    TRUE            reduce using rule 39 (Comparador -> RANGLE .)
    FALSE           reduce using rule 39 (Comparador -> RANGLE .)
    LPAREN          reduce using rule 39 (Comparador -> RANGLE .)
    LBRACKET        reduce using rule 39 (Comparador -> RANGLE .)
    LBRACE          reduce using rule 39 (Comparador -> RANGLE .)
    EQUALS          shift and go to state 162


state 130

    (42) Comparador -> NEQ .

    VARIABLE        reduce using rule 42 (Comparador -> NEQ .)
    NUMBER          reduce using rule 42 (Comparador -> NEQ .)
    FLOAT           reduce using rule 42 (Comparador -> NEQ .)
    CHAINCHAR       reduce using rule 42 (Comparador -> NEQ .)
    TRUE            reduce using rule 42 (Comparador -> NEQ .)
    FALSE           reduce using rule 42 (Comparador -> NEQ .)
    LPAREN          reduce using rule 42 (Comparador -> NEQ .)
    LBRACKET        reduce using rule 42 (Comparador -> NEQ .)
    LBRACE          reduce using rule 42 (Comparador -> NEQ .)


state 131

    (31) condiciones -> condicion conector . condiciones
    (30) condiciones -> . condicion
    (31) condiciones -> . condicion conector condiciones
    (29) condicion -> . valor Comparador valor
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    condicion                      shift and go to state 93
    condiciones                    shift and go to state 163
    valor                          shift and go to state 110
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 132

    (32) conector -> AND .

    VARIABLE        reduce using rule 32 (conector -> AND .)
    NUMBER          reduce using rule 32 (conector -> AND .)
    FLOAT           reduce using rule 32 (conector -> AND .)
    CHAINCHAR       reduce using rule 32 (conector -> AND .)
    TRUE            reduce using rule 32 (conector -> AND .)
    FALSE           reduce using rule 32 (conector -> AND .)
    LPAREN          reduce using rule 32 (conector -> AND .)
    LBRACKET        reduce using rule 32 (conector -> AND .)
    LBRACE          reduce using rule 32 (conector -> AND .)


state 133

    (33) conector -> OR .

    VARIABLE        reduce using rule 33 (conector -> OR .)
    NUMBER          reduce using rule 33 (conector -> OR .)
    FLOAT           reduce using rule 33 (conector -> OR .)
    CHAINCHAR       reduce using rule 33 (conector -> OR .)
    TRUE            reduce using rule 33 (conector -> OR .)
    FALSE           reduce using rule 33 (conector -> OR .)
    LPAREN          reduce using rule 33 (conector -> OR .)
    LBRACKET        reduce using rule 33 (conector -> OR .)
    LBRACE          reduce using rule 33 (conector -> OR .)


state 134

    (45) valores -> valor COMMA valores .

    RPAREN          reduce using rule 45 (valores -> valor COMMA valores .)
    RBRACE          reduce using rule 45 (valores -> valor COMMA valores .)
    RBRACKET        reduce using rule 45 (valores -> valor COMMA valores .)


state 135

    (66) declaracion -> tipo VARIABLE EQUALS valor . DOTCOMMA
    (68) operacion -> valor . operador expresion
    (81) operador -> . PLUS
    (82) operador -> . MINUS
    (83) operador -> . TIMES
    (84) operador -> . DIVIDE

    DOTCOMMA        shift and go to state 164
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61

    operador                       shift and go to state 57

state 136

    (90) funcion_Anonima -> tipo VARIABLE EQUALS tupla . LBRACE programa RBRACE DOTCOMMA
    (54) valor -> tupla .

    LBRACE          shift and go to state 165
    DOTCOMMA        reduce using rule 54 (valor -> tupla .)
    PLUS            reduce using rule 54 (valor -> tupla .)
    MINUS           reduce using rule 54 (valor -> tupla .)
    TIMES           reduce using rule 54 (valor -> tupla .)
    DIVIDE          reduce using rule 54 (valor -> tupla .)


state 137

    (76) funcion_flecha -> tipo VARIABLE LPAREN valores . RPAREN ARROWFUNCTION programa DOTCOMMA

    RPAREN          shift and go to state 166


state 138

    (71) funcion -> VARIABLE LPAREN valores RPAREN .

    RETURN          reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    PRINT           reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    VAR             reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    COMMENTLINE     reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    COMMENTBLOCK    reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    MAP             reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    DOUBLE          reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    STRING          reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    INT             reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    SET             reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    LIST            reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    BOOLEAN         reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    TUPLE           reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    VARIABLE        reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    NUMBER          reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    FLOAT           reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    CHAINCHAR       reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    IF              reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    SWITCH          reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    FOR             reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    VOID            reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    TRUE            reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    FALSE           reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    LPAREN          reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    LBRACKET        reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    LBRACE          reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    $end            reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    RBRACE          reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    DOTCOMMA        reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)
    BREAK           reduce using rule 71 (funcion -> VARIABLE LPAREN valores RPAREN .)


state 139

    (72) funcion_Data -> VARIABLE DOT VARIABLE LPAREN . valores RPAREN DOTCOMMA
    (44) valores -> . valor
    (45) valores -> . valor COMMA valores
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valores                        shift and go to state 167
    valor                          shift and go to state 64
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 140

    (67) declaracion -> VAR VARIABLE EQUALS valor . DOTCOMMA
    (68) operacion -> valor . operador expresion
    (81) operador -> . PLUS
    (82) operador -> . MINUS
    (83) operador -> . TIMES
    (84) operador -> . DIVIDE

    DOTCOMMA        shift and go to state 168
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61

    operador                       shift and go to state 57

state 141

    (92) diccionario -> MAP LANGLE tipo COMMA . tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE

    MAP             shift and go to state 101
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 103
    LIST            shift and go to state 104
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35

    tipo                           shift and go to state 169

state 142

    (77) Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto . DOTCOMMA

    DOTCOMMA        shift and go to state 170


state 143

    (79) cuerpo_conjunto -> LBRACE . valores RBRACE
    (80) cuerpo_conjunto -> LBRACE . RBRACE
    (44) valores -> . valor
    (45) valores -> . valor COMMA valores
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RBRACE          shift and go to state 171
    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valores                        shift and go to state 75
    valor                          shift and go to state 64
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 144

    (78) Conjunto -> SET LANGLE tipo RANGLE . VARIABLE EQUALS cuerpo_conjunto DOTCOMMA

    VARIABLE        shift and go to state 172


state 145

    (34) estructura_List -> LIST LANGLE tipo RANGLE . VARIABLE EQUALS lista DOTCOMMA

    VARIABLE        shift and go to state 173


state 146

    (91) funcion_Anonima -> tupla LBRACE programa RBRACE . DOTCOMMA

    DOTCOMMA        shift and go to state 174


state 147

    (26) sentencia_If -> IF LPAREN condiciones RPAREN . LBRACE programa RBRACE else
    (27) sentencia_If -> IF LPAREN condiciones RPAREN . LBRACE programa RBRACE

    LBRACE          shift and go to state 175


state 148

    (97) dupla -> valor TWODOTS valor .
    (68) operacion -> valor . operador expresion
    (81) operador -> . PLUS
    (82) operador -> . MINUS
    (83) operador -> . TIMES
    (84) operador -> . DIVIDE

    COMMA           reduce using rule 97 (dupla -> valor TWODOTS valor .)
    RBRACE          reduce using rule 97 (dupla -> valor TWODOTS valor .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61

    operador                       shift and go to state 57

state 149

    (96) duplas -> dupla COMMA duplas .

    RBRACE          reduce using rule 96 (duplas -> dupla COMMA duplas .)


state 150

    (97) dupla -> valor . TWODOTS valor
    (68) operacion -> valor . operador expresion
    (81) operador -> . PLUS
    (82) operador -> . MINUS
    (83) operador -> . TIMES
    (84) operador -> . DIVIDE

    TWODOTS         shift and go to state 113
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61

    operador                       shift and go to state 57

state 151

    (73) sentencia_Switch -> SWITCH LPAREN valor RPAREN . LBRACE caso RBRACE

    LBRACE          shift and go to state 176


state 152

    (85) ciclo_for -> FOR LPAREN declaracion condicion . DOTCOMMA contador RPAREN LBRACE programa RBRACE

    DOTCOMMA        shift and go to state 177


state 153

    (66) declaracion -> tipo VARIABLE . EQUALS valor DOTCOMMA

    EQUALS          shift and go to state 178


state 154

    (36) funcion_Void -> VOID VARIABLE LPAREN valores . RPAREN LBRACE programa RBRACE DOTCOMMA

    RPAREN          shift and go to state 179


state 155

    (69) expresion -> LPAREN operacion RPAREN .

    RETURN          reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    PRINT           reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    VAR             reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    COMMENTLINE     reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    COMMENTBLOCK    reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    MAP             reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    DOUBLE          reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    STRING          reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    INT             reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    SET             reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    LIST            reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    BOOLEAN         reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    TUPLE           reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    VARIABLE        reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    NUMBER          reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    FLOAT           reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    CHAINCHAR       reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    IF              reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    SWITCH          reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    FOR             reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    VOID            reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    TRUE            reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    FALSE           reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    LPAREN          reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    LBRACKET        reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    LBRACE          reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    $end            reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    PLUS            reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    MINUS           reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    TIMES           reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    DIVIDE          reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    DOTCOMMA        reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    COMMA           reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    RPAREN          reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    TWODOTS         reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    RBRACE          reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    RBRACKET        reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    EQUALS          reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    LANGLE          reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    RANGLE          reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    NEQ             reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    AND             reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    OR              reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)
    BREAK           reduce using rule 69 (expresion -> LPAREN operacion RPAREN .)


state 156

    (22) impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .

    RETURN          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    PRINT           reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    VAR             reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    MAP             reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    STRING          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    INT             reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    SET             reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    LIST            reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    TUPLE           reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    IF              reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    FOR             reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    VOID            reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    TRUE            reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    FALSE           reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    LBRACKET        reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    LBRACE          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    $end            reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    BREAK           reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)


state 157

    (23) impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .

    RETURN          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    PRINT           reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    VAR             reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    MAP             reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    STRING          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    INT             reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    SET             reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    LIST            reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    TUPLE           reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    IF              reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    FOR             reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    VOID            reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    TRUE            reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    FALSE           reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    LBRACKET        reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    LBRACE          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    $end            reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    BREAK           reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)


state 158

    (24) impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .

    RETURN          reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    PRINT           reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    VAR             reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    MAP             reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    STRING          reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    INT             reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    SET             reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    LIST            reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    TUPLE           reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    IF              reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    FOR             reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    VOID            reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    TRUE            reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    FALSE           reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    LBRACKET        reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    LBRACE          reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    $end            reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)
    BREAK           reduce using rule 24 (impresion -> PRINT LPAREN condiciones RPAREN DOTCOMMA .)


state 159

    (29) condicion -> valor Comparador valor .
    (68) operacion -> valor . operador expresion
    (81) operador -> . PLUS
    (82) operador -> . MINUS
    (83) operador -> . TIMES
    (84) operador -> . DIVIDE

    AND             reduce using rule 29 (condicion -> valor Comparador valor .)
    OR              reduce using rule 29 (condicion -> valor Comparador valor .)
    RPAREN          reduce using rule 29 (condicion -> valor Comparador valor .)
    DOTCOMMA        reduce using rule 29 (condicion -> valor Comparador valor .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61

    operador                       shift and go to state 57

state 160

    (37) Comparador -> EQUALS EQUALS .

    VARIABLE        reduce using rule 37 (Comparador -> EQUALS EQUALS .)
    NUMBER          reduce using rule 37 (Comparador -> EQUALS EQUALS .)
    FLOAT           reduce using rule 37 (Comparador -> EQUALS EQUALS .)
    CHAINCHAR       reduce using rule 37 (Comparador -> EQUALS EQUALS .)
    TRUE            reduce using rule 37 (Comparador -> EQUALS EQUALS .)
    FALSE           reduce using rule 37 (Comparador -> EQUALS EQUALS .)
    LPAREN          reduce using rule 37 (Comparador -> EQUALS EQUALS .)
    LBRACKET        reduce using rule 37 (Comparador -> EQUALS EQUALS .)
    LBRACE          reduce using rule 37 (Comparador -> EQUALS EQUALS .)


state 161

    (40) Comparador -> LANGLE EQUALS .

    VARIABLE        reduce using rule 40 (Comparador -> LANGLE EQUALS .)
    NUMBER          reduce using rule 40 (Comparador -> LANGLE EQUALS .)
    FLOAT           reduce using rule 40 (Comparador -> LANGLE EQUALS .)
    CHAINCHAR       reduce using rule 40 (Comparador -> LANGLE EQUALS .)
    TRUE            reduce using rule 40 (Comparador -> LANGLE EQUALS .)
    FALSE           reduce using rule 40 (Comparador -> LANGLE EQUALS .)
    LPAREN          reduce using rule 40 (Comparador -> LANGLE EQUALS .)
    LBRACKET        reduce using rule 40 (Comparador -> LANGLE EQUALS .)
    LBRACE          reduce using rule 40 (Comparador -> LANGLE EQUALS .)


state 162

    (41) Comparador -> RANGLE EQUALS .

    VARIABLE        reduce using rule 41 (Comparador -> RANGLE EQUALS .)
    NUMBER          reduce using rule 41 (Comparador -> RANGLE EQUALS .)
    FLOAT           reduce using rule 41 (Comparador -> RANGLE EQUALS .)
    CHAINCHAR       reduce using rule 41 (Comparador -> RANGLE EQUALS .)
    TRUE            reduce using rule 41 (Comparador -> RANGLE EQUALS .)
    FALSE           reduce using rule 41 (Comparador -> RANGLE EQUALS .)
    LPAREN          reduce using rule 41 (Comparador -> RANGLE EQUALS .)
    LBRACKET        reduce using rule 41 (Comparador -> RANGLE EQUALS .)
    LBRACE          reduce using rule 41 (Comparador -> RANGLE EQUALS .)


state 163

    (31) condiciones -> condicion conector condiciones .

    RPAREN          reduce using rule 31 (condiciones -> condicion conector condiciones .)


state 164

    (66) declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .

    RETURN          reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    PRINT           reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    VAR             reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTLINE     reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    MAP             reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    DOUBLE          reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    STRING          reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    INT             reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    SET             reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    LIST            reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    BOOLEAN         reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    TUPLE           reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    VARIABLE        reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    NUMBER          reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    FLOAT           reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    CHAINCHAR       reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    IF              reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    SWITCH          reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    FOR             reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    VOID            reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    TRUE            reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    FALSE           reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    LPAREN          reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    LBRACKET        reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    LBRACE          reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    $end            reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    RBRACE          reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    DOTCOMMA        reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    BREAK           reduce using rule 66 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)


state 165

    (90) funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE . programa RBRACE DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN valor DOTCOMMA
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (68) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (26) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (73) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (85) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (90) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (91) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (92) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (77) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (76) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (36) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (71) funcion -> . VARIABLE LPAREN valores RPAREN
    (72) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RETURN          shift and go to state 8
    PRINT           shift and go to state 10
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    IF              shift and go to state 44
    SWITCH          shift and go to state 46
    FOR             shift and go to state 47
    VOID            shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    tipo                           shift and go to state 12
    tupla                          shift and go to state 40
    programa                       shift and go to state 180
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 9
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 39
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 166

    (76) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN . ARROWFUNCTION programa DOTCOMMA

    ARROWFUNCTION   shift and go to state 181


state 167

    (72) funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores . RPAREN DOTCOMMA

    RPAREN          shift and go to state 182


state 168

    (67) declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .

    RETURN          reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    PRINT           reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    VAR             reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTLINE     reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    MAP             reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    DOUBLE          reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    STRING          reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    INT             reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    SET             reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    LIST            reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    BOOLEAN         reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    TUPLE           reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    VARIABLE        reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    NUMBER          reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    FLOAT           reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    CHAINCHAR       reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    IF              reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    SWITCH          reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    FOR             reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    VOID            reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    TRUE            reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    FALSE           reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    LPAREN          reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    LBRACKET        reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    LBRACE          reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    $end            reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    RBRACE          reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    DOTCOMMA        reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    BREAK           reduce using rule 67 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)


state 169

    (92) diccionario -> MAP LANGLE tipo COMMA tipo . RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    RANGLE          shift and go to state 183


state 170

    (77) Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .

    RETURN          reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    PRINT           reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VAR             reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTLINE     reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    MAP             reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOUBLE          reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    STRING          reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    INT             reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SET             reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LIST            reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BOOLEAN         reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    TUPLE           reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VARIABLE        reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    NUMBER          reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FLOAT           reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    CHAINCHAR       reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    IF              reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SWITCH          reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FOR             reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VOID            reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    TRUE            reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FALSE           reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LPAREN          reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LBRACKET        reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LBRACE          reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    $end            reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    RBRACE          reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOTCOMMA        reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BREAK           reduce using rule 77 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)


state 171

    (80) cuerpo_conjunto -> LBRACE RBRACE .

    DOTCOMMA        reduce using rule 80 (cuerpo_conjunto -> LBRACE RBRACE .)


state 172

    (78) Conjunto -> SET LANGLE tipo RANGLE VARIABLE . EQUALS cuerpo_conjunto DOTCOMMA

    EQUALS          shift and go to state 184


state 173

    (34) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE . EQUALS lista DOTCOMMA

    EQUALS          shift and go to state 185


state 174

    (91) funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .

    RETURN          reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    PRINT           reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    VAR             reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTLINE     reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    MAP             reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    DOUBLE          reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    STRING          reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    INT             reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    SET             reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    LIST            reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    BOOLEAN         reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    TUPLE           reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    VARIABLE        reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    NUMBER          reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    FLOAT           reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    CHAINCHAR       reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    IF              reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    SWITCH          reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    FOR             reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    VOID            reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    TRUE            reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    FALSE           reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    LPAREN          reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    LBRACKET        reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    LBRACE          reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    $end            reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    RBRACE          reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    DOTCOMMA        reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    BREAK           reduce using rule 91 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)


state 175

    (26) sentencia_If -> IF LPAREN condiciones RPAREN LBRACE . programa RBRACE else
    (27) sentencia_If -> IF LPAREN condiciones RPAREN LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN valor DOTCOMMA
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (68) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (26) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (73) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (85) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (90) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (91) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (92) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (77) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (76) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (36) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (71) funcion -> . VARIABLE LPAREN valores RPAREN
    (72) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RETURN          shift and go to state 8
    PRINT           shift and go to state 10
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    IF              shift and go to state 44
    SWITCH          shift and go to state 46
    FOR             shift and go to state 47
    VOID            shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    programa                       shift and go to state 186
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 9
    tipo                           shift and go to state 12
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 39
    tupla                          shift and go to state 40
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 176

    (73) sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE . caso RBRACE
    (74) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA caso
    (75) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA

    CASE            shift and go to state 188

    caso                           shift and go to state 187

state 177

    (85) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA . contador RPAREN LBRACE programa RBRACE
    (86) contador -> . VARIABLE PLUS PLUS
    (87) contador -> . VARIABLE PLUS EQUALS valor
    (88) contador -> . VARIABLE MINUS MINUS
    (89) contador -> . VARIABLE MINUS EQUALS valor

    VARIABLE        shift and go to state 190

    contador                       shift and go to state 189

state 178

    (66) declaracion -> tipo VARIABLE EQUALS . valor DOTCOMMA
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valor                          shift and go to state 135
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 179

    (36) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN . LBRACE programa RBRACE DOTCOMMA

    LBRACE          shift and go to state 191


state 180

    (90) funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa . RBRACE DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN valor DOTCOMMA
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (68) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (26) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (73) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (85) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (90) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (91) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (92) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (77) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (76) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (36) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (71) funcion -> . VARIABLE LPAREN valores RPAREN
    (72) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RBRACE          shift and go to state 192
    RETURN          shift and go to state 8
    PRINT           shift and go to state 10
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    IF              shift and go to state 44
    SWITCH          shift and go to state 46
    FOR             shift and go to state 47
    VOID            shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    tipo                           shift and go to state 12
    tupla                          shift and go to state 40
    cuerpo                         shift and go to state 52
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 9
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 39
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 181

    (76) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION . programa DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN valor DOTCOMMA
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (68) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (26) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (73) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (85) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (90) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (91) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (92) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (77) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (76) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (36) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (71) funcion -> . VARIABLE LPAREN valores RPAREN
    (72) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RETURN          shift and go to state 8
    PRINT           shift and go to state 10
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    IF              shift and go to state 44
    SWITCH          shift and go to state 46
    FOR             shift and go to state 47
    VOID            shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    tipo                           shift and go to state 12
    programa                       shift and go to state 193
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 9
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 39
    tupla                          shift and go to state 40
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 182

    (72) funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 194


state 183

    (92) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE . VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    VARIABLE        shift and go to state 195


state 184

    (78) Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS . cuerpo_conjunto DOTCOMMA
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE

    LBRACE          shift and go to state 143

    cuerpo_conjunto                shift and go to state 196

state 185

    (34) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS . lista DOTCOMMA
    (35) lista -> . LBRACKET valores RBRACKET

    LBRACKET        shift and go to state 51

    lista                          shift and go to state 197

state 186

    (26) sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa . RBRACE else
    (27) sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN valor DOTCOMMA
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (68) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (26) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (73) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (85) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (90) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (91) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (92) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (77) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (76) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (36) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (71) funcion -> . VARIABLE LPAREN valores RPAREN
    (72) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RBRACE          shift and go to state 198
    RETURN          shift and go to state 8
    PRINT           shift and go to state 10
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    IF              shift and go to state 44
    SWITCH          shift and go to state 46
    FOR             shift and go to state 47
    VOID            shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    cuerpo                         shift and go to state 52
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 9
    tipo                           shift and go to state 12
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 39
    tupla                          shift and go to state 40
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 187

    (73) sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso . RBRACE

    RBRACE          shift and go to state 199


state 188

    (74) caso -> CASE . valor TWODOTS programa BREAK DOTCOMMA caso
    (75) caso -> CASE . valor TWODOTS programa BREAK DOTCOMMA
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valor                          shift and go to state 200
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 189

    (85) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador . RPAREN LBRACE programa RBRACE

    RPAREN          shift and go to state 201


state 190

    (86) contador -> VARIABLE . PLUS PLUS
    (87) contador -> VARIABLE . PLUS EQUALS valor
    (88) contador -> VARIABLE . MINUS MINUS
    (89) contador -> VARIABLE . MINUS EQUALS valor

    PLUS            shift and go to state 202
    MINUS           shift and go to state 203


state 191

    (36) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE . programa RBRACE DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN valor DOTCOMMA
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (68) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (26) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (73) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (85) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (90) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (91) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (92) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (77) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (76) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (36) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (71) funcion -> . VARIABLE LPAREN valores RPAREN
    (72) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RETURN          shift and go to state 8
    PRINT           shift and go to state 10
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    IF              shift and go to state 44
    SWITCH          shift and go to state 46
    FOR             shift and go to state 47
    VOID            shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    programa                       shift and go to state 204
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 9
    tipo                           shift and go to state 12
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 39
    tupla                          shift and go to state 40
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 192

    (90) funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE . DOTCOMMA

    DOTCOMMA        shift and go to state 205


state 193

    (76) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa . DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN valor DOTCOMMA
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (68) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (26) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (73) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (85) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (90) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (91) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (92) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (77) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (76) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (36) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (71) funcion -> . VARIABLE LPAREN valores RPAREN
    (72) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    DOTCOMMA        shift and go to state 206
    RETURN          shift and go to state 8
    PRINT           shift and go to state 10
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    IF              shift and go to state 44
    SWITCH          shift and go to state 46
    FOR             shift and go to state 47
    VOID            shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    tipo                           shift and go to state 12
    cuerpo                         shift and go to state 52
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 9
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 39
    tupla                          shift and go to state 40
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 194

    (72) funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .

    RETURN          reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    PRINT           reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    VAR             reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    MAP             reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    STRING          reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    INT             reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    SET             reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    LIST            reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    TUPLE           reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    IF              reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    FOR             reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    VOID            reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    TRUE            reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    FALSE           reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    LBRACKET        reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    LBRACE          reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    $end            reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    BREAK           reduce using rule 72 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)


state 195

    (92) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE . EQUALS cuerpo_Diccionario DOTCOMMA

    EQUALS          shift and go to state 207


state 196

    (78) Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto . DOTCOMMA

    DOTCOMMA        shift and go to state 208


state 197

    (34) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista . DOTCOMMA

    DOTCOMMA        shift and go to state 209


state 198

    (26) sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE . else
    (27) sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .
    (28) else -> . ELSE LBRACE programa RBRACE

    RETURN          reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    PRINT           reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    VAR             reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    MAP             reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    STRING          reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    INT             reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    SET             reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    LIST            reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    TUPLE           reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    NUMBER          reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    FLOAT           reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    IF              reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    SWITCH          reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    FOR             reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    VOID            reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    TRUE            reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    FALSE           reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    LPAREN          reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    LBRACKET        reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    LBRACE          reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    $end            reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    RBRACE          reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    BREAK           reduce using rule 27 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE .)
    ELSE            shift and go to state 211

    else                           shift and go to state 210

state 199

    (73) sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .

    RETURN          reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    PRINT           reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    VAR             reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    COMMENTLINE     reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    COMMENTBLOCK    reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    MAP             reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    DOUBLE          reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    STRING          reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    INT             reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    SET             reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    LIST            reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    BOOLEAN         reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    TUPLE           reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    VARIABLE        reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    NUMBER          reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    FLOAT           reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    CHAINCHAR       reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    IF              reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    SWITCH          reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    FOR             reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    VOID            reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    TRUE            reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    FALSE           reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    LPAREN          reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    LBRACKET        reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    LBRACE          reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    $end            reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    RBRACE          reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    DOTCOMMA        reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    BREAK           reduce using rule 73 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)


state 200

    (74) caso -> CASE valor . TWODOTS programa BREAK DOTCOMMA caso
    (75) caso -> CASE valor . TWODOTS programa BREAK DOTCOMMA
    (68) operacion -> valor . operador expresion
    (81) operador -> . PLUS
    (82) operador -> . MINUS
    (83) operador -> . TIMES
    (84) operador -> . DIVIDE

    TWODOTS         shift and go to state 212
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61

    operador                       shift and go to state 57

state 201

    (85) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN . LBRACE programa RBRACE

    LBRACE          shift and go to state 213


state 202

    (86) contador -> VARIABLE PLUS . PLUS
    (87) contador -> VARIABLE PLUS . EQUALS valor

    PLUS            shift and go to state 214
    EQUALS          shift and go to state 215


state 203

    (88) contador -> VARIABLE MINUS . MINUS
    (89) contador -> VARIABLE MINUS . EQUALS valor

    MINUS           shift and go to state 216
    EQUALS          shift and go to state 217


state 204

    (36) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa . RBRACE DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN valor DOTCOMMA
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (68) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (26) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (73) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (85) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (90) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (91) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (92) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (77) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (76) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (36) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (71) funcion -> . VARIABLE LPAREN valores RPAREN
    (72) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RBRACE          shift and go to state 218
    RETURN          shift and go to state 8
    PRINT           shift and go to state 10
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    IF              shift and go to state 44
    SWITCH          shift and go to state 46
    FOR             shift and go to state 47
    VOID            shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    cuerpo                         shift and go to state 52
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 9
    tipo                           shift and go to state 12
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 39
    tupla                          shift and go to state 40
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 205

    (90) funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .

    RETURN          reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    PRINT           reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    VAR             reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTLINE     reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    MAP             reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    DOUBLE          reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    STRING          reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    INT             reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    SET             reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    LIST            reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    BOOLEAN         reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    TUPLE           reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    VARIABLE        reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    NUMBER          reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    FLOAT           reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    CHAINCHAR       reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    IF              reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    SWITCH          reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    FOR             reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    VOID            reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    TRUE            reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    FALSE           reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    LPAREN          reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    LBRACKET        reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    LBRACE          reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    $end            reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    RBRACE          reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    DOTCOMMA        reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    BREAK           reduce using rule 90 (funcion_Anonima -> tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)


state 206

    (76) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .

    RETURN          reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    PRINT           reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    VAR             reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    COMMENTLINE     reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    MAP             reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    DOUBLE          reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    STRING          reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    INT             reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    SET             reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    LIST            reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    BOOLEAN         reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    TUPLE           reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    VARIABLE        reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    NUMBER          reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FLOAT           reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    CHAINCHAR       reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    IF              reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    SWITCH          reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FOR             reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    VOID            reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    TRUE            reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FALSE           reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    LPAREN          reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    LBRACKET        reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    LBRACE          reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    $end            reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    RBRACE          reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    DOTCOMMA        reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    BREAK           reduce using rule 76 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)


state 207

    (92) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS . cuerpo_Diccionario DOTCOMMA
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    LBRACE          shift and go to state 220

    cuerpo_Diccionario             shift and go to state 219

state 208

    (78) Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .

    RETURN          reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    PRINT           reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VAR             reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTLINE     reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    MAP             reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOUBLE          reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    STRING          reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    INT             reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SET             reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LIST            reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BOOLEAN         reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    TUPLE           reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VARIABLE        reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    NUMBER          reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FLOAT           reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    CHAINCHAR       reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    IF              reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SWITCH          reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FOR             reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VOID            reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    TRUE            reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FALSE           reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LPAREN          reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LBRACKET        reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LBRACE          reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    $end            reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    RBRACE          reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOTCOMMA        reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BREAK           reduce using rule 78 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)


state 209

    (34) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .

    RETURN          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    PRINT           reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    VAR             reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    COMMENTLINE     reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    MAP             reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    DOUBLE          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    STRING          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    INT             reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    SET             reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    LIST            reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    BOOLEAN         reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    TUPLE           reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    VARIABLE        reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    NUMBER          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    FLOAT           reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    CHAINCHAR       reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    IF              reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    SWITCH          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    FOR             reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    VOID            reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    TRUE            reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    FALSE           reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    LPAREN          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    LBRACKET        reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    LBRACE          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    $end            reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    RBRACE          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    DOTCOMMA        reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)
    BREAK           reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA .)


state 210

    (26) sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .

    RETURN          reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    PRINT           reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    VAR             reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    COMMENTLINE     reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    COMMENTBLOCK    reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    MAP             reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    DOUBLE          reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    STRING          reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    INT             reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    SET             reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    LIST            reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    BOOLEAN         reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    TUPLE           reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    VARIABLE        reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    NUMBER          reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    FLOAT           reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    CHAINCHAR       reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    IF              reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    SWITCH          reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    FOR             reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    VOID            reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    TRUE            reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    FALSE           reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    LPAREN          reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    LBRACKET        reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    LBRACE          reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    $end            reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    RBRACE          reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    DOTCOMMA        reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)
    BREAK           reduce using rule 26 (sentencia_If -> IF LPAREN condiciones RPAREN LBRACE programa RBRACE else .)


state 211

    (28) else -> ELSE . LBRACE programa RBRACE

    LBRACE          shift and go to state 221


state 212

    (74) caso -> CASE valor TWODOTS . programa BREAK DOTCOMMA caso
    (75) caso -> CASE valor TWODOTS . programa BREAK DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN valor DOTCOMMA
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (68) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (26) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (73) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (85) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (90) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (91) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (92) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (77) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (76) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (36) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (71) funcion -> . VARIABLE LPAREN valores RPAREN
    (72) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RETURN          shift and go to state 8
    PRINT           shift and go to state 10
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    IF              shift and go to state 44
    SWITCH          shift and go to state 46
    FOR             shift and go to state 47
    VOID            shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valor                          shift and go to state 9
    programa                       shift and go to state 222
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 12
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 39
    tupla                          shift and go to state 40
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 213

    (85) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN valor DOTCOMMA
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (68) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (26) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (73) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (85) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (90) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (91) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (92) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (77) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (76) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (36) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (71) funcion -> . VARIABLE LPAREN valores RPAREN
    (72) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RETURN          shift and go to state 8
    PRINT           shift and go to state 10
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    IF              shift and go to state 44
    SWITCH          shift and go to state 46
    FOR             shift and go to state 47
    VOID            shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    declaracion                    shift and go to state 4
    programa                       shift and go to state 223
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 9
    tipo                           shift and go to state 12
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 39
    tupla                          shift and go to state 40
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 214

    (86) contador -> VARIABLE PLUS PLUS .

    RPAREN          reduce using rule 86 (contador -> VARIABLE PLUS PLUS .)


state 215

    (87) contador -> VARIABLE PLUS EQUALS . valor
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valor                          shift and go to state 224
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 216

    (88) contador -> VARIABLE MINUS MINUS .

    RPAREN          reduce using rule 88 (contador -> VARIABLE MINUS MINUS .)


state 217

    (89) contador -> VARIABLE MINUS EQUALS . valor
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valor                          shift and go to state 225
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 218

    (36) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE . DOTCOMMA

    DOTCOMMA        shift and go to state 226


state 219

    (92) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario . DOTCOMMA

    DOTCOMMA        shift and go to state 227


state 220

    (93) cuerpo_Diccionario -> LBRACE . duplas RBRACE
    (94) cuerpo_Diccionario -> LBRACE . RBRACE
    (95) duplas -> . dupla
    (96) duplas -> . dupla COMMA duplas
    (97) dupla -> . valor TWODOTS valor
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (68) operacion -> . valor operador expresion
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RBRACE          shift and go to state 228
    VARIABLE        shift and go to state 54
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    duplas                         shift and go to state 77
    dupla                          shift and go to state 79
    valor                          shift and go to state 150
    Bool                           shift and go to state 39
    operacion                      shift and go to state 55
    tupla                          shift and go to state 56
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 221

    (28) else -> ELSE LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN valor DOTCOMMA
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (68) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (26) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (73) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (85) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (90) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (91) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (92) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (77) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (76) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (36) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (71) funcion -> . VARIABLE LPAREN valores RPAREN
    (72) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RETURN          shift and go to state 8
    PRINT           shift and go to state 10
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    IF              shift and go to state 44
    SWITCH          shift and go to state 46
    FOR             shift and go to state 47
    VOID            shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    programa                       shift and go to state 229
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 9
    tipo                           shift and go to state 12
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 39
    tupla                          shift and go to state 40
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 222

    (74) caso -> CASE valor TWODOTS programa . BREAK DOTCOMMA caso
    (75) caso -> CASE valor TWODOTS programa . BREAK DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN valor DOTCOMMA
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (68) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (26) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (73) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (85) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (90) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (91) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (92) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (77) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (76) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (36) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (71) funcion -> . VARIABLE LPAREN valores RPAREN
    (72) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    BREAK           shift and go to state 230
    RETURN          shift and go to state 8
    PRINT           shift and go to state 10
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    IF              shift and go to state 44
    SWITCH          shift and go to state 46
    FOR             shift and go to state 47
    VOID            shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    valor                          shift and go to state 9
    cuerpo                         shift and go to state 52
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    tipo                           shift and go to state 12
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 39
    tupla                          shift and go to state 40
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 223

    (85) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN valor DOTCOMMA
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (68) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (26) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (73) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (85) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (90) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (91) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (92) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (77) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (76) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (36) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (71) funcion -> . VARIABLE LPAREN valores RPAREN
    (72) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RBRACE          shift and go to state 231
    RETURN          shift and go to state 8
    PRINT           shift and go to state 10
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    IF              shift and go to state 44
    SWITCH          shift and go to state 46
    FOR             shift and go to state 47
    VOID            shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    declaracion                    shift and go to state 4
    cuerpo                         shift and go to state 52
    impresion                      shift and go to state 3
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 9
    tipo                           shift and go to state 12
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 39
    tupla                          shift and go to state 40
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 224

    (87) contador -> VARIABLE PLUS EQUALS valor .
    (68) operacion -> valor . operador expresion
    (81) operador -> . PLUS
    (82) operador -> . MINUS
    (83) operador -> . TIMES
    (84) operador -> . DIVIDE

    RPAREN          reduce using rule 87 (contador -> VARIABLE PLUS EQUALS valor .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61

    operador                       shift and go to state 57

state 225

    (89) contador -> VARIABLE MINUS EQUALS valor .
    (68) operacion -> valor . operador expresion
    (81) operador -> . PLUS
    (82) operador -> . MINUS
    (83) operador -> . TIMES
    (84) operador -> . DIVIDE

    RPAREN          reduce using rule 89 (contador -> VARIABLE MINUS EQUALS valor .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61

    operador                       shift and go to state 57

state 226

    (36) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .

    RETURN          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    PRINT           reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    VAR             reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    COMMENTLINE     reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    MAP             reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    DOUBLE          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    STRING          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    INT             reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    SET             reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    LIST            reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    BOOLEAN         reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    TUPLE           reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    VARIABLE        reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    NUMBER          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    FLOAT           reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    CHAINCHAR       reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    IF              reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    SWITCH          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    FOR             reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    VOID            reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    TRUE            reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    FALSE           reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    LPAREN          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    LBRACKET        reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    LBRACE          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    $end            reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    RBRACE          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    DOTCOMMA        reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)
    BREAK           reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA .)


state 227

    (92) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .

    RETURN          reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    PRINT           reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    VAR             reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    COMMENTLINE     reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    MAP             reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    DOUBLE          reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    STRING          reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    INT             reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    SET             reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    LIST            reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    BOOLEAN         reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    TUPLE           reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    VARIABLE        reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    NUMBER          reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    FLOAT           reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    CHAINCHAR       reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    IF              reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    SWITCH          reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    FOR             reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    VOID            reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    TRUE            reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    FALSE           reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    LPAREN          reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    LBRACKET        reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    LBRACE          reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    $end            reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    RBRACE          reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    DOTCOMMA        reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    BREAK           reduce using rule 92 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)


state 228

    (94) cuerpo_Diccionario -> LBRACE RBRACE .

    DOTCOMMA        reduce using rule 94 (cuerpo_Diccionario -> LBRACE RBRACE .)


state 229

    (28) else -> ELSE LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . RETURN valor DOTCOMMA
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN condiciones RPAREN DOTCOMMA
    (25) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (66) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (67) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (68) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (58) tipo -> . MAP
    (59) tipo -> . DOUBLE
    (60) tipo -> . STRING
    (61) tipo -> . INT
    (62) tipo -> . SET
    (63) tipo -> . LIST
    (64) tipo -> . BOOLEAN
    (65) tipo -> . TUPLE
    (48) valor -> . VARIABLE
    (49) valor -> . NUMBER
    (50) valor -> . FLOAT
    (51) valor -> . CHAINCHAR
    (52) valor -> . Bool
    (53) valor -> . operacion
    (54) valor -> . tupla
    (55) valor -> . lista
    (56) valor -> . cuerpo_conjunto
    (57) valor -> . cuerpo_Diccionario
    (26) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE else
    (27) sentencia_If -> . IF LPAREN condiciones RPAREN LBRACE programa RBRACE
    (73) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (85) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (90) funcion_Anonima -> . tipo VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (91) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (92) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (77) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (78) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (76) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (36) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE DOTCOMMA
    (71) funcion -> . VARIABLE LPAREN valores RPAREN
    (72) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS lista DOTCOMMA
    (46) Bool -> . TRUE
    (47) Bool -> . FALSE
    (43) tupla -> . LPAREN valores RPAREN
    (35) lista -> . LBRACKET valores RBRACKET
    (79) cuerpo_conjunto -> . LBRACE valores RBRACE
    (80) cuerpo_conjunto -> . LBRACE RBRACE
    (93) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (94) cuerpo_Diccionario -> . LBRACE RBRACE

    RBRACE          shift and go to state 232
    RETURN          shift and go to state 8
    PRINT           shift and go to state 10
    VAR             shift and go to state 14
    COMMENTLINE     shift and go to state 15
    COMMENTBLOCK    shift and go to state 16
    MAP             shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    INT             shift and go to state 31
    SET             shift and go to state 32
    LIST            shift and go to state 33
    BOOLEAN         shift and go to state 34
    TUPLE           shift and go to state 35
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 36
    FLOAT           shift and go to state 37
    CHAINCHAR       shift and go to state 38
    IF              shift and go to state 44
    SWITCH          shift and go to state 46
    FOR             shift and go to state 47
    VOID            shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 11
    LBRACKET        shift and go to state 51
    LBRACE          shift and go to state 45

    cuerpo                         shift and go to state 52
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    valor                          shift and go to state 9
    tipo                           shift and go to state 12
    sentencia_If                   shift and go to state 17
    sentencia_Switch               shift and go to state 18
    ciclo_for                      shift and go to state 19
    funcion_Anonima                shift and go to state 20
    diccionario                    shift and go to state 21
    Conjunto                       shift and go to state 22
    funcion_flecha                 shift and go to state 23
    funcion_Void                   shift and go to state 24
    funcion                        shift and go to state 25
    funcion_Data                   shift and go to state 26
    estructura_List                shift and go to state 27
    Bool                           shift and go to state 39
    tupla                          shift and go to state 40
    lista                          shift and go to state 41
    cuerpo_conjunto                shift and go to state 42
    cuerpo_Diccionario             shift and go to state 43

state 230

    (74) caso -> CASE valor TWODOTS programa BREAK . DOTCOMMA caso
    (75) caso -> CASE valor TWODOTS programa BREAK . DOTCOMMA

    DOTCOMMA        shift and go to state 233


state 231

    (85) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .

    RETURN          reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    PRINT           reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    VAR             reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    MAP             reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    STRING          reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    INT             reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    SET             reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    LIST            reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    TUPLE           reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    NUMBER          reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    FLOAT           reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    IF              reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    SWITCH          reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    FOR             reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    VOID            reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    TRUE            reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    FALSE           reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    LPAREN          reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    LBRACKET        reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    LBRACE          reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    $end            reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    RBRACE          reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    BREAK           reduce using rule 85 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)


state 232

    (28) else -> ELSE LBRACE programa RBRACE .

    RETURN          reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    PRINT           reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    VAR             reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    MAP             reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    STRING          reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    INT             reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    SET             reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    LIST            reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    TUPLE           reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    NUMBER          reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    FLOAT           reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    IF              reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    SWITCH          reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    FOR             reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    VOID            reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    TRUE            reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    FALSE           reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    LPAREN          reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    LBRACKET        reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    LBRACE          reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    $end            reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    RBRACE          reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)
    BREAK           reduce using rule 28 (else -> ELSE LBRACE programa RBRACE .)


state 233

    (74) caso -> CASE valor TWODOTS programa BREAK DOTCOMMA . caso
    (75) caso -> CASE valor TWODOTS programa BREAK DOTCOMMA .
    (74) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA caso
    (75) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA

    RBRACE          reduce using rule 75 (caso -> CASE valor TWODOTS programa BREAK DOTCOMMA .)
    CASE            shift and go to state 188

    caso                           shift and go to state 234

state 234

    (74) caso -> CASE valor TWODOTS programa BREAK DOTCOMMA caso .

    RBRACE          reduce using rule 74 (caso -> CASE valor TWODOTS programa BREAK DOTCOMMA caso .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 32 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 85 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 85 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 90 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 120 resolved as shift
WARNING: reduce/reduce conflict in state 76 resolved using rule (cuerpo_conjunto -> LBRACE RBRACE)
WARNING: rejected rule (cuerpo_Diccionario -> LBRACE RBRACE) in state 76
