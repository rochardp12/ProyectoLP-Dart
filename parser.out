Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ADMIRATION
    AS
    CATCH
    CLASS
    DEF
    DEFAULT
    DOLLAR
    ELIF
    ENUM
    EXTENDS
    FINALLY
    IN
    INTEGERDIVISION
    INTERFACE
    IS
    METHOD
    MOD
    MODULE
    NEW
    NULL
    PRIVATE
    PROTECTED
    PUBLIC
    STATIC
    SUPER
    THIS
    TRY
    TYPEDEF
    WHILE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> cuerpo
Rule 2     programa -> programa cuerpo
Rule 3     cuerpo -> impresion
Rule 4     cuerpo -> declaracion
Rule 5     cuerpo -> operacion
Rule 6     cuerpo -> comentario
Rule 7     cuerpo -> estructuras_de_Control
Rule 8     cuerpo -> retorno
Rule 9     estructuras_de_Control -> sentencia_If
Rule 10    estructuras_de_Control -> sentencia_Switch
Rule 11    estructuras_de_Control -> ciclo_for
Rule 12    estructuras_de_Control -> funcion_Anonima
Rule 13    estructuras_de_Control -> diccionario
Rule 14    estructuras_de_Control -> Conjunto
Rule 15    estructuras_de_Control -> funcion_flecha
Rule 16    estructuras_de_Control -> funcion_Void
Rule 17    estructuras_de_Control -> funcion
Rule 18    estructuras_de_Control -> funcion_Data
Rule 19    estructuras_de_Control -> estructura_List
Rule 20    comentario -> COMMENTLINE
Rule 21    comentario -> COMMENTBLOCK
Rule 22    impresion -> PRINT LPAREN valores RPAREN DOTCOMMA
Rule 23    impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA
Rule 24    impresion -> PRINT LPAREN RPAREN DOTCOMMA
Rule 25    sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else
Rule 26    sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE
Rule 27    else -> ELSE LBRACE programa RBRACE
Rule 28    condicion -> valor Comparador valor
Rule 29    condicion -> condicion conector condicion
Rule 30    conector -> AND
Rule 31    conector -> OR
Rule 32    retorno -> RETURN
Rule 33    retorno -> RETURN valores
Rule 34    estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
Rule 35    funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
Rule 36    funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
Rule 37    funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
Rule 38    Comparador -> EQUALS EQUALS
Rule 39    Comparador -> LANGLE
Rule 40    Comparador -> RANGLE
Rule 41    Comparador -> LANGLE EQUALS
Rule 42    Comparador -> RANGLE EQUALS
Rule 43    Comparador -> NEQ
Rule 44    tupla -> LPAREN valores RPAREN
Rule 45    declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA
Rule 46    declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA
Rule 47    declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA
Rule 48    declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA
Rule 49    declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA
Rule 50    declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA
Rule 51    valores -> valor
Rule 52    valores -> valor COMMA valores
Rule 53    valores -> tipo VARIABLE
Rule 54    valores -> tipo VARIABLE COMMA valores
Rule 55    Bool -> TRUE
Rule 56    Bool -> FALSE
Rule 57    valor -> VARIABLE
Rule 58    valor -> NUMBER
Rule 59    valor -> FLOAT
Rule 60    valor -> CHAINCHAR
Rule 61    valor -> Bool
Rule 62    valor -> operacion
Rule 63    valor -> tupla
Rule 64    tipo -> MAP
Rule 65    tipo -> DOUBLE
Rule 66    tipo -> STRING
Rule 67    tipo -> INT
Rule 68    tipo -> SET
Rule 69    tipo -> LIST
Rule 70    tipo -> BOOLEAN
Rule 71    tipo -> FINAL
Rule 72    tipo -> CONST
Rule 73    tipo -> DYNAMIC
Rule 74    operacion -> valor operador expresion
Rule 75    expresion -> LPAREN valor operador expresion RPAREN
Rule 76    expresion -> valor
Rule 77    funcion -> VARIABLE LPAREN valores RPAREN
Rule 78    funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
Rule 79    sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
Rule 80    caso -> CASE valor TWODOTS programa BREAK DOTCOMMA caso
Rule 81    caso -> CASE valor TWODOTS programa BREAK DOTCOMMA
Rule 82    funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
Rule 83    Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
Rule 84    Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
Rule 85    cuerpo_conjunto -> LBRACE valores RBRACE
Rule 86    cuerpo_conjunto -> LBRACE RBRACE
Rule 87    operador -> PLUS
Rule 88    operador -> MINUS
Rule 89    operador -> TIMES
Rule 90    operador -> DIVIDE
Rule 91    ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
Rule 92    contador -> VARIABLE PLUS PLUS
Rule 93    contador -> VARIABLE PLUS EQUALS valor
Rule 94    contador -> VARIABLE MINUS MINUS
Rule 95    contador -> VARIABLE MINUS EQUALS valor
Rule 96    funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
Rule 97    funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA
Rule 98    diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
Rule 99    cuerpo_Diccionario -> LBRACE duplas RBRACE
Rule 100   cuerpo_Diccionario -> LBRACE RBRACE
Rule 101   duplas -> dupla
Rule 102   duplas -> dupla COMMA duplas
Rule 103   dupla -> valor TWODOTS valor

Terminals, with rules where they appear

ABSTRACT             : 
ADMIRATION           : 
AND                  : 30
ARROWFUNCTION        : 82
AS                   : 
BOOLEAN              : 70
BREAK                : 80 81
CASE                 : 80 81
CATCH                : 
CHAINCHAR            : 60
CLASS                : 
COMMA                : 52 54 98 102
COMMENTBLOCK         : 21
COMMENTLINE          : 20
CONST                : 47 48 72
DEF                  : 
DEFAULT              : 
DIVIDE               : 90
DOLLAR               : 
DOT                  : 78
DOTCOMMA             : 22 23 24 34 45 46 47 48 49 50 78 80 81 82 83 84 91 96 97 98
DOUBLE               : 65
DYNAMIC              : 73
ELIF                 : 
ELSE                 : 27
ENUM                 : 
EQUALS               : 34 38 38 41 42 45 46 47 48 49 50 83 84 93 95 96 98
EXTENDS              : 
FALSE                : 56
FINAL                : 45 46 71
FINALLY              : 
FLOAT                : 59
FOR                  : 91
IF                   : 25 26
IN                   : 
INT                  : 67
INTEGERDIVISION      : 
INTERFACE            : 
IS                   : 
LANGLE               : 34 39 41 84 98
LBRACE               : 25 26 27 35 36 37 79 85 86 91 96 97 99 100
LBRACKET             : 34
LIST                 : 34 69
LPAREN               : 22 23 24 25 26 35 36 37 44 75 77 78 79 82 91
MAIN                 : 37
MAP                  : 64 98
METHOD               : 
MINUS                : 88 94 94 95
MOD                  : 
MODULE               : 
NEQ                  : 43
NEW                  : 
NULL                 : 
NUMBER               : 58
OR                   : 31
PLUS                 : 87 92 92 93
PRINT                : 22 23 24
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
RANGLE               : 34 40 42 84 98
RBRACE               : 25 26 27 35 36 37 79 85 86 91 96 97 99 100
RBRACKET             : 34
RETURN               : 32 33
RPAREN               : 22 23 24 25 26 35 36 37 44 75 77 78 79 82 91
SET                  : 68 83 84
STATIC               : 
STRING               : 66
SUPER                : 
SWITCH               : 79
THIS                 : 
TIMES                : 89
TRUE                 : 55
TRY                  : 
TWODOTS              : 80 81 103
TYPEDEF              : 
VAR                  : 46 48 50 96
VARIABLE             : 34 35 36 45 46 47 48 49 50 53 54 57 77 78 78 82 83 84 92 93 94 95 96 98
VOID                 : 35 36 37
WHILE                : 
error                : 

Nonterminals, with rules where they appear

Bool                 : 61
Comparador           : 28
Conjunto             : 14
caso                 : 79 80
ciclo_for            : 11
comentario           : 6
condicion            : 25 26 29 29 91
conector             : 29
contador             : 91
cuerpo               : 1 2
cuerpo_Diccionario   : 98
cuerpo_conjunto      : 83 84
declaracion          : 4 91
diccionario          : 13
dupla                : 101 102
duplas               : 99 102
else                 : 25
estructura_List      : 19
estructuras_de_Control : 7
expresion            : 74 75
funcion              : 17
funcion_Anonima      : 12
funcion_Data         : 18
funcion_Void         : 16
funcion_flecha       : 15
impresion            : 3
operacion            : 5 23 62
operador             : 74 75
programa             : 2 25 26 27 35 36 37 80 81 82 91 96 97 0
retorno              : 8
sentencia_If         : 9
sentencia_Switch     : 10
tipo                 : 34 45 47 49 53 54 82 84 98 98
tupla                : 63 96 97
valor                : 28 28 45 46 47 48 49 50 51 52 74 75 76 79 80 81 93 95 103 103
valores              : 22 33 34 35 44 52 54 77 78 82 85

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    programa                       shift and go to state 1
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43

state 1

    (0) S' -> programa .
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    cuerpo                         shift and go to state 50
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43

state 2

    (1) programa -> cuerpo .

    PRINT           reduce using rule 1 (programa -> cuerpo .)
    FINAL           reduce using rule 1 (programa -> cuerpo .)
    CONST           reduce using rule 1 (programa -> cuerpo .)
    VAR             reduce using rule 1 (programa -> cuerpo .)
    COMMENTLINE     reduce using rule 1 (programa -> cuerpo .)
    COMMENTBLOCK    reduce using rule 1 (programa -> cuerpo .)
    RETURN          reduce using rule 1 (programa -> cuerpo .)
    MAP             reduce using rule 1 (programa -> cuerpo .)
    DOUBLE          reduce using rule 1 (programa -> cuerpo .)
    STRING          reduce using rule 1 (programa -> cuerpo .)
    INT             reduce using rule 1 (programa -> cuerpo .)
    SET             reduce using rule 1 (programa -> cuerpo .)
    LIST            reduce using rule 1 (programa -> cuerpo .)
    BOOLEAN         reduce using rule 1 (programa -> cuerpo .)
    DYNAMIC         reduce using rule 1 (programa -> cuerpo .)
    VARIABLE        reduce using rule 1 (programa -> cuerpo .)
    NUMBER          reduce using rule 1 (programa -> cuerpo .)
    FLOAT           reduce using rule 1 (programa -> cuerpo .)
    CHAINCHAR       reduce using rule 1 (programa -> cuerpo .)
    IF              reduce using rule 1 (programa -> cuerpo .)
    SWITCH          reduce using rule 1 (programa -> cuerpo .)
    FOR             reduce using rule 1 (programa -> cuerpo .)
    VOID            reduce using rule 1 (programa -> cuerpo .)
    TRUE            reduce using rule 1 (programa -> cuerpo .)
    FALSE           reduce using rule 1 (programa -> cuerpo .)
    LPAREN          reduce using rule 1 (programa -> cuerpo .)
    $end            reduce using rule 1 (programa -> cuerpo .)
    RBRACE          reduce using rule 1 (programa -> cuerpo .)
    DOTCOMMA        reduce using rule 1 (programa -> cuerpo .)
    BREAK           reduce using rule 1 (programa -> cuerpo .)


state 3

    (3) cuerpo -> impresion .

    PRINT           reduce using rule 3 (cuerpo -> impresion .)
    FINAL           reduce using rule 3 (cuerpo -> impresion .)
    CONST           reduce using rule 3 (cuerpo -> impresion .)
    VAR             reduce using rule 3 (cuerpo -> impresion .)
    COMMENTLINE     reduce using rule 3 (cuerpo -> impresion .)
    COMMENTBLOCK    reduce using rule 3 (cuerpo -> impresion .)
    RETURN          reduce using rule 3 (cuerpo -> impresion .)
    MAP             reduce using rule 3 (cuerpo -> impresion .)
    DOUBLE          reduce using rule 3 (cuerpo -> impresion .)
    STRING          reduce using rule 3 (cuerpo -> impresion .)
    INT             reduce using rule 3 (cuerpo -> impresion .)
    SET             reduce using rule 3 (cuerpo -> impresion .)
    LIST            reduce using rule 3 (cuerpo -> impresion .)
    BOOLEAN         reduce using rule 3 (cuerpo -> impresion .)
    DYNAMIC         reduce using rule 3 (cuerpo -> impresion .)
    VARIABLE        reduce using rule 3 (cuerpo -> impresion .)
    NUMBER          reduce using rule 3 (cuerpo -> impresion .)
    FLOAT           reduce using rule 3 (cuerpo -> impresion .)
    CHAINCHAR       reduce using rule 3 (cuerpo -> impresion .)
    IF              reduce using rule 3 (cuerpo -> impresion .)
    SWITCH          reduce using rule 3 (cuerpo -> impresion .)
    FOR             reduce using rule 3 (cuerpo -> impresion .)
    VOID            reduce using rule 3 (cuerpo -> impresion .)
    TRUE            reduce using rule 3 (cuerpo -> impresion .)
    FALSE           reduce using rule 3 (cuerpo -> impresion .)
    LPAREN          reduce using rule 3 (cuerpo -> impresion .)
    $end            reduce using rule 3 (cuerpo -> impresion .)
    RBRACE          reduce using rule 3 (cuerpo -> impresion .)
    DOTCOMMA        reduce using rule 3 (cuerpo -> impresion .)
    BREAK           reduce using rule 3 (cuerpo -> impresion .)


state 4

    (4) cuerpo -> declaracion .

    PRINT           reduce using rule 4 (cuerpo -> declaracion .)
    FINAL           reduce using rule 4 (cuerpo -> declaracion .)
    CONST           reduce using rule 4 (cuerpo -> declaracion .)
    VAR             reduce using rule 4 (cuerpo -> declaracion .)
    COMMENTLINE     reduce using rule 4 (cuerpo -> declaracion .)
    COMMENTBLOCK    reduce using rule 4 (cuerpo -> declaracion .)
    RETURN          reduce using rule 4 (cuerpo -> declaracion .)
    MAP             reduce using rule 4 (cuerpo -> declaracion .)
    DOUBLE          reduce using rule 4 (cuerpo -> declaracion .)
    STRING          reduce using rule 4 (cuerpo -> declaracion .)
    INT             reduce using rule 4 (cuerpo -> declaracion .)
    SET             reduce using rule 4 (cuerpo -> declaracion .)
    LIST            reduce using rule 4 (cuerpo -> declaracion .)
    BOOLEAN         reduce using rule 4 (cuerpo -> declaracion .)
    DYNAMIC         reduce using rule 4 (cuerpo -> declaracion .)
    VARIABLE        reduce using rule 4 (cuerpo -> declaracion .)
    NUMBER          reduce using rule 4 (cuerpo -> declaracion .)
    FLOAT           reduce using rule 4 (cuerpo -> declaracion .)
    CHAINCHAR       reduce using rule 4 (cuerpo -> declaracion .)
    IF              reduce using rule 4 (cuerpo -> declaracion .)
    SWITCH          reduce using rule 4 (cuerpo -> declaracion .)
    FOR             reduce using rule 4 (cuerpo -> declaracion .)
    VOID            reduce using rule 4 (cuerpo -> declaracion .)
    TRUE            reduce using rule 4 (cuerpo -> declaracion .)
    FALSE           reduce using rule 4 (cuerpo -> declaracion .)
    LPAREN          reduce using rule 4 (cuerpo -> declaracion .)
    $end            reduce using rule 4 (cuerpo -> declaracion .)
    RBRACE          reduce using rule 4 (cuerpo -> declaracion .)
    DOTCOMMA        reduce using rule 4 (cuerpo -> declaracion .)
    BREAK           reduce using rule 4 (cuerpo -> declaracion .)


state 5

    (5) cuerpo -> operacion .
    (62) valor -> operacion .

    PRINT           reduce using rule 5 (cuerpo -> operacion .)
    FINAL           reduce using rule 5 (cuerpo -> operacion .)
    CONST           reduce using rule 5 (cuerpo -> operacion .)
    VAR             reduce using rule 5 (cuerpo -> operacion .)
    COMMENTLINE     reduce using rule 5 (cuerpo -> operacion .)
    COMMENTBLOCK    reduce using rule 5 (cuerpo -> operacion .)
    RETURN          reduce using rule 5 (cuerpo -> operacion .)
    MAP             reduce using rule 5 (cuerpo -> operacion .)
    DOUBLE          reduce using rule 5 (cuerpo -> operacion .)
    STRING          reduce using rule 5 (cuerpo -> operacion .)
    INT             reduce using rule 5 (cuerpo -> operacion .)
    SET             reduce using rule 5 (cuerpo -> operacion .)
    LIST            reduce using rule 5 (cuerpo -> operacion .)
    BOOLEAN         reduce using rule 5 (cuerpo -> operacion .)
    DYNAMIC         reduce using rule 5 (cuerpo -> operacion .)
    VARIABLE        reduce using rule 5 (cuerpo -> operacion .)
    NUMBER          reduce using rule 5 (cuerpo -> operacion .)
    FLOAT           reduce using rule 5 (cuerpo -> operacion .)
    CHAINCHAR       reduce using rule 5 (cuerpo -> operacion .)
    IF              reduce using rule 5 (cuerpo -> operacion .)
    SWITCH          reduce using rule 5 (cuerpo -> operacion .)
    FOR             reduce using rule 5 (cuerpo -> operacion .)
    VOID            reduce using rule 5 (cuerpo -> operacion .)
    TRUE            reduce using rule 5 (cuerpo -> operacion .)
    FALSE           reduce using rule 5 (cuerpo -> operacion .)
    LPAREN          reduce using rule 5 (cuerpo -> operacion .)
    $end            reduce using rule 5 (cuerpo -> operacion .)
    RBRACE          reduce using rule 5 (cuerpo -> operacion .)
    DOTCOMMA        reduce using rule 5 (cuerpo -> operacion .)
    BREAK           reduce using rule 5 (cuerpo -> operacion .)
    PLUS            reduce using rule 62 (valor -> operacion .)
    MINUS           reduce using rule 62 (valor -> operacion .)
    TIMES           reduce using rule 62 (valor -> operacion .)
    DIVIDE          reduce using rule 62 (valor -> operacion .)


state 6

    (6) cuerpo -> comentario .

    PRINT           reduce using rule 6 (cuerpo -> comentario .)
    FINAL           reduce using rule 6 (cuerpo -> comentario .)
    CONST           reduce using rule 6 (cuerpo -> comentario .)
    VAR             reduce using rule 6 (cuerpo -> comentario .)
    COMMENTLINE     reduce using rule 6 (cuerpo -> comentario .)
    COMMENTBLOCK    reduce using rule 6 (cuerpo -> comentario .)
    RETURN          reduce using rule 6 (cuerpo -> comentario .)
    MAP             reduce using rule 6 (cuerpo -> comentario .)
    DOUBLE          reduce using rule 6 (cuerpo -> comentario .)
    STRING          reduce using rule 6 (cuerpo -> comentario .)
    INT             reduce using rule 6 (cuerpo -> comentario .)
    SET             reduce using rule 6 (cuerpo -> comentario .)
    LIST            reduce using rule 6 (cuerpo -> comentario .)
    BOOLEAN         reduce using rule 6 (cuerpo -> comentario .)
    DYNAMIC         reduce using rule 6 (cuerpo -> comentario .)
    VARIABLE        reduce using rule 6 (cuerpo -> comentario .)
    NUMBER          reduce using rule 6 (cuerpo -> comentario .)
    FLOAT           reduce using rule 6 (cuerpo -> comentario .)
    CHAINCHAR       reduce using rule 6 (cuerpo -> comentario .)
    IF              reduce using rule 6 (cuerpo -> comentario .)
    SWITCH          reduce using rule 6 (cuerpo -> comentario .)
    FOR             reduce using rule 6 (cuerpo -> comentario .)
    VOID            reduce using rule 6 (cuerpo -> comentario .)
    TRUE            reduce using rule 6 (cuerpo -> comentario .)
    FALSE           reduce using rule 6 (cuerpo -> comentario .)
    LPAREN          reduce using rule 6 (cuerpo -> comentario .)
    $end            reduce using rule 6 (cuerpo -> comentario .)
    RBRACE          reduce using rule 6 (cuerpo -> comentario .)
    DOTCOMMA        reduce using rule 6 (cuerpo -> comentario .)
    BREAK           reduce using rule 6 (cuerpo -> comentario .)


state 7

    (7) cuerpo -> estructuras_de_Control .

    PRINT           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    FINAL           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    CONST           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    VAR             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    COMMENTLINE     reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    COMMENTBLOCK    reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    RETURN          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    MAP             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    DOUBLE          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    STRING          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    INT             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    SET             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    LIST            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    BOOLEAN         reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    DYNAMIC         reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    VARIABLE        reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    NUMBER          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    FLOAT           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    CHAINCHAR       reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    IF              reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    SWITCH          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    FOR             reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    VOID            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    TRUE            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    FALSE           reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    LPAREN          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    $end            reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    RBRACE          reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    DOTCOMMA        reduce using rule 7 (cuerpo -> estructuras_de_Control .)
    BREAK           reduce using rule 7 (cuerpo -> estructuras_de_Control .)


state 8

    (8) cuerpo -> retorno .

    PRINT           reduce using rule 8 (cuerpo -> retorno .)
    FINAL           reduce using rule 8 (cuerpo -> retorno .)
    CONST           reduce using rule 8 (cuerpo -> retorno .)
    VAR             reduce using rule 8 (cuerpo -> retorno .)
    COMMENTLINE     reduce using rule 8 (cuerpo -> retorno .)
    COMMENTBLOCK    reduce using rule 8 (cuerpo -> retorno .)
    RETURN          reduce using rule 8 (cuerpo -> retorno .)
    MAP             reduce using rule 8 (cuerpo -> retorno .)
    DOUBLE          reduce using rule 8 (cuerpo -> retorno .)
    STRING          reduce using rule 8 (cuerpo -> retorno .)
    INT             reduce using rule 8 (cuerpo -> retorno .)
    SET             reduce using rule 8 (cuerpo -> retorno .)
    LIST            reduce using rule 8 (cuerpo -> retorno .)
    BOOLEAN         reduce using rule 8 (cuerpo -> retorno .)
    DYNAMIC         reduce using rule 8 (cuerpo -> retorno .)
    VARIABLE        reduce using rule 8 (cuerpo -> retorno .)
    NUMBER          reduce using rule 8 (cuerpo -> retorno .)
    FLOAT           reduce using rule 8 (cuerpo -> retorno .)
    CHAINCHAR       reduce using rule 8 (cuerpo -> retorno .)
    IF              reduce using rule 8 (cuerpo -> retorno .)
    SWITCH          reduce using rule 8 (cuerpo -> retorno .)
    FOR             reduce using rule 8 (cuerpo -> retorno .)
    VOID            reduce using rule 8 (cuerpo -> retorno .)
    TRUE            reduce using rule 8 (cuerpo -> retorno .)
    FALSE           reduce using rule 8 (cuerpo -> retorno .)
    LPAREN          reduce using rule 8 (cuerpo -> retorno .)
    $end            reduce using rule 8 (cuerpo -> retorno .)
    RBRACE          reduce using rule 8 (cuerpo -> retorno .)
    DOTCOMMA        reduce using rule 8 (cuerpo -> retorno .)
    BREAK           reduce using rule 8 (cuerpo -> retorno .)


state 9

    (22) impresion -> PRINT . LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> PRINT . LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> PRINT . LPAREN RPAREN DOTCOMMA

    LPAREN          shift and go to state 51


state 10

    (44) tupla -> LPAREN . valores RPAREN
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (53) valores -> . tipo VARIABLE
    (54) valores -> . tipo VARIABLE COMMA valores
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    FINAL           shift and go to state 61
    CONST           shift and go to state 62
    DYNAMIC         shift and go to state 38
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valores                        shift and go to state 52
    valor                          shift and go to state 53
    tipo                           shift and go to state 54
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 11

    (45) declaracion -> FINAL . tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> FINAL . VAR VARIABLE EQUALS valor DOTCOMMA
    (71) tipo -> FINAL .
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC

    VAR             shift and go to state 64
    VARIABLE        reduce using rule 71 (tipo -> FINAL .)
    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    FINAL           shift and go to state 61
    CONST           shift and go to state 62
    DYNAMIC         shift and go to state 38

    tipo                           shift and go to state 63

state 12

    (49) declaracion -> tipo . VARIABLE EQUALS valor DOTCOMMA
    (82) funcion_flecha -> tipo . VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA

    VARIABLE        shift and go to state 65


state 13

    (57) valor -> VARIABLE .
    (77) funcion -> VARIABLE . LPAREN valores RPAREN
    (78) funcion_Data -> VARIABLE . DOT VARIABLE LPAREN valores RPAREN DOTCOMMA

    PLUS            reduce using rule 57 (valor -> VARIABLE .)
    MINUS           reduce using rule 57 (valor -> VARIABLE .)
    TIMES           reduce using rule 57 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 57 (valor -> VARIABLE .)
    LPAREN          shift and go to state 66
    DOT             shift and go to state 67


state 14

    (74) operacion -> valor . operador expresion
    (87) operador -> . PLUS
    (88) operador -> . MINUS
    (89) operador -> . TIMES
    (90) operador -> . DIVIDE

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

    operador                       shift and go to state 68

state 15

    (50) declaracion -> VAR . VARIABLE EQUALS valor DOTCOMMA
    (96) funcion_Anonima -> VAR . VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA

    VARIABLE        shift and go to state 73


state 16

    (47) declaracion -> CONST . tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> CONST . VAR VARIABLE EQUALS valor DOTCOMMA
    (72) tipo -> CONST .
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC

    VAR             shift and go to state 75
    VARIABLE        reduce using rule 72 (tipo -> CONST .)
    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    FINAL           shift and go to state 61
    CONST           shift and go to state 62
    DYNAMIC         shift and go to state 38

    tipo                           shift and go to state 74

state 17

    (20) comentario -> COMMENTLINE .

    PRINT           reduce using rule 20 (comentario -> COMMENTLINE .)
    FINAL           reduce using rule 20 (comentario -> COMMENTLINE .)
    CONST           reduce using rule 20 (comentario -> COMMENTLINE .)
    VAR             reduce using rule 20 (comentario -> COMMENTLINE .)
    COMMENTLINE     reduce using rule 20 (comentario -> COMMENTLINE .)
    COMMENTBLOCK    reduce using rule 20 (comentario -> COMMENTLINE .)
    RETURN          reduce using rule 20 (comentario -> COMMENTLINE .)
    MAP             reduce using rule 20 (comentario -> COMMENTLINE .)
    DOUBLE          reduce using rule 20 (comentario -> COMMENTLINE .)
    STRING          reduce using rule 20 (comentario -> COMMENTLINE .)
    INT             reduce using rule 20 (comentario -> COMMENTLINE .)
    SET             reduce using rule 20 (comentario -> COMMENTLINE .)
    LIST            reduce using rule 20 (comentario -> COMMENTLINE .)
    BOOLEAN         reduce using rule 20 (comentario -> COMMENTLINE .)
    DYNAMIC         reduce using rule 20 (comentario -> COMMENTLINE .)
    VARIABLE        reduce using rule 20 (comentario -> COMMENTLINE .)
    NUMBER          reduce using rule 20 (comentario -> COMMENTLINE .)
    FLOAT           reduce using rule 20 (comentario -> COMMENTLINE .)
    CHAINCHAR       reduce using rule 20 (comentario -> COMMENTLINE .)
    IF              reduce using rule 20 (comentario -> COMMENTLINE .)
    SWITCH          reduce using rule 20 (comentario -> COMMENTLINE .)
    FOR             reduce using rule 20 (comentario -> COMMENTLINE .)
    VOID            reduce using rule 20 (comentario -> COMMENTLINE .)
    TRUE            reduce using rule 20 (comentario -> COMMENTLINE .)
    FALSE           reduce using rule 20 (comentario -> COMMENTLINE .)
    LPAREN          reduce using rule 20 (comentario -> COMMENTLINE .)
    $end            reduce using rule 20 (comentario -> COMMENTLINE .)
    RBRACE          reduce using rule 20 (comentario -> COMMENTLINE .)
    DOTCOMMA        reduce using rule 20 (comentario -> COMMENTLINE .)
    BREAK           reduce using rule 20 (comentario -> COMMENTLINE .)


state 18

    (21) comentario -> COMMENTBLOCK .

    PRINT           reduce using rule 21 (comentario -> COMMENTBLOCK .)
    FINAL           reduce using rule 21 (comentario -> COMMENTBLOCK .)
    CONST           reduce using rule 21 (comentario -> COMMENTBLOCK .)
    VAR             reduce using rule 21 (comentario -> COMMENTBLOCK .)
    COMMENTLINE     reduce using rule 21 (comentario -> COMMENTBLOCK .)
    COMMENTBLOCK    reduce using rule 21 (comentario -> COMMENTBLOCK .)
    RETURN          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    MAP             reduce using rule 21 (comentario -> COMMENTBLOCK .)
    DOUBLE          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    STRING          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    INT             reduce using rule 21 (comentario -> COMMENTBLOCK .)
    SET             reduce using rule 21 (comentario -> COMMENTBLOCK .)
    LIST            reduce using rule 21 (comentario -> COMMENTBLOCK .)
    BOOLEAN         reduce using rule 21 (comentario -> COMMENTBLOCK .)
    DYNAMIC         reduce using rule 21 (comentario -> COMMENTBLOCK .)
    VARIABLE        reduce using rule 21 (comentario -> COMMENTBLOCK .)
    NUMBER          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    FLOAT           reduce using rule 21 (comentario -> COMMENTBLOCK .)
    CHAINCHAR       reduce using rule 21 (comentario -> COMMENTBLOCK .)
    IF              reduce using rule 21 (comentario -> COMMENTBLOCK .)
    SWITCH          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    FOR             reduce using rule 21 (comentario -> COMMENTBLOCK .)
    VOID            reduce using rule 21 (comentario -> COMMENTBLOCK .)
    TRUE            reduce using rule 21 (comentario -> COMMENTBLOCK .)
    FALSE           reduce using rule 21 (comentario -> COMMENTBLOCK .)
    LPAREN          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    $end            reduce using rule 21 (comentario -> COMMENTBLOCK .)
    RBRACE          reduce using rule 21 (comentario -> COMMENTBLOCK .)
    DOTCOMMA        reduce using rule 21 (comentario -> COMMENTBLOCK .)
    BREAK           reduce using rule 21 (comentario -> COMMENTBLOCK .)


state 19

    (9) estructuras_de_Control -> sentencia_If .

    PRINT           reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    FINAL           reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    CONST           reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    VAR             reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    COMMENTLINE     reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    COMMENTBLOCK    reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    RETURN          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    MAP             reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    DOUBLE          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    STRING          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    INT             reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    SET             reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    LIST            reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    BOOLEAN         reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    DYNAMIC         reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    VARIABLE        reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    NUMBER          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    FLOAT           reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    CHAINCHAR       reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    IF              reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    SWITCH          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    FOR             reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    VOID            reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    TRUE            reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    FALSE           reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    LPAREN          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    $end            reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    RBRACE          reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    DOTCOMMA        reduce using rule 9 (estructuras_de_Control -> sentencia_If .)
    BREAK           reduce using rule 9 (estructuras_de_Control -> sentencia_If .)


state 20

    (10) estructuras_de_Control -> sentencia_Switch .

    PRINT           reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    FINAL           reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    CONST           reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    VAR             reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    COMMENTLINE     reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    COMMENTBLOCK    reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    RETURN          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    MAP             reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    DOUBLE          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    STRING          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    INT             reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    SET             reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    LIST            reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    BOOLEAN         reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    DYNAMIC         reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    VARIABLE        reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    NUMBER          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    FLOAT           reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    CHAINCHAR       reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    IF              reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    SWITCH          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    FOR             reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    VOID            reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    TRUE            reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    FALSE           reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    LPAREN          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    $end            reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    RBRACE          reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    DOTCOMMA        reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)
    BREAK           reduce using rule 10 (estructuras_de_Control -> sentencia_Switch .)


state 21

    (11) estructuras_de_Control -> ciclo_for .

    PRINT           reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    FINAL           reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    CONST           reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    VAR             reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    COMMENTLINE     reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    COMMENTBLOCK    reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    RETURN          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    MAP             reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    DOUBLE          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    STRING          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    INT             reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    SET             reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    LIST            reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    BOOLEAN         reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    DYNAMIC         reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    VARIABLE        reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    NUMBER          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    FLOAT           reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    CHAINCHAR       reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    IF              reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    SWITCH          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    FOR             reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    VOID            reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    TRUE            reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    FALSE           reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    LPAREN          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    $end            reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    RBRACE          reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    DOTCOMMA        reduce using rule 11 (estructuras_de_Control -> ciclo_for .)
    BREAK           reduce using rule 11 (estructuras_de_Control -> ciclo_for .)


state 22

    (12) estructuras_de_Control -> funcion_Anonima .

    PRINT           reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    FINAL           reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    CONST           reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    VAR             reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    COMMENTLINE     reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    COMMENTBLOCK    reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    RETURN          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    MAP             reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    DOUBLE          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    STRING          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    INT             reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    SET             reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    LIST            reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    BOOLEAN         reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    DYNAMIC         reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    VARIABLE        reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    NUMBER          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    FLOAT           reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    CHAINCHAR       reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    IF              reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    SWITCH          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    FOR             reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    VOID            reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    TRUE            reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    FALSE           reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    LPAREN          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    $end            reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    RBRACE          reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    DOTCOMMA        reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)
    BREAK           reduce using rule 12 (estructuras_de_Control -> funcion_Anonima .)


state 23

    (13) estructuras_de_Control -> diccionario .

    PRINT           reduce using rule 13 (estructuras_de_Control -> diccionario .)
    FINAL           reduce using rule 13 (estructuras_de_Control -> diccionario .)
    CONST           reduce using rule 13 (estructuras_de_Control -> diccionario .)
    VAR             reduce using rule 13 (estructuras_de_Control -> diccionario .)
    COMMENTLINE     reduce using rule 13 (estructuras_de_Control -> diccionario .)
    COMMENTBLOCK    reduce using rule 13 (estructuras_de_Control -> diccionario .)
    RETURN          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    MAP             reduce using rule 13 (estructuras_de_Control -> diccionario .)
    DOUBLE          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    STRING          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    INT             reduce using rule 13 (estructuras_de_Control -> diccionario .)
    SET             reduce using rule 13 (estructuras_de_Control -> diccionario .)
    LIST            reduce using rule 13 (estructuras_de_Control -> diccionario .)
    BOOLEAN         reduce using rule 13 (estructuras_de_Control -> diccionario .)
    DYNAMIC         reduce using rule 13 (estructuras_de_Control -> diccionario .)
    VARIABLE        reduce using rule 13 (estructuras_de_Control -> diccionario .)
    NUMBER          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    FLOAT           reduce using rule 13 (estructuras_de_Control -> diccionario .)
    CHAINCHAR       reduce using rule 13 (estructuras_de_Control -> diccionario .)
    IF              reduce using rule 13 (estructuras_de_Control -> diccionario .)
    SWITCH          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    FOR             reduce using rule 13 (estructuras_de_Control -> diccionario .)
    VOID            reduce using rule 13 (estructuras_de_Control -> diccionario .)
    TRUE            reduce using rule 13 (estructuras_de_Control -> diccionario .)
    FALSE           reduce using rule 13 (estructuras_de_Control -> diccionario .)
    LPAREN          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    $end            reduce using rule 13 (estructuras_de_Control -> diccionario .)
    RBRACE          reduce using rule 13 (estructuras_de_Control -> diccionario .)
    DOTCOMMA        reduce using rule 13 (estructuras_de_Control -> diccionario .)
    BREAK           reduce using rule 13 (estructuras_de_Control -> diccionario .)


state 24

    (14) estructuras_de_Control -> Conjunto .

    PRINT           reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    FINAL           reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    CONST           reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    VAR             reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    COMMENTLINE     reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    COMMENTBLOCK    reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    RETURN          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    MAP             reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    DOUBLE          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    STRING          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    INT             reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    SET             reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    LIST            reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    BOOLEAN         reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    DYNAMIC         reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    VARIABLE        reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    NUMBER          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    FLOAT           reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    CHAINCHAR       reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    IF              reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    SWITCH          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    FOR             reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    VOID            reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    TRUE            reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    FALSE           reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    LPAREN          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    $end            reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    RBRACE          reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    DOTCOMMA        reduce using rule 14 (estructuras_de_Control -> Conjunto .)
    BREAK           reduce using rule 14 (estructuras_de_Control -> Conjunto .)


state 25

    (15) estructuras_de_Control -> funcion_flecha .

    PRINT           reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    FINAL           reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    CONST           reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    VAR             reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    COMMENTLINE     reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    COMMENTBLOCK    reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    RETURN          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    MAP             reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    DOUBLE          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    STRING          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    INT             reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    SET             reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    LIST            reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    BOOLEAN         reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    DYNAMIC         reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    VARIABLE        reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    NUMBER          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    FLOAT           reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    CHAINCHAR       reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    IF              reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    SWITCH          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    FOR             reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    VOID            reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    TRUE            reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    FALSE           reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    LPAREN          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    $end            reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    RBRACE          reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    DOTCOMMA        reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)
    BREAK           reduce using rule 15 (estructuras_de_Control -> funcion_flecha .)


state 26

    (16) estructuras_de_Control -> funcion_Void .

    PRINT           reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    FINAL           reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    CONST           reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    VAR             reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    COMMENTLINE     reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    COMMENTBLOCK    reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    RETURN          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    MAP             reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    DOUBLE          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    STRING          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    INT             reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    SET             reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    LIST            reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    BOOLEAN         reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    DYNAMIC         reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    VARIABLE        reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    NUMBER          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    FLOAT           reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    CHAINCHAR       reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    IF              reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    SWITCH          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    FOR             reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    VOID            reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    TRUE            reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    FALSE           reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    LPAREN          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    $end            reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    RBRACE          reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    DOTCOMMA        reduce using rule 16 (estructuras_de_Control -> funcion_Void .)
    BREAK           reduce using rule 16 (estructuras_de_Control -> funcion_Void .)


state 27

    (17) estructuras_de_Control -> funcion .

    PRINT           reduce using rule 17 (estructuras_de_Control -> funcion .)
    FINAL           reduce using rule 17 (estructuras_de_Control -> funcion .)
    CONST           reduce using rule 17 (estructuras_de_Control -> funcion .)
    VAR             reduce using rule 17 (estructuras_de_Control -> funcion .)
    COMMENTLINE     reduce using rule 17 (estructuras_de_Control -> funcion .)
    COMMENTBLOCK    reduce using rule 17 (estructuras_de_Control -> funcion .)
    RETURN          reduce using rule 17 (estructuras_de_Control -> funcion .)
    MAP             reduce using rule 17 (estructuras_de_Control -> funcion .)
    DOUBLE          reduce using rule 17 (estructuras_de_Control -> funcion .)
    STRING          reduce using rule 17 (estructuras_de_Control -> funcion .)
    INT             reduce using rule 17 (estructuras_de_Control -> funcion .)
    SET             reduce using rule 17 (estructuras_de_Control -> funcion .)
    LIST            reduce using rule 17 (estructuras_de_Control -> funcion .)
    BOOLEAN         reduce using rule 17 (estructuras_de_Control -> funcion .)
    DYNAMIC         reduce using rule 17 (estructuras_de_Control -> funcion .)
    VARIABLE        reduce using rule 17 (estructuras_de_Control -> funcion .)
    NUMBER          reduce using rule 17 (estructuras_de_Control -> funcion .)
    FLOAT           reduce using rule 17 (estructuras_de_Control -> funcion .)
    CHAINCHAR       reduce using rule 17 (estructuras_de_Control -> funcion .)
    IF              reduce using rule 17 (estructuras_de_Control -> funcion .)
    SWITCH          reduce using rule 17 (estructuras_de_Control -> funcion .)
    FOR             reduce using rule 17 (estructuras_de_Control -> funcion .)
    VOID            reduce using rule 17 (estructuras_de_Control -> funcion .)
    TRUE            reduce using rule 17 (estructuras_de_Control -> funcion .)
    FALSE           reduce using rule 17 (estructuras_de_Control -> funcion .)
    LPAREN          reduce using rule 17 (estructuras_de_Control -> funcion .)
    $end            reduce using rule 17 (estructuras_de_Control -> funcion .)
    RBRACE          reduce using rule 17 (estructuras_de_Control -> funcion .)
    DOTCOMMA        reduce using rule 17 (estructuras_de_Control -> funcion .)
    BREAK           reduce using rule 17 (estructuras_de_Control -> funcion .)


state 28

    (18) estructuras_de_Control -> funcion_Data .

    PRINT           reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    FINAL           reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    CONST           reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    VAR             reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    COMMENTLINE     reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    COMMENTBLOCK    reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    RETURN          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    MAP             reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    DOUBLE          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    STRING          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    INT             reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    SET             reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    LIST            reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    BOOLEAN         reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    DYNAMIC         reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    VARIABLE        reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    NUMBER          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    FLOAT           reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    CHAINCHAR       reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    IF              reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    SWITCH          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    FOR             reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    VOID            reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    TRUE            reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    FALSE           reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    LPAREN          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    $end            reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    RBRACE          reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    DOTCOMMA        reduce using rule 18 (estructuras_de_Control -> funcion_Data .)
    BREAK           reduce using rule 18 (estructuras_de_Control -> funcion_Data .)


state 29

    (19) estructuras_de_Control -> estructura_List .

    PRINT           reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    FINAL           reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    CONST           reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    VAR             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    COMMENTLINE     reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    COMMENTBLOCK    reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    RETURN          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    MAP             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    DOUBLE          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    STRING          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    INT             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    SET             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    LIST            reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    BOOLEAN         reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    DYNAMIC         reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    VARIABLE        reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    NUMBER          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    FLOAT           reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    CHAINCHAR       reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    IF              reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    SWITCH          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    FOR             reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    VOID            reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    TRUE            reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    FALSE           reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    LPAREN          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    $end            reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    RBRACE          reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    DOTCOMMA        reduce using rule 19 (estructuras_de_Control -> estructura_List .)
    BREAK           reduce using rule 19 (estructuras_de_Control -> estructura_List .)


state 30

    (32) retorno -> RETURN .
    (33) retorno -> RETURN . valores
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (53) valores -> . tipo VARIABLE
    (54) valores -> . tipo VARIABLE COMMA valores
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAINCHAR resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for DYNAMIC resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    PRINT           reduce using rule 32 (retorno -> RETURN .)
    VAR             reduce using rule 32 (retorno -> RETURN .)
    COMMENTLINE     reduce using rule 32 (retorno -> RETURN .)
    COMMENTBLOCK    reduce using rule 32 (retorno -> RETURN .)
    RETURN          reduce using rule 32 (retorno -> RETURN .)
    IF              reduce using rule 32 (retorno -> RETURN .)
    SWITCH          reduce using rule 32 (retorno -> RETURN .)
    FOR             reduce using rule 32 (retorno -> RETURN .)
    VOID            reduce using rule 32 (retorno -> RETURN .)
    $end            reduce using rule 32 (retorno -> RETURN .)
    RBRACE          reduce using rule 32 (retorno -> RETURN .)
    DOTCOMMA        reduce using rule 32 (retorno -> RETURN .)
    BREAK           reduce using rule 32 (retorno -> RETURN .)
    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    FINAL           shift and go to state 61
    CONST           shift and go to state 62
    DYNAMIC         shift and go to state 38
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

  ! FINAL           [ reduce using rule 32 (retorno -> RETURN .) ]
  ! CONST           [ reduce using rule 32 (retorno -> RETURN .) ]
  ! MAP             [ reduce using rule 32 (retorno -> RETURN .) ]
  ! DOUBLE          [ reduce using rule 32 (retorno -> RETURN .) ]
  ! STRING          [ reduce using rule 32 (retorno -> RETURN .) ]
  ! INT             [ reduce using rule 32 (retorno -> RETURN .) ]
  ! SET             [ reduce using rule 32 (retorno -> RETURN .) ]
  ! LIST            [ reduce using rule 32 (retorno -> RETURN .) ]
  ! BOOLEAN         [ reduce using rule 32 (retorno -> RETURN .) ]
  ! DYNAMIC         [ reduce using rule 32 (retorno -> RETURN .) ]
  ! VARIABLE        [ reduce using rule 32 (retorno -> RETURN .) ]
  ! NUMBER          [ reduce using rule 32 (retorno -> RETURN .) ]
  ! FLOAT           [ reduce using rule 32 (retorno -> RETURN .) ]
  ! CHAINCHAR       [ reduce using rule 32 (retorno -> RETURN .) ]
  ! TRUE            [ reduce using rule 32 (retorno -> RETURN .) ]
  ! FALSE           [ reduce using rule 32 (retorno -> RETURN .) ]
  ! LPAREN          [ reduce using rule 32 (retorno -> RETURN .) ]

    valores                        shift and go to state 76
    valor                          shift and go to state 53
    tipo                           shift and go to state 54
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 31

    (64) tipo -> MAP .
    (98) diccionario -> MAP . LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    VARIABLE        reduce using rule 64 (tipo -> MAP .)
    LANGLE          shift and go to state 77


state 32

    (65) tipo -> DOUBLE .

    VARIABLE        reduce using rule 65 (tipo -> DOUBLE .)
    COMMA           reduce using rule 65 (tipo -> DOUBLE .)
    RANGLE          reduce using rule 65 (tipo -> DOUBLE .)


state 33

    (66) tipo -> STRING .

    VARIABLE        reduce using rule 66 (tipo -> STRING .)
    COMMA           reduce using rule 66 (tipo -> STRING .)
    RANGLE          reduce using rule 66 (tipo -> STRING .)


state 34

    (67) tipo -> INT .

    VARIABLE        reduce using rule 67 (tipo -> INT .)
    COMMA           reduce using rule 67 (tipo -> INT .)
    RANGLE          reduce using rule 67 (tipo -> INT .)


state 35

    (68) tipo -> SET .
    (83) Conjunto -> SET . VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> SET . LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA

  ! shift/reduce conflict for VARIABLE resolved as shift
    VARIABLE        shift and go to state 78
    LANGLE          shift and go to state 79

  ! VARIABLE        [ reduce using rule 68 (tipo -> SET .) ]


state 36

    (69) tipo -> LIST .
    (34) estructura_List -> LIST . LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA

    VARIABLE        reduce using rule 69 (tipo -> LIST .)
    LANGLE          shift and go to state 80


state 37

    (70) tipo -> BOOLEAN .

    VARIABLE        reduce using rule 70 (tipo -> BOOLEAN .)
    COMMA           reduce using rule 70 (tipo -> BOOLEAN .)
    RANGLE          reduce using rule 70 (tipo -> BOOLEAN .)


state 38

    (73) tipo -> DYNAMIC .

    VARIABLE        reduce using rule 73 (tipo -> DYNAMIC .)
    COMMA           reduce using rule 73 (tipo -> DYNAMIC .)
    RANGLE          reduce using rule 73 (tipo -> DYNAMIC .)


state 39

    (58) valor -> NUMBER .

    PLUS            reduce using rule 58 (valor -> NUMBER .)
    MINUS           reduce using rule 58 (valor -> NUMBER .)
    TIMES           reduce using rule 58 (valor -> NUMBER .)
    DIVIDE          reduce using rule 58 (valor -> NUMBER .)
    COMMA           reduce using rule 58 (valor -> NUMBER .)
    RPAREN          reduce using rule 58 (valor -> NUMBER .)
    PRINT           reduce using rule 58 (valor -> NUMBER .)
    FINAL           reduce using rule 58 (valor -> NUMBER .)
    CONST           reduce using rule 58 (valor -> NUMBER .)
    VAR             reduce using rule 58 (valor -> NUMBER .)
    COMMENTLINE     reduce using rule 58 (valor -> NUMBER .)
    COMMENTBLOCK    reduce using rule 58 (valor -> NUMBER .)
    RETURN          reduce using rule 58 (valor -> NUMBER .)
    MAP             reduce using rule 58 (valor -> NUMBER .)
    DOUBLE          reduce using rule 58 (valor -> NUMBER .)
    STRING          reduce using rule 58 (valor -> NUMBER .)
    INT             reduce using rule 58 (valor -> NUMBER .)
    SET             reduce using rule 58 (valor -> NUMBER .)
    LIST            reduce using rule 58 (valor -> NUMBER .)
    BOOLEAN         reduce using rule 58 (valor -> NUMBER .)
    DYNAMIC         reduce using rule 58 (valor -> NUMBER .)
    VARIABLE        reduce using rule 58 (valor -> NUMBER .)
    NUMBER          reduce using rule 58 (valor -> NUMBER .)
    FLOAT           reduce using rule 58 (valor -> NUMBER .)
    CHAINCHAR       reduce using rule 58 (valor -> NUMBER .)
    IF              reduce using rule 58 (valor -> NUMBER .)
    SWITCH          reduce using rule 58 (valor -> NUMBER .)
    FOR             reduce using rule 58 (valor -> NUMBER .)
    VOID            reduce using rule 58 (valor -> NUMBER .)
    TRUE            reduce using rule 58 (valor -> NUMBER .)
    FALSE           reduce using rule 58 (valor -> NUMBER .)
    LPAREN          reduce using rule 58 (valor -> NUMBER .)
    $end            reduce using rule 58 (valor -> NUMBER .)
    RBRACE          reduce using rule 58 (valor -> NUMBER .)
    DOTCOMMA        reduce using rule 58 (valor -> NUMBER .)
    BREAK           reduce using rule 58 (valor -> NUMBER .)
    EQUALS          reduce using rule 58 (valor -> NUMBER .)
    LANGLE          reduce using rule 58 (valor -> NUMBER .)
    RANGLE          reduce using rule 58 (valor -> NUMBER .)
    NEQ             reduce using rule 58 (valor -> NUMBER .)
    RBRACKET        reduce using rule 58 (valor -> NUMBER .)
    AND             reduce using rule 58 (valor -> NUMBER .)
    OR              reduce using rule 58 (valor -> NUMBER .)
    TWODOTS         reduce using rule 58 (valor -> NUMBER .)


state 40

    (59) valor -> FLOAT .

    PLUS            reduce using rule 59 (valor -> FLOAT .)
    MINUS           reduce using rule 59 (valor -> FLOAT .)
    TIMES           reduce using rule 59 (valor -> FLOAT .)
    DIVIDE          reduce using rule 59 (valor -> FLOAT .)
    COMMA           reduce using rule 59 (valor -> FLOAT .)
    RPAREN          reduce using rule 59 (valor -> FLOAT .)
    PRINT           reduce using rule 59 (valor -> FLOAT .)
    FINAL           reduce using rule 59 (valor -> FLOAT .)
    CONST           reduce using rule 59 (valor -> FLOAT .)
    VAR             reduce using rule 59 (valor -> FLOAT .)
    COMMENTLINE     reduce using rule 59 (valor -> FLOAT .)
    COMMENTBLOCK    reduce using rule 59 (valor -> FLOAT .)
    RETURN          reduce using rule 59 (valor -> FLOAT .)
    MAP             reduce using rule 59 (valor -> FLOAT .)
    DOUBLE          reduce using rule 59 (valor -> FLOAT .)
    STRING          reduce using rule 59 (valor -> FLOAT .)
    INT             reduce using rule 59 (valor -> FLOAT .)
    SET             reduce using rule 59 (valor -> FLOAT .)
    LIST            reduce using rule 59 (valor -> FLOAT .)
    BOOLEAN         reduce using rule 59 (valor -> FLOAT .)
    DYNAMIC         reduce using rule 59 (valor -> FLOAT .)
    VARIABLE        reduce using rule 59 (valor -> FLOAT .)
    NUMBER          reduce using rule 59 (valor -> FLOAT .)
    FLOAT           reduce using rule 59 (valor -> FLOAT .)
    CHAINCHAR       reduce using rule 59 (valor -> FLOAT .)
    IF              reduce using rule 59 (valor -> FLOAT .)
    SWITCH          reduce using rule 59 (valor -> FLOAT .)
    FOR             reduce using rule 59 (valor -> FLOAT .)
    VOID            reduce using rule 59 (valor -> FLOAT .)
    TRUE            reduce using rule 59 (valor -> FLOAT .)
    FALSE           reduce using rule 59 (valor -> FLOAT .)
    LPAREN          reduce using rule 59 (valor -> FLOAT .)
    $end            reduce using rule 59 (valor -> FLOAT .)
    RBRACE          reduce using rule 59 (valor -> FLOAT .)
    DOTCOMMA        reduce using rule 59 (valor -> FLOAT .)
    BREAK           reduce using rule 59 (valor -> FLOAT .)
    EQUALS          reduce using rule 59 (valor -> FLOAT .)
    LANGLE          reduce using rule 59 (valor -> FLOAT .)
    RANGLE          reduce using rule 59 (valor -> FLOAT .)
    NEQ             reduce using rule 59 (valor -> FLOAT .)
    RBRACKET        reduce using rule 59 (valor -> FLOAT .)
    AND             reduce using rule 59 (valor -> FLOAT .)
    OR              reduce using rule 59 (valor -> FLOAT .)
    TWODOTS         reduce using rule 59 (valor -> FLOAT .)


state 41

    (60) valor -> CHAINCHAR .

    PLUS            reduce using rule 60 (valor -> CHAINCHAR .)
    MINUS           reduce using rule 60 (valor -> CHAINCHAR .)
    TIMES           reduce using rule 60 (valor -> CHAINCHAR .)
    DIVIDE          reduce using rule 60 (valor -> CHAINCHAR .)
    COMMA           reduce using rule 60 (valor -> CHAINCHAR .)
    RPAREN          reduce using rule 60 (valor -> CHAINCHAR .)
    PRINT           reduce using rule 60 (valor -> CHAINCHAR .)
    FINAL           reduce using rule 60 (valor -> CHAINCHAR .)
    CONST           reduce using rule 60 (valor -> CHAINCHAR .)
    VAR             reduce using rule 60 (valor -> CHAINCHAR .)
    COMMENTLINE     reduce using rule 60 (valor -> CHAINCHAR .)
    COMMENTBLOCK    reduce using rule 60 (valor -> CHAINCHAR .)
    RETURN          reduce using rule 60 (valor -> CHAINCHAR .)
    MAP             reduce using rule 60 (valor -> CHAINCHAR .)
    DOUBLE          reduce using rule 60 (valor -> CHAINCHAR .)
    STRING          reduce using rule 60 (valor -> CHAINCHAR .)
    INT             reduce using rule 60 (valor -> CHAINCHAR .)
    SET             reduce using rule 60 (valor -> CHAINCHAR .)
    LIST            reduce using rule 60 (valor -> CHAINCHAR .)
    BOOLEAN         reduce using rule 60 (valor -> CHAINCHAR .)
    DYNAMIC         reduce using rule 60 (valor -> CHAINCHAR .)
    VARIABLE        reduce using rule 60 (valor -> CHAINCHAR .)
    NUMBER          reduce using rule 60 (valor -> CHAINCHAR .)
    FLOAT           reduce using rule 60 (valor -> CHAINCHAR .)
    CHAINCHAR       reduce using rule 60 (valor -> CHAINCHAR .)
    IF              reduce using rule 60 (valor -> CHAINCHAR .)
    SWITCH          reduce using rule 60 (valor -> CHAINCHAR .)
    FOR             reduce using rule 60 (valor -> CHAINCHAR .)
    VOID            reduce using rule 60 (valor -> CHAINCHAR .)
    TRUE            reduce using rule 60 (valor -> CHAINCHAR .)
    FALSE           reduce using rule 60 (valor -> CHAINCHAR .)
    LPAREN          reduce using rule 60 (valor -> CHAINCHAR .)
    $end            reduce using rule 60 (valor -> CHAINCHAR .)
    RBRACE          reduce using rule 60 (valor -> CHAINCHAR .)
    DOTCOMMA        reduce using rule 60 (valor -> CHAINCHAR .)
    BREAK           reduce using rule 60 (valor -> CHAINCHAR .)
    EQUALS          reduce using rule 60 (valor -> CHAINCHAR .)
    LANGLE          reduce using rule 60 (valor -> CHAINCHAR .)
    RANGLE          reduce using rule 60 (valor -> CHAINCHAR .)
    NEQ             reduce using rule 60 (valor -> CHAINCHAR .)
    RBRACKET        reduce using rule 60 (valor -> CHAINCHAR .)
    AND             reduce using rule 60 (valor -> CHAINCHAR .)
    OR              reduce using rule 60 (valor -> CHAINCHAR .)
    TWODOTS         reduce using rule 60 (valor -> CHAINCHAR .)


state 42

    (61) valor -> Bool .

    PLUS            reduce using rule 61 (valor -> Bool .)
    MINUS           reduce using rule 61 (valor -> Bool .)
    TIMES           reduce using rule 61 (valor -> Bool .)
    DIVIDE          reduce using rule 61 (valor -> Bool .)
    COMMA           reduce using rule 61 (valor -> Bool .)
    RPAREN          reduce using rule 61 (valor -> Bool .)
    PRINT           reduce using rule 61 (valor -> Bool .)
    FINAL           reduce using rule 61 (valor -> Bool .)
    CONST           reduce using rule 61 (valor -> Bool .)
    VAR             reduce using rule 61 (valor -> Bool .)
    COMMENTLINE     reduce using rule 61 (valor -> Bool .)
    COMMENTBLOCK    reduce using rule 61 (valor -> Bool .)
    RETURN          reduce using rule 61 (valor -> Bool .)
    MAP             reduce using rule 61 (valor -> Bool .)
    DOUBLE          reduce using rule 61 (valor -> Bool .)
    STRING          reduce using rule 61 (valor -> Bool .)
    INT             reduce using rule 61 (valor -> Bool .)
    SET             reduce using rule 61 (valor -> Bool .)
    LIST            reduce using rule 61 (valor -> Bool .)
    BOOLEAN         reduce using rule 61 (valor -> Bool .)
    DYNAMIC         reduce using rule 61 (valor -> Bool .)
    VARIABLE        reduce using rule 61 (valor -> Bool .)
    NUMBER          reduce using rule 61 (valor -> Bool .)
    FLOAT           reduce using rule 61 (valor -> Bool .)
    CHAINCHAR       reduce using rule 61 (valor -> Bool .)
    IF              reduce using rule 61 (valor -> Bool .)
    SWITCH          reduce using rule 61 (valor -> Bool .)
    FOR             reduce using rule 61 (valor -> Bool .)
    VOID            reduce using rule 61 (valor -> Bool .)
    TRUE            reduce using rule 61 (valor -> Bool .)
    FALSE           reduce using rule 61 (valor -> Bool .)
    LPAREN          reduce using rule 61 (valor -> Bool .)
    $end            reduce using rule 61 (valor -> Bool .)
    RBRACE          reduce using rule 61 (valor -> Bool .)
    DOTCOMMA        reduce using rule 61 (valor -> Bool .)
    BREAK           reduce using rule 61 (valor -> Bool .)
    EQUALS          reduce using rule 61 (valor -> Bool .)
    LANGLE          reduce using rule 61 (valor -> Bool .)
    RANGLE          reduce using rule 61 (valor -> Bool .)
    NEQ             reduce using rule 61 (valor -> Bool .)
    RBRACKET        reduce using rule 61 (valor -> Bool .)
    AND             reduce using rule 61 (valor -> Bool .)
    OR              reduce using rule 61 (valor -> Bool .)
    TWODOTS         reduce using rule 61 (valor -> Bool .)


state 43

    (63) valor -> tupla .
    (97) funcion_Anonima -> tupla . LBRACE programa RBRACE DOTCOMMA

    PLUS            reduce using rule 63 (valor -> tupla .)
    MINUS           reduce using rule 63 (valor -> tupla .)
    TIMES           reduce using rule 63 (valor -> tupla .)
    DIVIDE          reduce using rule 63 (valor -> tupla .)
    LBRACE          shift and go to state 81


state 44

    (25) sentencia_If -> IF . LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> IF . LPAREN condicion RPAREN LBRACE programa RBRACE

    LPAREN          shift and go to state 82


state 45

    (79) sentencia_Switch -> SWITCH . LPAREN valor RPAREN LBRACE caso RBRACE

    LPAREN          shift and go to state 83


state 46

    (91) ciclo_for -> FOR . LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE

    LPAREN          shift and go to state 84


state 47

    (35) funcion_Void -> VOID . VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> VOID . VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> VOID . MAIN LPAREN RPAREN LBRACE programa RBRACE

    VARIABLE        shift and go to state 85
    MAIN            shift and go to state 86


state 48

    (55) Bool -> TRUE .

    PLUS            reduce using rule 55 (Bool -> TRUE .)
    MINUS           reduce using rule 55 (Bool -> TRUE .)
    TIMES           reduce using rule 55 (Bool -> TRUE .)
    DIVIDE          reduce using rule 55 (Bool -> TRUE .)
    COMMA           reduce using rule 55 (Bool -> TRUE .)
    RPAREN          reduce using rule 55 (Bool -> TRUE .)
    PRINT           reduce using rule 55 (Bool -> TRUE .)
    FINAL           reduce using rule 55 (Bool -> TRUE .)
    CONST           reduce using rule 55 (Bool -> TRUE .)
    VAR             reduce using rule 55 (Bool -> TRUE .)
    COMMENTLINE     reduce using rule 55 (Bool -> TRUE .)
    COMMENTBLOCK    reduce using rule 55 (Bool -> TRUE .)
    RETURN          reduce using rule 55 (Bool -> TRUE .)
    MAP             reduce using rule 55 (Bool -> TRUE .)
    DOUBLE          reduce using rule 55 (Bool -> TRUE .)
    STRING          reduce using rule 55 (Bool -> TRUE .)
    INT             reduce using rule 55 (Bool -> TRUE .)
    SET             reduce using rule 55 (Bool -> TRUE .)
    LIST            reduce using rule 55 (Bool -> TRUE .)
    BOOLEAN         reduce using rule 55 (Bool -> TRUE .)
    DYNAMIC         reduce using rule 55 (Bool -> TRUE .)
    VARIABLE        reduce using rule 55 (Bool -> TRUE .)
    NUMBER          reduce using rule 55 (Bool -> TRUE .)
    FLOAT           reduce using rule 55 (Bool -> TRUE .)
    CHAINCHAR       reduce using rule 55 (Bool -> TRUE .)
    IF              reduce using rule 55 (Bool -> TRUE .)
    SWITCH          reduce using rule 55 (Bool -> TRUE .)
    FOR             reduce using rule 55 (Bool -> TRUE .)
    VOID            reduce using rule 55 (Bool -> TRUE .)
    TRUE            reduce using rule 55 (Bool -> TRUE .)
    FALSE           reduce using rule 55 (Bool -> TRUE .)
    LPAREN          reduce using rule 55 (Bool -> TRUE .)
    $end            reduce using rule 55 (Bool -> TRUE .)
    RBRACE          reduce using rule 55 (Bool -> TRUE .)
    DOTCOMMA        reduce using rule 55 (Bool -> TRUE .)
    BREAK           reduce using rule 55 (Bool -> TRUE .)
    EQUALS          reduce using rule 55 (Bool -> TRUE .)
    LANGLE          reduce using rule 55 (Bool -> TRUE .)
    RANGLE          reduce using rule 55 (Bool -> TRUE .)
    NEQ             reduce using rule 55 (Bool -> TRUE .)
    RBRACKET        reduce using rule 55 (Bool -> TRUE .)
    AND             reduce using rule 55 (Bool -> TRUE .)
    OR              reduce using rule 55 (Bool -> TRUE .)
    TWODOTS         reduce using rule 55 (Bool -> TRUE .)


state 49

    (56) Bool -> FALSE .

    PLUS            reduce using rule 56 (Bool -> FALSE .)
    MINUS           reduce using rule 56 (Bool -> FALSE .)
    TIMES           reduce using rule 56 (Bool -> FALSE .)
    DIVIDE          reduce using rule 56 (Bool -> FALSE .)
    COMMA           reduce using rule 56 (Bool -> FALSE .)
    RPAREN          reduce using rule 56 (Bool -> FALSE .)
    PRINT           reduce using rule 56 (Bool -> FALSE .)
    FINAL           reduce using rule 56 (Bool -> FALSE .)
    CONST           reduce using rule 56 (Bool -> FALSE .)
    VAR             reduce using rule 56 (Bool -> FALSE .)
    COMMENTLINE     reduce using rule 56 (Bool -> FALSE .)
    COMMENTBLOCK    reduce using rule 56 (Bool -> FALSE .)
    RETURN          reduce using rule 56 (Bool -> FALSE .)
    MAP             reduce using rule 56 (Bool -> FALSE .)
    DOUBLE          reduce using rule 56 (Bool -> FALSE .)
    STRING          reduce using rule 56 (Bool -> FALSE .)
    INT             reduce using rule 56 (Bool -> FALSE .)
    SET             reduce using rule 56 (Bool -> FALSE .)
    LIST            reduce using rule 56 (Bool -> FALSE .)
    BOOLEAN         reduce using rule 56 (Bool -> FALSE .)
    DYNAMIC         reduce using rule 56 (Bool -> FALSE .)
    VARIABLE        reduce using rule 56 (Bool -> FALSE .)
    NUMBER          reduce using rule 56 (Bool -> FALSE .)
    FLOAT           reduce using rule 56 (Bool -> FALSE .)
    CHAINCHAR       reduce using rule 56 (Bool -> FALSE .)
    IF              reduce using rule 56 (Bool -> FALSE .)
    SWITCH          reduce using rule 56 (Bool -> FALSE .)
    FOR             reduce using rule 56 (Bool -> FALSE .)
    VOID            reduce using rule 56 (Bool -> FALSE .)
    TRUE            reduce using rule 56 (Bool -> FALSE .)
    FALSE           reduce using rule 56 (Bool -> FALSE .)
    LPAREN          reduce using rule 56 (Bool -> FALSE .)
    $end            reduce using rule 56 (Bool -> FALSE .)
    RBRACE          reduce using rule 56 (Bool -> FALSE .)
    DOTCOMMA        reduce using rule 56 (Bool -> FALSE .)
    BREAK           reduce using rule 56 (Bool -> FALSE .)
    EQUALS          reduce using rule 56 (Bool -> FALSE .)
    LANGLE          reduce using rule 56 (Bool -> FALSE .)
    RANGLE          reduce using rule 56 (Bool -> FALSE .)
    NEQ             reduce using rule 56 (Bool -> FALSE .)
    RBRACKET        reduce using rule 56 (Bool -> FALSE .)
    AND             reduce using rule 56 (Bool -> FALSE .)
    OR              reduce using rule 56 (Bool -> FALSE .)
    TWODOTS         reduce using rule 56 (Bool -> FALSE .)


state 50

    (2) programa -> programa cuerpo .

    PRINT           reduce using rule 2 (programa -> programa cuerpo .)
    FINAL           reduce using rule 2 (programa -> programa cuerpo .)
    CONST           reduce using rule 2 (programa -> programa cuerpo .)
    VAR             reduce using rule 2 (programa -> programa cuerpo .)
    COMMENTLINE     reduce using rule 2 (programa -> programa cuerpo .)
    COMMENTBLOCK    reduce using rule 2 (programa -> programa cuerpo .)
    RETURN          reduce using rule 2 (programa -> programa cuerpo .)
    MAP             reduce using rule 2 (programa -> programa cuerpo .)
    DOUBLE          reduce using rule 2 (programa -> programa cuerpo .)
    STRING          reduce using rule 2 (programa -> programa cuerpo .)
    INT             reduce using rule 2 (programa -> programa cuerpo .)
    SET             reduce using rule 2 (programa -> programa cuerpo .)
    LIST            reduce using rule 2 (programa -> programa cuerpo .)
    BOOLEAN         reduce using rule 2 (programa -> programa cuerpo .)
    DYNAMIC         reduce using rule 2 (programa -> programa cuerpo .)
    VARIABLE        reduce using rule 2 (programa -> programa cuerpo .)
    NUMBER          reduce using rule 2 (programa -> programa cuerpo .)
    FLOAT           reduce using rule 2 (programa -> programa cuerpo .)
    CHAINCHAR       reduce using rule 2 (programa -> programa cuerpo .)
    IF              reduce using rule 2 (programa -> programa cuerpo .)
    SWITCH          reduce using rule 2 (programa -> programa cuerpo .)
    FOR             reduce using rule 2 (programa -> programa cuerpo .)
    VOID            reduce using rule 2 (programa -> programa cuerpo .)
    TRUE            reduce using rule 2 (programa -> programa cuerpo .)
    FALSE           reduce using rule 2 (programa -> programa cuerpo .)
    LPAREN          reduce using rule 2 (programa -> programa cuerpo .)
    $end            reduce using rule 2 (programa -> programa cuerpo .)
    RBRACE          reduce using rule 2 (programa -> programa cuerpo .)
    DOTCOMMA        reduce using rule 2 (programa -> programa cuerpo .)
    BREAK           reduce using rule 2 (programa -> programa cuerpo .)


state 51

    (22) impresion -> PRINT LPAREN . valores RPAREN DOTCOMMA
    (23) impresion -> PRINT LPAREN . operacion RPAREN DOTCOMMA
    (24) impresion -> PRINT LPAREN . RPAREN DOTCOMMA
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (53) valores -> . tipo VARIABLE
    (54) valores -> . tipo VARIABLE COMMA valores
    (74) operacion -> . valor operador expresion
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RPAREN          shift and go to state 88
    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    FINAL           shift and go to state 61
    CONST           shift and go to state 62
    DYNAMIC         shift and go to state 38
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valores                        shift and go to state 87
    operacion                      shift and go to state 89
    valor                          shift and go to state 53
    tipo                           shift and go to state 54
    Bool                           shift and go to state 42
    tupla                          shift and go to state 57

state 52

    (44) tupla -> LPAREN valores . RPAREN

    RPAREN          shift and go to state 90


state 53

    (51) valores -> valor .
    (52) valores -> valor . COMMA valores
    (74) operacion -> valor . operador expresion
    (87) operador -> . PLUS
    (88) operador -> . MINUS
    (89) operador -> . TIMES
    (90) operador -> . DIVIDE

    RPAREN          reduce using rule 51 (valores -> valor .)
    PRINT           reduce using rule 51 (valores -> valor .)
    FINAL           reduce using rule 51 (valores -> valor .)
    CONST           reduce using rule 51 (valores -> valor .)
    VAR             reduce using rule 51 (valores -> valor .)
    COMMENTLINE     reduce using rule 51 (valores -> valor .)
    COMMENTBLOCK    reduce using rule 51 (valores -> valor .)
    RETURN          reduce using rule 51 (valores -> valor .)
    MAP             reduce using rule 51 (valores -> valor .)
    DOUBLE          reduce using rule 51 (valores -> valor .)
    STRING          reduce using rule 51 (valores -> valor .)
    INT             reduce using rule 51 (valores -> valor .)
    SET             reduce using rule 51 (valores -> valor .)
    LIST            reduce using rule 51 (valores -> valor .)
    BOOLEAN         reduce using rule 51 (valores -> valor .)
    DYNAMIC         reduce using rule 51 (valores -> valor .)
    VARIABLE        reduce using rule 51 (valores -> valor .)
    NUMBER          reduce using rule 51 (valores -> valor .)
    FLOAT           reduce using rule 51 (valores -> valor .)
    CHAINCHAR       reduce using rule 51 (valores -> valor .)
    IF              reduce using rule 51 (valores -> valor .)
    SWITCH          reduce using rule 51 (valores -> valor .)
    FOR             reduce using rule 51 (valores -> valor .)
    VOID            reduce using rule 51 (valores -> valor .)
    TRUE            reduce using rule 51 (valores -> valor .)
    FALSE           reduce using rule 51 (valores -> valor .)
    LPAREN          reduce using rule 51 (valores -> valor .)
    $end            reduce using rule 51 (valores -> valor .)
    RBRACE          reduce using rule 51 (valores -> valor .)
    DOTCOMMA        reduce using rule 51 (valores -> valor .)
    BREAK           reduce using rule 51 (valores -> valor .)
    RBRACKET        reduce using rule 51 (valores -> valor .)
    COMMA           shift and go to state 91
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

    operador                       shift and go to state 68

state 54

    (53) valores -> tipo . VARIABLE
    (54) valores -> tipo . VARIABLE COMMA valores

    VARIABLE        shift and go to state 92


state 55

    (57) valor -> VARIABLE .

    COMMA           reduce using rule 57 (valor -> VARIABLE .)
    PLUS            reduce using rule 57 (valor -> VARIABLE .)
    MINUS           reduce using rule 57 (valor -> VARIABLE .)
    TIMES           reduce using rule 57 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 57 (valor -> VARIABLE .)
    RPAREN          reduce using rule 57 (valor -> VARIABLE .)
    PRINT           reduce using rule 57 (valor -> VARIABLE .)
    FINAL           reduce using rule 57 (valor -> VARIABLE .)
    CONST           reduce using rule 57 (valor -> VARIABLE .)
    VAR             reduce using rule 57 (valor -> VARIABLE .)
    COMMENTLINE     reduce using rule 57 (valor -> VARIABLE .)
    COMMENTBLOCK    reduce using rule 57 (valor -> VARIABLE .)
    RETURN          reduce using rule 57 (valor -> VARIABLE .)
    MAP             reduce using rule 57 (valor -> VARIABLE .)
    DOUBLE          reduce using rule 57 (valor -> VARIABLE .)
    STRING          reduce using rule 57 (valor -> VARIABLE .)
    INT             reduce using rule 57 (valor -> VARIABLE .)
    SET             reduce using rule 57 (valor -> VARIABLE .)
    LIST            reduce using rule 57 (valor -> VARIABLE .)
    BOOLEAN         reduce using rule 57 (valor -> VARIABLE .)
    DYNAMIC         reduce using rule 57 (valor -> VARIABLE .)
    VARIABLE        reduce using rule 57 (valor -> VARIABLE .)
    NUMBER          reduce using rule 57 (valor -> VARIABLE .)
    FLOAT           reduce using rule 57 (valor -> VARIABLE .)
    CHAINCHAR       reduce using rule 57 (valor -> VARIABLE .)
    IF              reduce using rule 57 (valor -> VARIABLE .)
    SWITCH          reduce using rule 57 (valor -> VARIABLE .)
    FOR             reduce using rule 57 (valor -> VARIABLE .)
    VOID            reduce using rule 57 (valor -> VARIABLE .)
    TRUE            reduce using rule 57 (valor -> VARIABLE .)
    FALSE           reduce using rule 57 (valor -> VARIABLE .)
    LPAREN          reduce using rule 57 (valor -> VARIABLE .)
    $end            reduce using rule 57 (valor -> VARIABLE .)
    RBRACE          reduce using rule 57 (valor -> VARIABLE .)
    DOTCOMMA        reduce using rule 57 (valor -> VARIABLE .)
    BREAK           reduce using rule 57 (valor -> VARIABLE .)
    EQUALS          reduce using rule 57 (valor -> VARIABLE .)
    LANGLE          reduce using rule 57 (valor -> VARIABLE .)
    RANGLE          reduce using rule 57 (valor -> VARIABLE .)
    NEQ             reduce using rule 57 (valor -> VARIABLE .)
    RBRACKET        reduce using rule 57 (valor -> VARIABLE .)
    AND             reduce using rule 57 (valor -> VARIABLE .)
    OR              reduce using rule 57 (valor -> VARIABLE .)
    TWODOTS         reduce using rule 57 (valor -> VARIABLE .)


state 56

    (62) valor -> operacion .

    COMMA           reduce using rule 62 (valor -> operacion .)
    PLUS            reduce using rule 62 (valor -> operacion .)
    MINUS           reduce using rule 62 (valor -> operacion .)
    TIMES           reduce using rule 62 (valor -> operacion .)
    DIVIDE          reduce using rule 62 (valor -> operacion .)
    RPAREN          reduce using rule 62 (valor -> operacion .)
    PRINT           reduce using rule 62 (valor -> operacion .)
    FINAL           reduce using rule 62 (valor -> operacion .)
    CONST           reduce using rule 62 (valor -> operacion .)
    VAR             reduce using rule 62 (valor -> operacion .)
    COMMENTLINE     reduce using rule 62 (valor -> operacion .)
    COMMENTBLOCK    reduce using rule 62 (valor -> operacion .)
    RETURN          reduce using rule 62 (valor -> operacion .)
    MAP             reduce using rule 62 (valor -> operacion .)
    DOUBLE          reduce using rule 62 (valor -> operacion .)
    STRING          reduce using rule 62 (valor -> operacion .)
    INT             reduce using rule 62 (valor -> operacion .)
    SET             reduce using rule 62 (valor -> operacion .)
    LIST            reduce using rule 62 (valor -> operacion .)
    BOOLEAN         reduce using rule 62 (valor -> operacion .)
    DYNAMIC         reduce using rule 62 (valor -> operacion .)
    VARIABLE        reduce using rule 62 (valor -> operacion .)
    NUMBER          reduce using rule 62 (valor -> operacion .)
    FLOAT           reduce using rule 62 (valor -> operacion .)
    CHAINCHAR       reduce using rule 62 (valor -> operacion .)
    IF              reduce using rule 62 (valor -> operacion .)
    SWITCH          reduce using rule 62 (valor -> operacion .)
    FOR             reduce using rule 62 (valor -> operacion .)
    VOID            reduce using rule 62 (valor -> operacion .)
    TRUE            reduce using rule 62 (valor -> operacion .)
    FALSE           reduce using rule 62 (valor -> operacion .)
    LPAREN          reduce using rule 62 (valor -> operacion .)
    $end            reduce using rule 62 (valor -> operacion .)
    RBRACE          reduce using rule 62 (valor -> operacion .)
    DOTCOMMA        reduce using rule 62 (valor -> operacion .)
    BREAK           reduce using rule 62 (valor -> operacion .)
    EQUALS          reduce using rule 62 (valor -> operacion .)
    LANGLE          reduce using rule 62 (valor -> operacion .)
    RANGLE          reduce using rule 62 (valor -> operacion .)
    NEQ             reduce using rule 62 (valor -> operacion .)
    RBRACKET        reduce using rule 62 (valor -> operacion .)
    AND             reduce using rule 62 (valor -> operacion .)
    OR              reduce using rule 62 (valor -> operacion .)
    TWODOTS         reduce using rule 62 (valor -> operacion .)


state 57

    (63) valor -> tupla .

    COMMA           reduce using rule 63 (valor -> tupla .)
    PLUS            reduce using rule 63 (valor -> tupla .)
    MINUS           reduce using rule 63 (valor -> tupla .)
    TIMES           reduce using rule 63 (valor -> tupla .)
    DIVIDE          reduce using rule 63 (valor -> tupla .)
    RPAREN          reduce using rule 63 (valor -> tupla .)
    PRINT           reduce using rule 63 (valor -> tupla .)
    FINAL           reduce using rule 63 (valor -> tupla .)
    CONST           reduce using rule 63 (valor -> tupla .)
    VAR             reduce using rule 63 (valor -> tupla .)
    COMMENTLINE     reduce using rule 63 (valor -> tupla .)
    COMMENTBLOCK    reduce using rule 63 (valor -> tupla .)
    RETURN          reduce using rule 63 (valor -> tupla .)
    MAP             reduce using rule 63 (valor -> tupla .)
    DOUBLE          reduce using rule 63 (valor -> tupla .)
    STRING          reduce using rule 63 (valor -> tupla .)
    INT             reduce using rule 63 (valor -> tupla .)
    SET             reduce using rule 63 (valor -> tupla .)
    LIST            reduce using rule 63 (valor -> tupla .)
    BOOLEAN         reduce using rule 63 (valor -> tupla .)
    DYNAMIC         reduce using rule 63 (valor -> tupla .)
    VARIABLE        reduce using rule 63 (valor -> tupla .)
    NUMBER          reduce using rule 63 (valor -> tupla .)
    FLOAT           reduce using rule 63 (valor -> tupla .)
    CHAINCHAR       reduce using rule 63 (valor -> tupla .)
    IF              reduce using rule 63 (valor -> tupla .)
    SWITCH          reduce using rule 63 (valor -> tupla .)
    FOR             reduce using rule 63 (valor -> tupla .)
    VOID            reduce using rule 63 (valor -> tupla .)
    TRUE            reduce using rule 63 (valor -> tupla .)
    FALSE           reduce using rule 63 (valor -> tupla .)
    LPAREN          reduce using rule 63 (valor -> tupla .)
    $end            reduce using rule 63 (valor -> tupla .)
    RBRACE          reduce using rule 63 (valor -> tupla .)
    DOTCOMMA        reduce using rule 63 (valor -> tupla .)
    BREAK           reduce using rule 63 (valor -> tupla .)
    EQUALS          reduce using rule 63 (valor -> tupla .)
    LANGLE          reduce using rule 63 (valor -> tupla .)
    RANGLE          reduce using rule 63 (valor -> tupla .)
    NEQ             reduce using rule 63 (valor -> tupla .)
    RBRACKET        reduce using rule 63 (valor -> tupla .)
    AND             reduce using rule 63 (valor -> tupla .)
    OR              reduce using rule 63 (valor -> tupla .)
    TWODOTS         reduce using rule 63 (valor -> tupla .)


state 58

    (64) tipo -> MAP .

    VARIABLE        reduce using rule 64 (tipo -> MAP .)
    COMMA           reduce using rule 64 (tipo -> MAP .)
    RANGLE          reduce using rule 64 (tipo -> MAP .)


state 59

    (68) tipo -> SET .

    VARIABLE        reduce using rule 68 (tipo -> SET .)
    COMMA           reduce using rule 68 (tipo -> SET .)
    RANGLE          reduce using rule 68 (tipo -> SET .)


state 60

    (69) tipo -> LIST .

    VARIABLE        reduce using rule 69 (tipo -> LIST .)
    COMMA           reduce using rule 69 (tipo -> LIST .)
    RANGLE          reduce using rule 69 (tipo -> LIST .)


state 61

    (71) tipo -> FINAL .

    VARIABLE        reduce using rule 71 (tipo -> FINAL .)
    COMMA           reduce using rule 71 (tipo -> FINAL .)
    RANGLE          reduce using rule 71 (tipo -> FINAL .)


state 62

    (72) tipo -> CONST .

    VARIABLE        reduce using rule 72 (tipo -> CONST .)
    COMMA           reduce using rule 72 (tipo -> CONST .)
    RANGLE          reduce using rule 72 (tipo -> CONST .)


state 63

    (45) declaracion -> FINAL tipo . VARIABLE EQUALS valor DOTCOMMA

    VARIABLE        shift and go to state 93


state 64

    (46) declaracion -> FINAL VAR . VARIABLE EQUALS valor DOTCOMMA

    VARIABLE        shift and go to state 94


state 65

    (49) declaracion -> tipo VARIABLE . EQUALS valor DOTCOMMA
    (82) funcion_flecha -> tipo VARIABLE . LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA

    EQUALS          shift and go to state 95
    LPAREN          shift and go to state 96


state 66

    (77) funcion -> VARIABLE LPAREN . valores RPAREN
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (53) valores -> . tipo VARIABLE
    (54) valores -> . tipo VARIABLE COMMA valores
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    FINAL           shift and go to state 61
    CONST           shift and go to state 62
    DYNAMIC         shift and go to state 38
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valores                        shift and go to state 97
    valor                          shift and go to state 53
    tipo                           shift and go to state 54
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 67

    (78) funcion_Data -> VARIABLE DOT . VARIABLE LPAREN valores RPAREN DOTCOMMA

    VARIABLE        shift and go to state 98


state 68

    (74) operacion -> valor operador . expresion
    (75) expresion -> . LPAREN valor operador expresion RPAREN
    (76) expresion -> . valor
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    LPAREN          shift and go to state 101
    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    valor                          shift and go to state 99
    expresion                      shift and go to state 100
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 69

    (87) operador -> PLUS .

    LPAREN          reduce using rule 87 (operador -> PLUS .)
    VARIABLE        reduce using rule 87 (operador -> PLUS .)
    NUMBER          reduce using rule 87 (operador -> PLUS .)
    FLOAT           reduce using rule 87 (operador -> PLUS .)
    CHAINCHAR       reduce using rule 87 (operador -> PLUS .)
    TRUE            reduce using rule 87 (operador -> PLUS .)
    FALSE           reduce using rule 87 (operador -> PLUS .)


state 70

    (88) operador -> MINUS .

    LPAREN          reduce using rule 88 (operador -> MINUS .)
    VARIABLE        reduce using rule 88 (operador -> MINUS .)
    NUMBER          reduce using rule 88 (operador -> MINUS .)
    FLOAT           reduce using rule 88 (operador -> MINUS .)
    CHAINCHAR       reduce using rule 88 (operador -> MINUS .)
    TRUE            reduce using rule 88 (operador -> MINUS .)
    FALSE           reduce using rule 88 (operador -> MINUS .)


state 71

    (89) operador -> TIMES .

    LPAREN          reduce using rule 89 (operador -> TIMES .)
    VARIABLE        reduce using rule 89 (operador -> TIMES .)
    NUMBER          reduce using rule 89 (operador -> TIMES .)
    FLOAT           reduce using rule 89 (operador -> TIMES .)
    CHAINCHAR       reduce using rule 89 (operador -> TIMES .)
    TRUE            reduce using rule 89 (operador -> TIMES .)
    FALSE           reduce using rule 89 (operador -> TIMES .)


state 72

    (90) operador -> DIVIDE .

    LPAREN          reduce using rule 90 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 90 (operador -> DIVIDE .)
    NUMBER          reduce using rule 90 (operador -> DIVIDE .)
    FLOAT           reduce using rule 90 (operador -> DIVIDE .)
    CHAINCHAR       reduce using rule 90 (operador -> DIVIDE .)
    TRUE            reduce using rule 90 (operador -> DIVIDE .)
    FALSE           reduce using rule 90 (operador -> DIVIDE .)


state 73

    (50) declaracion -> VAR VARIABLE . EQUALS valor DOTCOMMA
    (96) funcion_Anonima -> VAR VARIABLE . EQUALS tupla LBRACE programa RBRACE DOTCOMMA

    EQUALS          shift and go to state 102


state 74

    (47) declaracion -> CONST tipo . VARIABLE EQUALS valor DOTCOMMA

    VARIABLE        shift and go to state 103


state 75

    (48) declaracion -> CONST VAR . VARIABLE EQUALS valor DOTCOMMA

    VARIABLE        shift and go to state 104


state 76

    (33) retorno -> RETURN valores .

    PRINT           reduce using rule 33 (retorno -> RETURN valores .)
    FINAL           reduce using rule 33 (retorno -> RETURN valores .)
    CONST           reduce using rule 33 (retorno -> RETURN valores .)
    VAR             reduce using rule 33 (retorno -> RETURN valores .)
    COMMENTLINE     reduce using rule 33 (retorno -> RETURN valores .)
    COMMENTBLOCK    reduce using rule 33 (retorno -> RETURN valores .)
    RETURN          reduce using rule 33 (retorno -> RETURN valores .)
    MAP             reduce using rule 33 (retorno -> RETURN valores .)
    DOUBLE          reduce using rule 33 (retorno -> RETURN valores .)
    STRING          reduce using rule 33 (retorno -> RETURN valores .)
    INT             reduce using rule 33 (retorno -> RETURN valores .)
    SET             reduce using rule 33 (retorno -> RETURN valores .)
    LIST            reduce using rule 33 (retorno -> RETURN valores .)
    BOOLEAN         reduce using rule 33 (retorno -> RETURN valores .)
    DYNAMIC         reduce using rule 33 (retorno -> RETURN valores .)
    VARIABLE        reduce using rule 33 (retorno -> RETURN valores .)
    NUMBER          reduce using rule 33 (retorno -> RETURN valores .)
    FLOAT           reduce using rule 33 (retorno -> RETURN valores .)
    CHAINCHAR       reduce using rule 33 (retorno -> RETURN valores .)
    IF              reduce using rule 33 (retorno -> RETURN valores .)
    SWITCH          reduce using rule 33 (retorno -> RETURN valores .)
    FOR             reduce using rule 33 (retorno -> RETURN valores .)
    VOID            reduce using rule 33 (retorno -> RETURN valores .)
    TRUE            reduce using rule 33 (retorno -> RETURN valores .)
    FALSE           reduce using rule 33 (retorno -> RETURN valores .)
    LPAREN          reduce using rule 33 (retorno -> RETURN valores .)
    $end            reduce using rule 33 (retorno -> RETURN valores .)
    RBRACE          reduce using rule 33 (retorno -> RETURN valores .)
    DOTCOMMA        reduce using rule 33 (retorno -> RETURN valores .)
    BREAK           reduce using rule 33 (retorno -> RETURN valores .)


state 77

    (98) diccionario -> MAP LANGLE . tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC

    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    FINAL           shift and go to state 61
    CONST           shift and go to state 62
    DYNAMIC         shift and go to state 38

    tipo                           shift and go to state 105

state 78

    (83) Conjunto -> SET VARIABLE . EQUALS cuerpo_conjunto DOTCOMMA

    EQUALS          shift and go to state 106


state 79

    (84) Conjunto -> SET LANGLE . tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC

    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    FINAL           shift and go to state 61
    CONST           shift and go to state 62
    DYNAMIC         shift and go to state 38

    tipo                           shift and go to state 107

state 80

    (34) estructura_List -> LIST LANGLE . tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC

    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    FINAL           shift and go to state 61
    CONST           shift and go to state 62
    DYNAMIC         shift and go to state 38

    tipo                           shift and go to state 108

state 81

    (97) funcion_Anonima -> tupla LBRACE . programa RBRACE DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    tupla                          shift and go to state 43
    programa                       shift and go to state 109
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42

state 82

    (25) sentencia_If -> IF LPAREN . condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> IF LPAREN . condicion RPAREN LBRACE programa RBRACE
    (28) condicion -> . valor Comparador valor
    (29) condicion -> . condicion conector condicion
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    condicion                      shift and go to state 110
    valor                          shift and go to state 111
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 83

    (79) sentencia_Switch -> SWITCH LPAREN . valor RPAREN LBRACE caso RBRACE
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valor                          shift and go to state 112
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 84

    (91) ciclo_for -> FOR LPAREN . declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC

    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 115
    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38

    declaracion                    shift and go to state 113
    tipo                           shift and go to state 114

state 85

    (35) funcion_Void -> VOID VARIABLE . LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> VOID VARIABLE . LPAREN RPAREN LBRACE programa RBRACE

    LPAREN          shift and go to state 116


state 86

    (37) funcion_Void -> VOID MAIN . LPAREN RPAREN LBRACE programa RBRACE

    LPAREN          shift and go to state 117


state 87

    (22) impresion -> PRINT LPAREN valores . RPAREN DOTCOMMA

    RPAREN          shift and go to state 118


state 88

    (24) impresion -> PRINT LPAREN RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 119


state 89

    (23) impresion -> PRINT LPAREN operacion . RPAREN DOTCOMMA
    (62) valor -> operacion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 120
    COMMA           reduce using rule 62 (valor -> operacion .)
    PLUS            reduce using rule 62 (valor -> operacion .)
    MINUS           reduce using rule 62 (valor -> operacion .)
    TIMES           reduce using rule 62 (valor -> operacion .)
    DIVIDE          reduce using rule 62 (valor -> operacion .)

  ! RPAREN          [ reduce using rule 62 (valor -> operacion .) ]


state 90

    (44) tupla -> LPAREN valores RPAREN .

    LBRACE          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    PLUS            reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    MINUS           reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    TIMES           reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    DIVIDE          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    COMMA           reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    RPAREN          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    PRINT           reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    FINAL           reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    CONST           reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    VAR             reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    COMMENTLINE     reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    COMMENTBLOCK    reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    RETURN          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    MAP             reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    DOUBLE          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    STRING          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    INT             reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    SET             reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    LIST            reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    BOOLEAN         reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    DYNAMIC         reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    VARIABLE        reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    NUMBER          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    FLOAT           reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    CHAINCHAR       reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    IF              reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    SWITCH          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    FOR             reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    VOID            reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    TRUE            reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    FALSE           reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    LPAREN          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    $end            reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    RBRACE          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    DOTCOMMA        reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    BREAK           reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    EQUALS          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    LANGLE          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    RANGLE          reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    NEQ             reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    RBRACKET        reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    AND             reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    OR              reduce using rule 44 (tupla -> LPAREN valores RPAREN .)
    TWODOTS         reduce using rule 44 (tupla -> LPAREN valores RPAREN .)


state 91

    (52) valores -> valor COMMA . valores
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (53) valores -> . tipo VARIABLE
    (54) valores -> . tipo VARIABLE COMMA valores
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    FINAL           shift and go to state 61
    CONST           shift and go to state 62
    DYNAMIC         shift and go to state 38
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valor                          shift and go to state 53
    valores                        shift and go to state 121
    tipo                           shift and go to state 54
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 92

    (53) valores -> tipo VARIABLE .
    (54) valores -> tipo VARIABLE . COMMA valores

    RPAREN          reduce using rule 53 (valores -> tipo VARIABLE .)
    PRINT           reduce using rule 53 (valores -> tipo VARIABLE .)
    FINAL           reduce using rule 53 (valores -> tipo VARIABLE .)
    CONST           reduce using rule 53 (valores -> tipo VARIABLE .)
    VAR             reduce using rule 53 (valores -> tipo VARIABLE .)
    COMMENTLINE     reduce using rule 53 (valores -> tipo VARIABLE .)
    COMMENTBLOCK    reduce using rule 53 (valores -> tipo VARIABLE .)
    RETURN          reduce using rule 53 (valores -> tipo VARIABLE .)
    MAP             reduce using rule 53 (valores -> tipo VARIABLE .)
    DOUBLE          reduce using rule 53 (valores -> tipo VARIABLE .)
    STRING          reduce using rule 53 (valores -> tipo VARIABLE .)
    INT             reduce using rule 53 (valores -> tipo VARIABLE .)
    SET             reduce using rule 53 (valores -> tipo VARIABLE .)
    LIST            reduce using rule 53 (valores -> tipo VARIABLE .)
    BOOLEAN         reduce using rule 53 (valores -> tipo VARIABLE .)
    DYNAMIC         reduce using rule 53 (valores -> tipo VARIABLE .)
    VARIABLE        reduce using rule 53 (valores -> tipo VARIABLE .)
    NUMBER          reduce using rule 53 (valores -> tipo VARIABLE .)
    FLOAT           reduce using rule 53 (valores -> tipo VARIABLE .)
    CHAINCHAR       reduce using rule 53 (valores -> tipo VARIABLE .)
    IF              reduce using rule 53 (valores -> tipo VARIABLE .)
    SWITCH          reduce using rule 53 (valores -> tipo VARIABLE .)
    FOR             reduce using rule 53 (valores -> tipo VARIABLE .)
    VOID            reduce using rule 53 (valores -> tipo VARIABLE .)
    TRUE            reduce using rule 53 (valores -> tipo VARIABLE .)
    FALSE           reduce using rule 53 (valores -> tipo VARIABLE .)
    LPAREN          reduce using rule 53 (valores -> tipo VARIABLE .)
    $end            reduce using rule 53 (valores -> tipo VARIABLE .)
    RBRACE          reduce using rule 53 (valores -> tipo VARIABLE .)
    DOTCOMMA        reduce using rule 53 (valores -> tipo VARIABLE .)
    BREAK           reduce using rule 53 (valores -> tipo VARIABLE .)
    RBRACKET        reduce using rule 53 (valores -> tipo VARIABLE .)
    COMMA           shift and go to state 122


state 93

    (45) declaracion -> FINAL tipo VARIABLE . EQUALS valor DOTCOMMA

    EQUALS          shift and go to state 123


state 94

    (46) declaracion -> FINAL VAR VARIABLE . EQUALS valor DOTCOMMA

    EQUALS          shift and go to state 124


state 95

    (49) declaracion -> tipo VARIABLE EQUALS . valor DOTCOMMA
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valor                          shift and go to state 125
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 96

    (82) funcion_flecha -> tipo VARIABLE LPAREN . valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (53) valores -> . tipo VARIABLE
    (54) valores -> . tipo VARIABLE COMMA valores
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    FINAL           shift and go to state 61
    CONST           shift and go to state 62
    DYNAMIC         shift and go to state 38
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    tipo                           shift and go to state 54
    valores                        shift and go to state 126
    valor                          shift and go to state 53
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 97

    (77) funcion -> VARIABLE LPAREN valores . RPAREN

    RPAREN          shift and go to state 127


state 98

    (78) funcion_Data -> VARIABLE DOT VARIABLE . LPAREN valores RPAREN DOTCOMMA

    LPAREN          shift and go to state 128


state 99

    (76) expresion -> valor .
    (74) operacion -> valor . operador expresion
    (87) operador -> . PLUS
    (88) operador -> . MINUS
    (89) operador -> . TIMES
    (90) operador -> . DIVIDE

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PRINT           reduce using rule 76 (expresion -> valor .)
    FINAL           reduce using rule 76 (expresion -> valor .)
    CONST           reduce using rule 76 (expresion -> valor .)
    VAR             reduce using rule 76 (expresion -> valor .)
    COMMENTLINE     reduce using rule 76 (expresion -> valor .)
    COMMENTBLOCK    reduce using rule 76 (expresion -> valor .)
    RETURN          reduce using rule 76 (expresion -> valor .)
    MAP             reduce using rule 76 (expresion -> valor .)
    DOUBLE          reduce using rule 76 (expresion -> valor .)
    STRING          reduce using rule 76 (expresion -> valor .)
    INT             reduce using rule 76 (expresion -> valor .)
    SET             reduce using rule 76 (expresion -> valor .)
    LIST            reduce using rule 76 (expresion -> valor .)
    BOOLEAN         reduce using rule 76 (expresion -> valor .)
    DYNAMIC         reduce using rule 76 (expresion -> valor .)
    VARIABLE        reduce using rule 76 (expresion -> valor .)
    NUMBER          reduce using rule 76 (expresion -> valor .)
    FLOAT           reduce using rule 76 (expresion -> valor .)
    CHAINCHAR       reduce using rule 76 (expresion -> valor .)
    IF              reduce using rule 76 (expresion -> valor .)
    SWITCH          reduce using rule 76 (expresion -> valor .)
    FOR             reduce using rule 76 (expresion -> valor .)
    VOID            reduce using rule 76 (expresion -> valor .)
    TRUE            reduce using rule 76 (expresion -> valor .)
    FALSE           reduce using rule 76 (expresion -> valor .)
    LPAREN          reduce using rule 76 (expresion -> valor .)
    $end            reduce using rule 76 (expresion -> valor .)
    COMMA           reduce using rule 76 (expresion -> valor .)
    RPAREN          reduce using rule 76 (expresion -> valor .)
    RBRACE          reduce using rule 76 (expresion -> valor .)
    DOTCOMMA        reduce using rule 76 (expresion -> valor .)
    BREAK           reduce using rule 76 (expresion -> valor .)
    EQUALS          reduce using rule 76 (expresion -> valor .)
    LANGLE          reduce using rule 76 (expresion -> valor .)
    RANGLE          reduce using rule 76 (expresion -> valor .)
    NEQ             reduce using rule 76 (expresion -> valor .)
    RBRACKET        reduce using rule 76 (expresion -> valor .)
    AND             reduce using rule 76 (expresion -> valor .)
    OR              reduce using rule 76 (expresion -> valor .)
    TWODOTS         reduce using rule 76 (expresion -> valor .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

  ! PLUS            [ reduce using rule 76 (expresion -> valor .) ]
  ! MINUS           [ reduce using rule 76 (expresion -> valor .) ]
  ! TIMES           [ reduce using rule 76 (expresion -> valor .) ]
  ! DIVIDE          [ reduce using rule 76 (expresion -> valor .) ]

    operador                       shift and go to state 68

state 100

    (74) operacion -> valor operador expresion .

    PRINT           reduce using rule 74 (operacion -> valor operador expresion .)
    FINAL           reduce using rule 74 (operacion -> valor operador expresion .)
    CONST           reduce using rule 74 (operacion -> valor operador expresion .)
    VAR             reduce using rule 74 (operacion -> valor operador expresion .)
    COMMENTLINE     reduce using rule 74 (operacion -> valor operador expresion .)
    COMMENTBLOCK    reduce using rule 74 (operacion -> valor operador expresion .)
    RETURN          reduce using rule 74 (operacion -> valor operador expresion .)
    MAP             reduce using rule 74 (operacion -> valor operador expresion .)
    DOUBLE          reduce using rule 74 (operacion -> valor operador expresion .)
    STRING          reduce using rule 74 (operacion -> valor operador expresion .)
    INT             reduce using rule 74 (operacion -> valor operador expresion .)
    SET             reduce using rule 74 (operacion -> valor operador expresion .)
    LIST            reduce using rule 74 (operacion -> valor operador expresion .)
    BOOLEAN         reduce using rule 74 (operacion -> valor operador expresion .)
    DYNAMIC         reduce using rule 74 (operacion -> valor operador expresion .)
    VARIABLE        reduce using rule 74 (operacion -> valor operador expresion .)
    NUMBER          reduce using rule 74 (operacion -> valor operador expresion .)
    FLOAT           reduce using rule 74 (operacion -> valor operador expresion .)
    CHAINCHAR       reduce using rule 74 (operacion -> valor operador expresion .)
    IF              reduce using rule 74 (operacion -> valor operador expresion .)
    SWITCH          reduce using rule 74 (operacion -> valor operador expresion .)
    FOR             reduce using rule 74 (operacion -> valor operador expresion .)
    VOID            reduce using rule 74 (operacion -> valor operador expresion .)
    TRUE            reduce using rule 74 (operacion -> valor operador expresion .)
    FALSE           reduce using rule 74 (operacion -> valor operador expresion .)
    LPAREN          reduce using rule 74 (operacion -> valor operador expresion .)
    $end            reduce using rule 74 (operacion -> valor operador expresion .)
    PLUS            reduce using rule 74 (operacion -> valor operador expresion .)
    MINUS           reduce using rule 74 (operacion -> valor operador expresion .)
    TIMES           reduce using rule 74 (operacion -> valor operador expresion .)
    DIVIDE          reduce using rule 74 (operacion -> valor operador expresion .)
    COMMA           reduce using rule 74 (operacion -> valor operador expresion .)
    RPAREN          reduce using rule 74 (operacion -> valor operador expresion .)
    RBRACE          reduce using rule 74 (operacion -> valor operador expresion .)
    DOTCOMMA        reduce using rule 74 (operacion -> valor operador expresion .)
    BREAK           reduce using rule 74 (operacion -> valor operador expresion .)
    EQUALS          reduce using rule 74 (operacion -> valor operador expresion .)
    LANGLE          reduce using rule 74 (operacion -> valor operador expresion .)
    RANGLE          reduce using rule 74 (operacion -> valor operador expresion .)
    NEQ             reduce using rule 74 (operacion -> valor operador expresion .)
    RBRACKET        reduce using rule 74 (operacion -> valor operador expresion .)
    AND             reduce using rule 74 (operacion -> valor operador expresion .)
    OR              reduce using rule 74 (operacion -> valor operador expresion .)
    TWODOTS         reduce using rule 74 (operacion -> valor operador expresion .)


state 101

    (75) expresion -> LPAREN . valor operador expresion RPAREN
    (44) tupla -> LPAREN . valores RPAREN
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (53) valores -> . tipo VARIABLE
    (54) valores -> . tipo VARIABLE COMMA valores
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10
    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    FINAL           shift and go to state 61
    CONST           shift and go to state 62
    DYNAMIC         shift and go to state 38

    valor                          shift and go to state 129
    valores                        shift and go to state 52
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57
    tipo                           shift and go to state 54

state 102

    (50) declaracion -> VAR VARIABLE EQUALS . valor DOTCOMMA
    (96) funcion_Anonima -> VAR VARIABLE EQUALS . tupla LBRACE programa RBRACE DOTCOMMA
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (44) tupla -> . LPAREN valores RPAREN
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    LPAREN          shift and go to state 10
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    valor                          shift and go to state 130
    tupla                          shift and go to state 131
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56

state 103

    (47) declaracion -> CONST tipo VARIABLE . EQUALS valor DOTCOMMA

    EQUALS          shift and go to state 132


state 104

    (48) declaracion -> CONST VAR VARIABLE . EQUALS valor DOTCOMMA

    EQUALS          shift and go to state 133


state 105

    (98) diccionario -> MAP LANGLE tipo . COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    COMMA           shift and go to state 134


state 106

    (83) Conjunto -> SET VARIABLE EQUALS . cuerpo_conjunto DOTCOMMA
    (85) cuerpo_conjunto -> . LBRACE valores RBRACE
    (86) cuerpo_conjunto -> . LBRACE RBRACE

    LBRACE          shift and go to state 136

    cuerpo_conjunto                shift and go to state 135

state 107

    (84) Conjunto -> SET LANGLE tipo . RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA

    RANGLE          shift and go to state 137


state 108

    (34) estructura_List -> LIST LANGLE tipo . RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA

    RANGLE          shift and go to state 138


state 109

    (97) funcion_Anonima -> tupla LBRACE programa . RBRACE DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 139
    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    tupla                          shift and go to state 43
    cuerpo                         shift and go to state 50
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42

state 110

    (25) sentencia_If -> IF LPAREN condicion . RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> IF LPAREN condicion . RPAREN LBRACE programa RBRACE
    (29) condicion -> condicion . conector condicion
    (30) conector -> . AND
    (31) conector -> . OR

    RPAREN          shift and go to state 140
    AND             shift and go to state 142
    OR              shift and go to state 143

    conector                       shift and go to state 141

state 111

    (28) condicion -> valor . Comparador valor
    (74) operacion -> valor . operador expresion
    (38) Comparador -> . EQUALS EQUALS
    (39) Comparador -> . LANGLE
    (40) Comparador -> . RANGLE
    (41) Comparador -> . LANGLE EQUALS
    (42) Comparador -> . RANGLE EQUALS
    (43) Comparador -> . NEQ
    (87) operador -> . PLUS
    (88) operador -> . MINUS
    (89) operador -> . TIMES
    (90) operador -> . DIVIDE

    EQUALS          shift and go to state 145
    LANGLE          shift and go to state 146
    RANGLE          shift and go to state 147
    NEQ             shift and go to state 148
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

    Comparador                     shift and go to state 144
    operador                       shift and go to state 68

state 112

    (79) sentencia_Switch -> SWITCH LPAREN valor . RPAREN LBRACE caso RBRACE
    (74) operacion -> valor . operador expresion
    (87) operador -> . PLUS
    (88) operador -> . MINUS
    (89) operador -> . TIMES
    (90) operador -> . DIVIDE

    RPAREN          shift and go to state 149
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

    operador                       shift and go to state 68

state 113

    (91) ciclo_for -> FOR LPAREN declaracion . condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (28) condicion -> . valor Comparador valor
    (29) condicion -> . condicion conector condicion
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    condicion                      shift and go to state 150
    valor                          shift and go to state 111
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 114

    (49) declaracion -> tipo . VARIABLE EQUALS valor DOTCOMMA

    VARIABLE        shift and go to state 151


state 115

    (50) declaracion -> VAR . VARIABLE EQUALS valor DOTCOMMA

    VARIABLE        shift and go to state 152


state 116

    (35) funcion_Void -> VOID VARIABLE LPAREN . valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> VOID VARIABLE LPAREN . RPAREN LBRACE programa RBRACE
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (53) valores -> . tipo VARIABLE
    (54) valores -> . tipo VARIABLE COMMA valores
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    RPAREN          shift and go to state 154
    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    FINAL           shift and go to state 61
    CONST           shift and go to state 62
    DYNAMIC         shift and go to state 38
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valores                        shift and go to state 153
    valor                          shift and go to state 53
    tipo                           shift and go to state 54
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 117

    (37) funcion_Void -> VOID MAIN LPAREN . RPAREN LBRACE programa RBRACE

    RPAREN          shift and go to state 155


state 118

    (22) impresion -> PRINT LPAREN valores RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 156


state 119

    (24) impresion -> PRINT LPAREN RPAREN DOTCOMMA .

    PRINT           reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    FINAL           reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    CONST           reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    VAR             reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    RETURN          reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    MAP             reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    STRING          reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    INT             reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    SET             reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    LIST            reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    DYNAMIC         reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    IF              reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    FOR             reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    VOID            reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    TRUE            reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    FALSE           reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    $end            reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)
    BREAK           reduce using rule 24 (impresion -> PRINT LPAREN RPAREN DOTCOMMA .)


state 120

    (23) impresion -> PRINT LPAREN operacion RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 157


state 121

    (52) valores -> valor COMMA valores .

    RPAREN          reduce using rule 52 (valores -> valor COMMA valores .)
    PRINT           reduce using rule 52 (valores -> valor COMMA valores .)
    FINAL           reduce using rule 52 (valores -> valor COMMA valores .)
    CONST           reduce using rule 52 (valores -> valor COMMA valores .)
    VAR             reduce using rule 52 (valores -> valor COMMA valores .)
    COMMENTLINE     reduce using rule 52 (valores -> valor COMMA valores .)
    COMMENTBLOCK    reduce using rule 52 (valores -> valor COMMA valores .)
    RETURN          reduce using rule 52 (valores -> valor COMMA valores .)
    MAP             reduce using rule 52 (valores -> valor COMMA valores .)
    DOUBLE          reduce using rule 52 (valores -> valor COMMA valores .)
    STRING          reduce using rule 52 (valores -> valor COMMA valores .)
    INT             reduce using rule 52 (valores -> valor COMMA valores .)
    SET             reduce using rule 52 (valores -> valor COMMA valores .)
    LIST            reduce using rule 52 (valores -> valor COMMA valores .)
    BOOLEAN         reduce using rule 52 (valores -> valor COMMA valores .)
    DYNAMIC         reduce using rule 52 (valores -> valor COMMA valores .)
    VARIABLE        reduce using rule 52 (valores -> valor COMMA valores .)
    NUMBER          reduce using rule 52 (valores -> valor COMMA valores .)
    FLOAT           reduce using rule 52 (valores -> valor COMMA valores .)
    CHAINCHAR       reduce using rule 52 (valores -> valor COMMA valores .)
    IF              reduce using rule 52 (valores -> valor COMMA valores .)
    SWITCH          reduce using rule 52 (valores -> valor COMMA valores .)
    FOR             reduce using rule 52 (valores -> valor COMMA valores .)
    VOID            reduce using rule 52 (valores -> valor COMMA valores .)
    TRUE            reduce using rule 52 (valores -> valor COMMA valores .)
    FALSE           reduce using rule 52 (valores -> valor COMMA valores .)
    LPAREN          reduce using rule 52 (valores -> valor COMMA valores .)
    $end            reduce using rule 52 (valores -> valor COMMA valores .)
    RBRACE          reduce using rule 52 (valores -> valor COMMA valores .)
    DOTCOMMA        reduce using rule 52 (valores -> valor COMMA valores .)
    BREAK           reduce using rule 52 (valores -> valor COMMA valores .)
    RBRACKET        reduce using rule 52 (valores -> valor COMMA valores .)


state 122

    (54) valores -> tipo VARIABLE COMMA . valores
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (53) valores -> . tipo VARIABLE
    (54) valores -> . tipo VARIABLE COMMA valores
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    FINAL           shift and go to state 61
    CONST           shift and go to state 62
    DYNAMIC         shift and go to state 38
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    tipo                           shift and go to state 54
    valores                        shift and go to state 158
    valor                          shift and go to state 53
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 123

    (45) declaracion -> FINAL tipo VARIABLE EQUALS . valor DOTCOMMA
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valor                          shift and go to state 159
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 124

    (46) declaracion -> FINAL VAR VARIABLE EQUALS . valor DOTCOMMA
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valor                          shift and go to state 160
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 125

    (49) declaracion -> tipo VARIABLE EQUALS valor . DOTCOMMA
    (74) operacion -> valor . operador expresion
    (87) operador -> . PLUS
    (88) operador -> . MINUS
    (89) operador -> . TIMES
    (90) operador -> . DIVIDE

    DOTCOMMA        shift and go to state 161
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

    operador                       shift and go to state 68

state 126

    (82) funcion_flecha -> tipo VARIABLE LPAREN valores . RPAREN ARROWFUNCTION programa DOTCOMMA

    RPAREN          shift and go to state 162


state 127

    (77) funcion -> VARIABLE LPAREN valores RPAREN .

    PRINT           reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    FINAL           reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    CONST           reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    VAR             reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    COMMENTLINE     reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    COMMENTBLOCK    reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    RETURN          reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    MAP             reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    DOUBLE          reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    STRING          reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    INT             reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    SET             reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    LIST            reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    BOOLEAN         reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    DYNAMIC         reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    VARIABLE        reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    NUMBER          reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    FLOAT           reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    CHAINCHAR       reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    IF              reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    SWITCH          reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    FOR             reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    VOID            reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    TRUE            reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    FALSE           reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    LPAREN          reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    $end            reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    RBRACE          reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    DOTCOMMA        reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)
    BREAK           reduce using rule 77 (funcion -> VARIABLE LPAREN valores RPAREN .)


state 128

    (78) funcion_Data -> VARIABLE DOT VARIABLE LPAREN . valores RPAREN DOTCOMMA
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (53) valores -> . tipo VARIABLE
    (54) valores -> . tipo VARIABLE COMMA valores
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    FINAL           shift and go to state 61
    CONST           shift and go to state 62
    DYNAMIC         shift and go to state 38
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valores                        shift and go to state 163
    valor                          shift and go to state 53
    tipo                           shift and go to state 54
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 129

    (75) expresion -> LPAREN valor . operador expresion RPAREN
    (51) valores -> valor .
    (52) valores -> valor . COMMA valores
    (74) operacion -> valor . operador expresion
    (87) operador -> . PLUS
    (88) operador -> . MINUS
    (89) operador -> . TIMES
    (90) operador -> . DIVIDE

    RPAREN          reduce using rule 51 (valores -> valor .)
    COMMA           shift and go to state 91
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

    operador                       shift and go to state 164

state 130

    (50) declaracion -> VAR VARIABLE EQUALS valor . DOTCOMMA
    (74) operacion -> valor . operador expresion
    (87) operador -> . PLUS
    (88) operador -> . MINUS
    (89) operador -> . TIMES
    (90) operador -> . DIVIDE

    DOTCOMMA        shift and go to state 165
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

    operador                       shift and go to state 68

state 131

    (96) funcion_Anonima -> VAR VARIABLE EQUALS tupla . LBRACE programa RBRACE DOTCOMMA
    (63) valor -> tupla .

    LBRACE          shift and go to state 166
    DOTCOMMA        reduce using rule 63 (valor -> tupla .)
    PLUS            reduce using rule 63 (valor -> tupla .)
    MINUS           reduce using rule 63 (valor -> tupla .)
    TIMES           reduce using rule 63 (valor -> tupla .)
    DIVIDE          reduce using rule 63 (valor -> tupla .)


state 132

    (47) declaracion -> CONST tipo VARIABLE EQUALS . valor DOTCOMMA
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valor                          shift and go to state 167
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 133

    (48) declaracion -> CONST VAR VARIABLE EQUALS . valor DOTCOMMA
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valor                          shift and go to state 168
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 134

    (98) diccionario -> MAP LANGLE tipo COMMA . tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC

    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    FINAL           shift and go to state 61
    CONST           shift and go to state 62
    DYNAMIC         shift and go to state 38

    tipo                           shift and go to state 169

state 135

    (83) Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto . DOTCOMMA

    DOTCOMMA        shift and go to state 170


state 136

    (85) cuerpo_conjunto -> LBRACE . valores RBRACE
    (86) cuerpo_conjunto -> LBRACE . RBRACE
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (53) valores -> . tipo VARIABLE
    (54) valores -> . tipo VARIABLE COMMA valores
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 172
    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    FINAL           shift and go to state 61
    CONST           shift and go to state 62
    DYNAMIC         shift and go to state 38
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valores                        shift and go to state 171
    valor                          shift and go to state 53
    tipo                           shift and go to state 54
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 137

    (84) Conjunto -> SET LANGLE tipo RANGLE . VARIABLE EQUALS cuerpo_conjunto DOTCOMMA

    VARIABLE        shift and go to state 173


state 138

    (34) estructura_List -> LIST LANGLE tipo RANGLE . VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA

    VARIABLE        shift and go to state 174


state 139

    (97) funcion_Anonima -> tupla LBRACE programa RBRACE . DOTCOMMA

    DOTCOMMA        shift and go to state 175


state 140

    (25) sentencia_If -> IF LPAREN condicion RPAREN . LBRACE programa RBRACE else
    (26) sentencia_If -> IF LPAREN condicion RPAREN . LBRACE programa RBRACE

    LBRACE          shift and go to state 176


state 141

    (29) condicion -> condicion conector . condicion
    (28) condicion -> . valor Comparador valor
    (29) condicion -> . condicion conector condicion
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    condicion                      shift and go to state 177
    valor                          shift and go to state 111
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 142

    (30) conector -> AND .

    VARIABLE        reduce using rule 30 (conector -> AND .)
    NUMBER          reduce using rule 30 (conector -> AND .)
    FLOAT           reduce using rule 30 (conector -> AND .)
    CHAINCHAR       reduce using rule 30 (conector -> AND .)
    TRUE            reduce using rule 30 (conector -> AND .)
    FALSE           reduce using rule 30 (conector -> AND .)
    LPAREN          reduce using rule 30 (conector -> AND .)


state 143

    (31) conector -> OR .

    VARIABLE        reduce using rule 31 (conector -> OR .)
    NUMBER          reduce using rule 31 (conector -> OR .)
    FLOAT           reduce using rule 31 (conector -> OR .)
    CHAINCHAR       reduce using rule 31 (conector -> OR .)
    TRUE            reduce using rule 31 (conector -> OR .)
    FALSE           reduce using rule 31 (conector -> OR .)
    LPAREN          reduce using rule 31 (conector -> OR .)


state 144

    (28) condicion -> valor Comparador . valor
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valor                          shift and go to state 178
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 145

    (38) Comparador -> EQUALS . EQUALS

    EQUALS          shift and go to state 179


state 146

    (39) Comparador -> LANGLE .
    (41) Comparador -> LANGLE . EQUALS

    VARIABLE        reduce using rule 39 (Comparador -> LANGLE .)
    NUMBER          reduce using rule 39 (Comparador -> LANGLE .)
    FLOAT           reduce using rule 39 (Comparador -> LANGLE .)
    CHAINCHAR       reduce using rule 39 (Comparador -> LANGLE .)
    TRUE            reduce using rule 39 (Comparador -> LANGLE .)
    FALSE           reduce using rule 39 (Comparador -> LANGLE .)
    LPAREN          reduce using rule 39 (Comparador -> LANGLE .)
    EQUALS          shift and go to state 180


state 147

    (40) Comparador -> RANGLE .
    (42) Comparador -> RANGLE . EQUALS

    VARIABLE        reduce using rule 40 (Comparador -> RANGLE .)
    NUMBER          reduce using rule 40 (Comparador -> RANGLE .)
    FLOAT           reduce using rule 40 (Comparador -> RANGLE .)
    CHAINCHAR       reduce using rule 40 (Comparador -> RANGLE .)
    TRUE            reduce using rule 40 (Comparador -> RANGLE .)
    FALSE           reduce using rule 40 (Comparador -> RANGLE .)
    LPAREN          reduce using rule 40 (Comparador -> RANGLE .)
    EQUALS          shift and go to state 181


state 148

    (43) Comparador -> NEQ .

    VARIABLE        reduce using rule 43 (Comparador -> NEQ .)
    NUMBER          reduce using rule 43 (Comparador -> NEQ .)
    FLOAT           reduce using rule 43 (Comparador -> NEQ .)
    CHAINCHAR       reduce using rule 43 (Comparador -> NEQ .)
    TRUE            reduce using rule 43 (Comparador -> NEQ .)
    FALSE           reduce using rule 43 (Comparador -> NEQ .)
    LPAREN          reduce using rule 43 (Comparador -> NEQ .)


state 149

    (79) sentencia_Switch -> SWITCH LPAREN valor RPAREN . LBRACE caso RBRACE

    LBRACE          shift and go to state 182


state 150

    (91) ciclo_for -> FOR LPAREN declaracion condicion . DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (29) condicion -> condicion . conector condicion
    (30) conector -> . AND
    (31) conector -> . OR

    DOTCOMMA        shift and go to state 183
    AND             shift and go to state 142
    OR              shift and go to state 143

    conector                       shift and go to state 141

state 151

    (49) declaracion -> tipo VARIABLE . EQUALS valor DOTCOMMA

    EQUALS          shift and go to state 95


state 152

    (50) declaracion -> VAR VARIABLE . EQUALS valor DOTCOMMA

    EQUALS          shift and go to state 184


state 153

    (35) funcion_Void -> VOID VARIABLE LPAREN valores . RPAREN LBRACE programa RBRACE

    RPAREN          shift and go to state 185


state 154

    (36) funcion_Void -> VOID VARIABLE LPAREN RPAREN . LBRACE programa RBRACE

    LBRACE          shift and go to state 186


state 155

    (37) funcion_Void -> VOID MAIN LPAREN RPAREN . LBRACE programa RBRACE

    LBRACE          shift and go to state 187


state 156

    (22) impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .

    PRINT           reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    FINAL           reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    CONST           reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    VAR             reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    RETURN          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    MAP             reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    STRING          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    INT             reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    SET             reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    LIST            reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    DYNAMIC         reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    IF              reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    FOR             reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    VOID            reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    TRUE            reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    FALSE           reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    $end            reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)
    BREAK           reduce using rule 22 (impresion -> PRINT LPAREN valores RPAREN DOTCOMMA .)


state 157

    (23) impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .

    PRINT           reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    FINAL           reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    CONST           reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    VAR             reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    RETURN          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    MAP             reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    STRING          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    INT             reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    SET             reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    LIST            reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    DYNAMIC         reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    IF              reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    FOR             reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    VOID            reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    TRUE            reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    FALSE           reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    $end            reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)
    BREAK           reduce using rule 23 (impresion -> PRINT LPAREN operacion RPAREN DOTCOMMA .)


state 158

    (54) valores -> tipo VARIABLE COMMA valores .

    RPAREN          reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    PRINT           reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    FINAL           reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    CONST           reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    VAR             reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    COMMENTLINE     reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    COMMENTBLOCK    reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    RETURN          reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    MAP             reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    DOUBLE          reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    STRING          reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    INT             reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    SET             reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    LIST            reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    BOOLEAN         reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    DYNAMIC         reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    VARIABLE        reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    NUMBER          reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    FLOAT           reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    CHAINCHAR       reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    IF              reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    SWITCH          reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    FOR             reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    VOID            reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    TRUE            reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    FALSE           reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    LPAREN          reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    $end            reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    RBRACE          reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    DOTCOMMA        reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    BREAK           reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)
    RBRACKET        reduce using rule 54 (valores -> tipo VARIABLE COMMA valores .)


state 159

    (45) declaracion -> FINAL tipo VARIABLE EQUALS valor . DOTCOMMA
    (74) operacion -> valor . operador expresion
    (87) operador -> . PLUS
    (88) operador -> . MINUS
    (89) operador -> . TIMES
    (90) operador -> . DIVIDE

    DOTCOMMA        shift and go to state 188
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

    operador                       shift and go to state 68

state 160

    (46) declaracion -> FINAL VAR VARIABLE EQUALS valor . DOTCOMMA
    (74) operacion -> valor . operador expresion
    (87) operador -> . PLUS
    (88) operador -> . MINUS
    (89) operador -> . TIMES
    (90) operador -> . DIVIDE

    DOTCOMMA        shift and go to state 189
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

    operador                       shift and go to state 68

state 161

    (49) declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .

    PRINT           reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    FINAL           reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    CONST           reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    VAR             reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTLINE     reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    RETURN          reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    MAP             reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    DOUBLE          reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    STRING          reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    INT             reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    SET             reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    LIST            reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    BOOLEAN         reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    DYNAMIC         reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    VARIABLE        reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    NUMBER          reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    FLOAT           reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    CHAINCHAR       reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    IF              reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    SWITCH          reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    FOR             reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    VOID            reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    TRUE            reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    FALSE           reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    LPAREN          reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    $end            reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    RBRACE          reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    DOTCOMMA        reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)
    BREAK           reduce using rule 49 (declaracion -> tipo VARIABLE EQUALS valor DOTCOMMA .)


state 162

    (82) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN . ARROWFUNCTION programa DOTCOMMA

    ARROWFUNCTION   shift and go to state 190


state 163

    (78) funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores . RPAREN DOTCOMMA

    RPAREN          shift and go to state 191


state 164

    (75) expresion -> LPAREN valor operador . expresion RPAREN
    (74) operacion -> valor operador . expresion
    (75) expresion -> . LPAREN valor operador expresion RPAREN
    (76) expresion -> . valor
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    LPAREN          shift and go to state 101
    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    valor                          shift and go to state 99
    expresion                      shift and go to state 192
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 165

    (50) declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .

    PRINT           reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    FINAL           reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    CONST           reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    VAR             reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTLINE     reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    RETURN          reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    MAP             reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    DOUBLE          reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    STRING          reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    INT             reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    SET             reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    LIST            reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    BOOLEAN         reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    DYNAMIC         reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    VARIABLE        reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    NUMBER          reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    FLOAT           reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    CHAINCHAR       reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    IF              reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    SWITCH          reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    FOR             reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    VOID            reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    TRUE            reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    FALSE           reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    LPAREN          reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    $end            reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    RBRACE          reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    DOTCOMMA        reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)
    BREAK           reduce using rule 50 (declaracion -> VAR VARIABLE EQUALS valor DOTCOMMA .)


state 166

    (96) funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE . programa RBRACE DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    tupla                          shift and go to state 43
    programa                       shift and go to state 193
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42

state 167

    (47) declaracion -> CONST tipo VARIABLE EQUALS valor . DOTCOMMA
    (74) operacion -> valor . operador expresion
    (87) operador -> . PLUS
    (88) operador -> . MINUS
    (89) operador -> . TIMES
    (90) operador -> . DIVIDE

    DOTCOMMA        shift and go to state 194
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

    operador                       shift and go to state 68

state 168

    (48) declaracion -> CONST VAR VARIABLE EQUALS valor . DOTCOMMA
    (74) operacion -> valor . operador expresion
    (87) operador -> . PLUS
    (88) operador -> . MINUS
    (89) operador -> . TIMES
    (90) operador -> . DIVIDE

    DOTCOMMA        shift and go to state 195
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

    operador                       shift and go to state 68

state 169

    (98) diccionario -> MAP LANGLE tipo COMMA tipo . RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    RANGLE          shift and go to state 196


state 170

    (83) Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .

    PRINT           reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FINAL           reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    CONST           reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VAR             reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTLINE     reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    RETURN          reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    MAP             reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOUBLE          reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    STRING          reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    INT             reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SET             reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LIST            reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BOOLEAN         reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DYNAMIC         reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VARIABLE        reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    NUMBER          reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FLOAT           reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    CHAINCHAR       reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    IF              reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SWITCH          reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FOR             reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VOID            reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    TRUE            reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FALSE           reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LPAREN          reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    $end            reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    RBRACE          reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOTCOMMA        reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BREAK           reduce using rule 83 (Conjunto -> SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)


state 171

    (85) cuerpo_conjunto -> LBRACE valores . RBRACE

    RBRACE          shift and go to state 197


state 172

    (86) cuerpo_conjunto -> LBRACE RBRACE .

    DOTCOMMA        reduce using rule 86 (cuerpo_conjunto -> LBRACE RBRACE .)


state 173

    (84) Conjunto -> SET LANGLE tipo RANGLE VARIABLE . EQUALS cuerpo_conjunto DOTCOMMA

    EQUALS          shift and go to state 198


state 174

    (34) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE . EQUALS LBRACKET valores RBRACKET DOTCOMMA

    EQUALS          shift and go to state 199


state 175

    (97) funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .

    PRINT           reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    FINAL           reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    CONST           reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    VAR             reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTLINE     reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    RETURN          reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    MAP             reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    DOUBLE          reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    STRING          reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    INT             reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    SET             reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    LIST            reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    BOOLEAN         reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    DYNAMIC         reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    VARIABLE        reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    NUMBER          reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    FLOAT           reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    CHAINCHAR       reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    IF              reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    SWITCH          reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    FOR             reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    VOID            reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    TRUE            reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    FALSE           reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    LPAREN          reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    $end            reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    RBRACE          reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    DOTCOMMA        reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)
    BREAK           reduce using rule 97 (funcion_Anonima -> tupla LBRACE programa RBRACE DOTCOMMA .)


state 176

    (25) sentencia_If -> IF LPAREN condicion RPAREN LBRACE . programa RBRACE else
    (26) sentencia_If -> IF LPAREN condicion RPAREN LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    programa                       shift and go to state 200
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43

state 177

    (29) condicion -> condicion conector condicion .
    (29) condicion -> condicion . conector condicion
    (30) conector -> . AND
    (31) conector -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          reduce using rule 29 (condicion -> condicion conector condicion .)
    DOTCOMMA        reduce using rule 29 (condicion -> condicion conector condicion .)
    AND             shift and go to state 142
    OR              shift and go to state 143

  ! AND             [ reduce using rule 29 (condicion -> condicion conector condicion .) ]
  ! OR              [ reduce using rule 29 (condicion -> condicion conector condicion .) ]

    conector                       shift and go to state 141

state 178

    (28) condicion -> valor Comparador valor .
    (74) operacion -> valor . operador expresion
    (87) operador -> . PLUS
    (88) operador -> . MINUS
    (89) operador -> . TIMES
    (90) operador -> . DIVIDE

    RPAREN          reduce using rule 28 (condicion -> valor Comparador valor .)
    AND             reduce using rule 28 (condicion -> valor Comparador valor .)
    OR              reduce using rule 28 (condicion -> valor Comparador valor .)
    DOTCOMMA        reduce using rule 28 (condicion -> valor Comparador valor .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

    operador                       shift and go to state 68

state 179

    (38) Comparador -> EQUALS EQUALS .

    VARIABLE        reduce using rule 38 (Comparador -> EQUALS EQUALS .)
    NUMBER          reduce using rule 38 (Comparador -> EQUALS EQUALS .)
    FLOAT           reduce using rule 38 (Comparador -> EQUALS EQUALS .)
    CHAINCHAR       reduce using rule 38 (Comparador -> EQUALS EQUALS .)
    TRUE            reduce using rule 38 (Comparador -> EQUALS EQUALS .)
    FALSE           reduce using rule 38 (Comparador -> EQUALS EQUALS .)
    LPAREN          reduce using rule 38 (Comparador -> EQUALS EQUALS .)


state 180

    (41) Comparador -> LANGLE EQUALS .

    VARIABLE        reduce using rule 41 (Comparador -> LANGLE EQUALS .)
    NUMBER          reduce using rule 41 (Comparador -> LANGLE EQUALS .)
    FLOAT           reduce using rule 41 (Comparador -> LANGLE EQUALS .)
    CHAINCHAR       reduce using rule 41 (Comparador -> LANGLE EQUALS .)
    TRUE            reduce using rule 41 (Comparador -> LANGLE EQUALS .)
    FALSE           reduce using rule 41 (Comparador -> LANGLE EQUALS .)
    LPAREN          reduce using rule 41 (Comparador -> LANGLE EQUALS .)


state 181

    (42) Comparador -> RANGLE EQUALS .

    VARIABLE        reduce using rule 42 (Comparador -> RANGLE EQUALS .)
    NUMBER          reduce using rule 42 (Comparador -> RANGLE EQUALS .)
    FLOAT           reduce using rule 42 (Comparador -> RANGLE EQUALS .)
    CHAINCHAR       reduce using rule 42 (Comparador -> RANGLE EQUALS .)
    TRUE            reduce using rule 42 (Comparador -> RANGLE EQUALS .)
    FALSE           reduce using rule 42 (Comparador -> RANGLE EQUALS .)
    LPAREN          reduce using rule 42 (Comparador -> RANGLE EQUALS .)


state 182

    (79) sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE . caso RBRACE
    (80) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA caso
    (81) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA

    CASE            shift and go to state 202

    caso                           shift and go to state 201

state 183

    (91) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA . contador RPAREN LBRACE programa RBRACE
    (92) contador -> . VARIABLE PLUS PLUS
    (93) contador -> . VARIABLE PLUS EQUALS valor
    (94) contador -> . VARIABLE MINUS MINUS
    (95) contador -> . VARIABLE MINUS EQUALS valor

    VARIABLE        shift and go to state 204

    contador                       shift and go to state 203

state 184

    (50) declaracion -> VAR VARIABLE EQUALS . valor DOTCOMMA
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valor                          shift and go to state 130
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 185

    (35) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN . LBRACE programa RBRACE

    LBRACE          shift and go to state 205


state 186

    (36) funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    programa                       shift and go to state 206
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43

state 187

    (37) funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    programa                       shift and go to state 207
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43

state 188

    (45) declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .

    PRINT           reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    FINAL           reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    CONST           reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    VAR             reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTLINE     reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    RETURN          reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    MAP             reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    DOUBLE          reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    STRING          reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    INT             reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    SET             reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    LIST            reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    BOOLEAN         reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    DYNAMIC         reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    VARIABLE        reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    NUMBER          reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    FLOAT           reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    CHAINCHAR       reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    IF              reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    SWITCH          reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    FOR             reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    VOID            reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    TRUE            reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    FALSE           reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    LPAREN          reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    $end            reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    RBRACE          reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    DOTCOMMA        reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)
    BREAK           reduce using rule 45 (declaracion -> FINAL tipo VARIABLE EQUALS valor DOTCOMMA .)


state 189

    (46) declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .

    PRINT           reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    FINAL           reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    CONST           reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    VAR             reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTLINE     reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    RETURN          reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    MAP             reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    DOUBLE          reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    STRING          reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    INT             reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    SET             reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    LIST            reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    BOOLEAN         reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    DYNAMIC         reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    VARIABLE        reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    NUMBER          reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    FLOAT           reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    CHAINCHAR       reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    IF              reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    SWITCH          reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    FOR             reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    VOID            reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    TRUE            reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    FALSE           reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    LPAREN          reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    $end            reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    RBRACE          reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    DOTCOMMA        reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)
    BREAK           reduce using rule 46 (declaracion -> FINAL VAR VARIABLE EQUALS valor DOTCOMMA .)


state 190

    (82) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION . programa DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    tipo                           shift and go to state 12
    programa                       shift and go to state 208
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43

state 191

    (78) funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN . DOTCOMMA

    DOTCOMMA        shift and go to state 209


state 192

    (75) expresion -> LPAREN valor operador expresion . RPAREN
    (74) operacion -> valor operador expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 210
    COMMA           reduce using rule 74 (operacion -> valor operador expresion .)
    PLUS            reduce using rule 74 (operacion -> valor operador expresion .)
    MINUS           reduce using rule 74 (operacion -> valor operador expresion .)
    TIMES           reduce using rule 74 (operacion -> valor operador expresion .)
    DIVIDE          reduce using rule 74 (operacion -> valor operador expresion .)

  ! RPAREN          [ reduce using rule 74 (operacion -> valor operador expresion .) ]


state 193

    (96) funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa . RBRACE DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 211
    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    tupla                          shift and go to state 43
    cuerpo                         shift and go to state 50
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42

state 194

    (47) declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .

    PRINT           reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    FINAL           reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    CONST           reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    VAR             reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTLINE     reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    RETURN          reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    MAP             reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    DOUBLE          reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    STRING          reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    INT             reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    SET             reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    LIST            reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    BOOLEAN         reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    DYNAMIC         reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    VARIABLE        reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    NUMBER          reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    FLOAT           reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    CHAINCHAR       reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    IF              reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    SWITCH          reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    FOR             reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    VOID            reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    TRUE            reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    FALSE           reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    LPAREN          reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    $end            reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    RBRACE          reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    DOTCOMMA        reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)
    BREAK           reduce using rule 47 (declaracion -> CONST tipo VARIABLE EQUALS valor DOTCOMMA .)


state 195

    (48) declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .

    PRINT           reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    FINAL           reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    CONST           reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    VAR             reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTLINE     reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    RETURN          reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    MAP             reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    DOUBLE          reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    STRING          reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    INT             reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    SET             reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    LIST            reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    BOOLEAN         reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    DYNAMIC         reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    VARIABLE        reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    NUMBER          reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    FLOAT           reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    CHAINCHAR       reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    IF              reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    SWITCH          reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    FOR             reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    VOID            reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    TRUE            reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    FALSE           reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    LPAREN          reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    $end            reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    RBRACE          reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    DOTCOMMA        reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)
    BREAK           reduce using rule 48 (declaracion -> CONST VAR VARIABLE EQUALS valor DOTCOMMA .)


state 196

    (98) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE . VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA

    VARIABLE        shift and go to state 212


state 197

    (85) cuerpo_conjunto -> LBRACE valores RBRACE .

    DOTCOMMA        reduce using rule 85 (cuerpo_conjunto -> LBRACE valores RBRACE .)


state 198

    (84) Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS . cuerpo_conjunto DOTCOMMA
    (85) cuerpo_conjunto -> . LBRACE valores RBRACE
    (86) cuerpo_conjunto -> . LBRACE RBRACE

    LBRACE          shift and go to state 136

    cuerpo_conjunto                shift and go to state 213

state 199

    (34) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS . LBRACKET valores RBRACKET DOTCOMMA

    LBRACKET        shift and go to state 214


state 200

    (25) sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa . RBRACE else
    (26) sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 215
    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    cuerpo                         shift and go to state 50
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43

state 201

    (79) sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso . RBRACE

    RBRACE          shift and go to state 216


state 202

    (80) caso -> CASE . valor TWODOTS programa BREAK DOTCOMMA caso
    (81) caso -> CASE . valor TWODOTS programa BREAK DOTCOMMA
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valor                          shift and go to state 217
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 203

    (91) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador . RPAREN LBRACE programa RBRACE

    RPAREN          shift and go to state 218


state 204

    (92) contador -> VARIABLE . PLUS PLUS
    (93) contador -> VARIABLE . PLUS EQUALS valor
    (94) contador -> VARIABLE . MINUS MINUS
    (95) contador -> VARIABLE . MINUS EQUALS valor

    PLUS            shift and go to state 219
    MINUS           shift and go to state 220


state 205

    (35) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    programa                       shift and go to state 221
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43

state 206

    (36) funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 222
    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    cuerpo                         shift and go to state 50
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43

state 207

    (37) funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 223
    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    cuerpo                         shift and go to state 50
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43

state 208

    (82) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa . DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    DOTCOMMA        shift and go to state 224
    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    tipo                           shift and go to state 12
    cuerpo                         shift and go to state 50
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43

state 209

    (78) funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .

    PRINT           reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    FINAL           reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    CONST           reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    VAR             reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    COMMENTLINE     reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    RETURN          reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    MAP             reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    DOUBLE          reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    STRING          reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    INT             reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    SET             reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    LIST            reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    BOOLEAN         reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    DYNAMIC         reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    VARIABLE        reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    NUMBER          reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    FLOAT           reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    CHAINCHAR       reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    IF              reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    SWITCH          reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    FOR             reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    VOID            reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    TRUE            reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    FALSE           reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    LPAREN          reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    $end            reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    RBRACE          reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    DOTCOMMA        reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)
    BREAK           reduce using rule 78 (funcion_Data -> VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA .)


state 210

    (75) expresion -> LPAREN valor operador expresion RPAREN .

    PRINT           reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    FINAL           reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    CONST           reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    VAR             reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    COMMENTLINE     reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    COMMENTBLOCK    reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    RETURN          reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    MAP             reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    DOUBLE          reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    STRING          reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    INT             reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    SET             reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    LIST            reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    BOOLEAN         reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    DYNAMIC         reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    VARIABLE        reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    NUMBER          reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    FLOAT           reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    CHAINCHAR       reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    IF              reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    SWITCH          reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    FOR             reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    VOID            reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    TRUE            reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    FALSE           reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    LPAREN          reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    $end            reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    PLUS            reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    MINUS           reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    TIMES           reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    DIVIDE          reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    COMMA           reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    RPAREN          reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    RBRACE          reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    DOTCOMMA        reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    BREAK           reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    EQUALS          reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    LANGLE          reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    RANGLE          reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    NEQ             reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    RBRACKET        reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    AND             reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    OR              reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)
    TWODOTS         reduce using rule 75 (expresion -> LPAREN valor operador expresion RPAREN .)


state 211

    (96) funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE . DOTCOMMA

    DOTCOMMA        shift and go to state 225


state 212

    (98) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE . EQUALS cuerpo_Diccionario DOTCOMMA

    EQUALS          shift and go to state 226


state 213

    (84) Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto . DOTCOMMA

    DOTCOMMA        shift and go to state 227


state 214

    (34) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET . valores RBRACKET DOTCOMMA
    (51) valores -> . valor
    (52) valores -> . valor COMMA valores
    (53) valores -> . tipo VARIABLE
    (54) valores -> . tipo VARIABLE COMMA valores
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    MAP             shift and go to state 58
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 59
    LIST            shift and go to state 60
    BOOLEAN         shift and go to state 37
    FINAL           shift and go to state 61
    CONST           shift and go to state 62
    DYNAMIC         shift and go to state 38
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    tipo                           shift and go to state 54
    valores                        shift and go to state 228
    valor                          shift and go to state 53
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 215

    (25) sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE . else
    (26) sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .
    (27) else -> . ELSE LBRACE programa RBRACE

    PRINT           reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    FINAL           reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    CONST           reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    VAR             reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    RETURN          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    MAP             reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    STRING          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    INT             reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    SET             reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    LIST            reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    DYNAMIC         reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    NUMBER          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    FLOAT           reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    IF              reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    SWITCH          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    FOR             reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    VOID            reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    TRUE            reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    FALSE           reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    LPAREN          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    $end            reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    RBRACE          reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    BREAK           reduce using rule 26 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE .)
    ELSE            shift and go to state 230

    else                           shift and go to state 229

state 216

    (79) sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .

    PRINT           reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    FINAL           reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    CONST           reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    VAR             reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    COMMENTLINE     reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    COMMENTBLOCK    reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    RETURN          reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    MAP             reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    DOUBLE          reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    STRING          reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    INT             reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    SET             reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    LIST            reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    BOOLEAN         reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    DYNAMIC         reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    VARIABLE        reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    NUMBER          reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    FLOAT           reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    CHAINCHAR       reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    IF              reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    SWITCH          reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    FOR             reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    VOID            reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    TRUE            reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    FALSE           reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    LPAREN          reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    $end            reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    RBRACE          reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    DOTCOMMA        reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)
    BREAK           reduce using rule 79 (sentencia_Switch -> SWITCH LPAREN valor RPAREN LBRACE caso RBRACE .)


state 217

    (80) caso -> CASE valor . TWODOTS programa BREAK DOTCOMMA caso
    (81) caso -> CASE valor . TWODOTS programa BREAK DOTCOMMA
    (74) operacion -> valor . operador expresion
    (87) operador -> . PLUS
    (88) operador -> . MINUS
    (89) operador -> . TIMES
    (90) operador -> . DIVIDE

    TWODOTS         shift and go to state 231
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

    operador                       shift and go to state 68

state 218

    (91) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN . LBRACE programa RBRACE

    LBRACE          shift and go to state 232


state 219

    (92) contador -> VARIABLE PLUS . PLUS
    (93) contador -> VARIABLE PLUS . EQUALS valor

    PLUS            shift and go to state 233
    EQUALS          shift and go to state 234


state 220

    (94) contador -> VARIABLE MINUS . MINUS
    (95) contador -> VARIABLE MINUS . EQUALS valor

    MINUS           shift and go to state 235
    EQUALS          shift and go to state 236


state 221

    (35) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 237
    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    cuerpo                         shift and go to state 50
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43

state 222

    (36) funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .

    PRINT           reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    FINAL           reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    CONST           reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    VAR             reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    RETURN          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    MAP             reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    STRING          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    INT             reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    SET             reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    LIST            reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    DYNAMIC         reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    NUMBER          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    FLOAT           reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    IF              reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    SWITCH          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    FOR             reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    VOID            reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    TRUE            reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    FALSE           reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    LPAREN          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    $end            reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    RBRACE          reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)
    BREAK           reduce using rule 36 (funcion_Void -> VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE .)


state 223

    (37) funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .

    PRINT           reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    FINAL           reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    CONST           reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    VAR             reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    RETURN          reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    MAP             reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    STRING          reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    INT             reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    SET             reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    LIST            reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    DYNAMIC         reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    NUMBER          reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    FLOAT           reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    IF              reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    SWITCH          reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    FOR             reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    VOID            reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    TRUE            reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    FALSE           reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    LPAREN          reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    $end            reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    RBRACE          reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)
    BREAK           reduce using rule 37 (funcion_Void -> VOID MAIN LPAREN RPAREN LBRACE programa RBRACE .)


state 224

    (82) funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .

    PRINT           reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FINAL           reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    CONST           reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    VAR             reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    COMMENTLINE     reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    RETURN          reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    MAP             reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    DOUBLE          reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    STRING          reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    INT             reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    SET             reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    LIST            reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    BOOLEAN         reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    DYNAMIC         reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    VARIABLE        reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    NUMBER          reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FLOAT           reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    CHAINCHAR       reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    IF              reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    SWITCH          reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FOR             reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    VOID            reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    TRUE            reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    FALSE           reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    LPAREN          reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    $end            reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    RBRACE          reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    DOTCOMMA        reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)
    BREAK           reduce using rule 82 (funcion_flecha -> tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA .)


state 225

    (96) funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .

    PRINT           reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    FINAL           reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    CONST           reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    VAR             reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTLINE     reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    RETURN          reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    MAP             reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    DOUBLE          reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    STRING          reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    INT             reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    SET             reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    LIST            reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    BOOLEAN         reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    DYNAMIC         reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    VARIABLE        reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    NUMBER          reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    FLOAT           reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    CHAINCHAR       reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    IF              reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    SWITCH          reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    FOR             reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    VOID            reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    TRUE            reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    FALSE           reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    LPAREN          reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    $end            reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    RBRACE          reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    DOTCOMMA        reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)
    BREAK           reduce using rule 96 (funcion_Anonima -> VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA .)


state 226

    (98) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS . cuerpo_Diccionario DOTCOMMA
    (99) cuerpo_Diccionario -> . LBRACE duplas RBRACE
    (100) cuerpo_Diccionario -> . LBRACE RBRACE

    LBRACE          shift and go to state 239

    cuerpo_Diccionario             shift and go to state 238

state 227

    (84) Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .

    PRINT           reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FINAL           reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    CONST           reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VAR             reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTLINE     reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    RETURN          reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    MAP             reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOUBLE          reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    STRING          reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    INT             reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SET             reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LIST            reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BOOLEAN         reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DYNAMIC         reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VARIABLE        reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    NUMBER          reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FLOAT           reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    CHAINCHAR       reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    IF              reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    SWITCH          reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FOR             reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    VOID            reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    TRUE            reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    FALSE           reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    LPAREN          reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    $end            reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    RBRACE          reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    DOTCOMMA        reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)
    BREAK           reduce using rule 84 (Conjunto -> SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA .)


state 228

    (34) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores . RBRACKET DOTCOMMA

    RBRACKET        shift and go to state 240


state 229

    (25) sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .

    PRINT           reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    FINAL           reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    CONST           reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    VAR             reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    COMMENTLINE     reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    COMMENTBLOCK    reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    RETURN          reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    MAP             reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    DOUBLE          reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    STRING          reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    INT             reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    SET             reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    LIST            reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    BOOLEAN         reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    DYNAMIC         reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    VARIABLE        reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    NUMBER          reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    FLOAT           reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    CHAINCHAR       reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    IF              reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    SWITCH          reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    FOR             reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    VOID            reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    TRUE            reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    FALSE           reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    LPAREN          reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    $end            reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    RBRACE          reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    DOTCOMMA        reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)
    BREAK           reduce using rule 25 (sentencia_If -> IF LPAREN condicion RPAREN LBRACE programa RBRACE else .)


state 230

    (27) else -> ELSE . LBRACE programa RBRACE

    LBRACE          shift and go to state 241


state 231

    (80) caso -> CASE valor TWODOTS . programa BREAK DOTCOMMA caso
    (81) caso -> CASE valor TWODOTS . programa BREAK DOTCOMMA
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valor                          shift and go to state 14
    programa                       shift and go to state 242
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43

state 232

    (91) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    declaracion                    shift and go to state 4
    programa                       shift and go to state 243
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43

state 233

    (92) contador -> VARIABLE PLUS PLUS .

    RPAREN          reduce using rule 92 (contador -> VARIABLE PLUS PLUS .)


state 234

    (93) contador -> VARIABLE PLUS EQUALS . valor
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valor                          shift and go to state 244
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 235

    (94) contador -> VARIABLE MINUS MINUS .

    RPAREN          reduce using rule 94 (contador -> VARIABLE MINUS MINUS .)


state 236

    (95) contador -> VARIABLE MINUS EQUALS . valor
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valor                          shift and go to state 245
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 237

    (35) funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .

    PRINT           reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    FINAL           reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    CONST           reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    VAR             reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    RETURN          reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    MAP             reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    STRING          reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    INT             reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    SET             reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    LIST            reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    DYNAMIC         reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    NUMBER          reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    FLOAT           reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    IF              reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    SWITCH          reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    FOR             reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    VOID            reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    TRUE            reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    FALSE           reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    LPAREN          reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    $end            reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    RBRACE          reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)
    BREAK           reduce using rule 35 (funcion_Void -> VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE .)


state 238

    (98) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario . DOTCOMMA

    DOTCOMMA        shift and go to state 246


state 239

    (99) cuerpo_Diccionario -> LBRACE . duplas RBRACE
    (100) cuerpo_Diccionario -> LBRACE . RBRACE
    (101) duplas -> . dupla
    (102) duplas -> . dupla COMMA duplas
    (103) dupla -> . valor TWODOTS valor
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 248
    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    duplas                         shift and go to state 247
    dupla                          shift and go to state 249
    valor                          shift and go to state 250
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 240

    (34) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET . DOTCOMMA

    DOTCOMMA        shift and go to state 251


state 241

    (27) else -> ELSE LBRACE . programa RBRACE
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    programa                       shift and go to state 252
    cuerpo                         shift and go to state 2
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43

state 242

    (80) caso -> CASE valor TWODOTS programa . BREAK DOTCOMMA caso
    (81) caso -> CASE valor TWODOTS programa . BREAK DOTCOMMA
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    BREAK           shift and go to state 253
    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valor                          shift and go to state 14
    cuerpo                         shift and go to state 50
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43

state 243

    (91) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 254
    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    declaracion                    shift and go to state 4
    cuerpo                         shift and go to state 50
    impresion                      shift and go to state 3
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43

state 244

    (93) contador -> VARIABLE PLUS EQUALS valor .
    (74) operacion -> valor . operador expresion
    (87) operador -> . PLUS
    (88) operador -> . MINUS
    (89) operador -> . TIMES
    (90) operador -> . DIVIDE

    RPAREN          reduce using rule 93 (contador -> VARIABLE PLUS EQUALS valor .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

    operador                       shift and go to state 68

state 245

    (95) contador -> VARIABLE MINUS EQUALS valor .
    (74) operacion -> valor . operador expresion
    (87) operador -> . PLUS
    (88) operador -> . MINUS
    (89) operador -> . TIMES
    (90) operador -> . DIVIDE

    RPAREN          reduce using rule 95 (contador -> VARIABLE MINUS EQUALS valor .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

    operador                       shift and go to state 68

state 246

    (98) diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .

    PRINT           reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    FINAL           reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    CONST           reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    VAR             reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    COMMENTLINE     reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    RETURN          reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    MAP             reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    DOUBLE          reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    STRING          reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    INT             reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    SET             reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    LIST            reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    BOOLEAN         reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    DYNAMIC         reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    VARIABLE        reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    NUMBER          reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    FLOAT           reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    CHAINCHAR       reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    IF              reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    SWITCH          reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    FOR             reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    VOID            reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    TRUE            reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    FALSE           reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    LPAREN          reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    $end            reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    RBRACE          reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    DOTCOMMA        reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)
    BREAK           reduce using rule 98 (diccionario -> MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA .)


state 247

    (99) cuerpo_Diccionario -> LBRACE duplas . RBRACE

    RBRACE          shift and go to state 255


state 248

    (100) cuerpo_Diccionario -> LBRACE RBRACE .

    DOTCOMMA        reduce using rule 100 (cuerpo_Diccionario -> LBRACE RBRACE .)


state 249

    (101) duplas -> dupla .
    (102) duplas -> dupla . COMMA duplas

    RBRACE          reduce using rule 101 (duplas -> dupla .)
    COMMA           shift and go to state 256


state 250

    (103) dupla -> valor . TWODOTS valor
    (74) operacion -> valor . operador expresion
    (87) operador -> . PLUS
    (88) operador -> . MINUS
    (89) operador -> . TIMES
    (90) operador -> . DIVIDE

    TWODOTS         shift and go to state 257
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

    operador                       shift and go to state 68

state 251

    (34) estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .

    PRINT           reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    FINAL           reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    CONST           reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    VAR             reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    COMMENTLINE     reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    COMMENTBLOCK    reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    RETURN          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    MAP             reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    DOUBLE          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    STRING          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    INT             reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    SET             reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    LIST            reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    BOOLEAN         reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    DYNAMIC         reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    VARIABLE        reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    NUMBER          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    FLOAT           reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    CHAINCHAR       reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    IF              reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    SWITCH          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    FOR             reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    VOID            reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    TRUE            reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    FALSE           reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    LPAREN          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    $end            reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    RBRACE          reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    DOTCOMMA        reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)
    BREAK           reduce using rule 34 (estructura_List -> LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA .)


state 252

    (27) else -> ELSE LBRACE programa . RBRACE
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . impresion
    (4) cuerpo -> . declaracion
    (5) cuerpo -> . operacion
    (6) cuerpo -> . comentario
    (7) cuerpo -> . estructuras_de_Control
    (8) cuerpo -> . retorno
    (22) impresion -> . PRINT LPAREN valores RPAREN DOTCOMMA
    (23) impresion -> . PRINT LPAREN operacion RPAREN DOTCOMMA
    (24) impresion -> . PRINT LPAREN RPAREN DOTCOMMA
    (45) declaracion -> . FINAL tipo VARIABLE EQUALS valor DOTCOMMA
    (46) declaracion -> . FINAL VAR VARIABLE EQUALS valor DOTCOMMA
    (47) declaracion -> . CONST tipo VARIABLE EQUALS valor DOTCOMMA
    (48) declaracion -> . CONST VAR VARIABLE EQUALS valor DOTCOMMA
    (49) declaracion -> . tipo VARIABLE EQUALS valor DOTCOMMA
    (50) declaracion -> . VAR VARIABLE EQUALS valor DOTCOMMA
    (74) operacion -> . valor operador expresion
    (20) comentario -> . COMMENTLINE
    (21) comentario -> . COMMENTBLOCK
    (9) estructuras_de_Control -> . sentencia_If
    (10) estructuras_de_Control -> . sentencia_Switch
    (11) estructuras_de_Control -> . ciclo_for
    (12) estructuras_de_Control -> . funcion_Anonima
    (13) estructuras_de_Control -> . diccionario
    (14) estructuras_de_Control -> . Conjunto
    (15) estructuras_de_Control -> . funcion_flecha
    (16) estructuras_de_Control -> . funcion_Void
    (17) estructuras_de_Control -> . funcion
    (18) estructuras_de_Control -> . funcion_Data
    (19) estructuras_de_Control -> . estructura_List
    (32) retorno -> . RETURN
    (33) retorno -> . RETURN valores
    (64) tipo -> . MAP
    (65) tipo -> . DOUBLE
    (66) tipo -> . STRING
    (67) tipo -> . INT
    (68) tipo -> . SET
    (69) tipo -> . LIST
    (70) tipo -> . BOOLEAN
    (71) tipo -> . FINAL
    (72) tipo -> . CONST
    (73) tipo -> . DYNAMIC
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (25) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE else
    (26) sentencia_If -> . IF LPAREN condicion RPAREN LBRACE programa RBRACE
    (79) sentencia_Switch -> . SWITCH LPAREN valor RPAREN LBRACE caso RBRACE
    (91) ciclo_for -> . FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE
    (96) funcion_Anonima -> . VAR VARIABLE EQUALS tupla LBRACE programa RBRACE DOTCOMMA
    (97) funcion_Anonima -> . tupla LBRACE programa RBRACE DOTCOMMA
    (98) diccionario -> . MAP LANGLE tipo COMMA tipo RANGLE VARIABLE EQUALS cuerpo_Diccionario DOTCOMMA
    (83) Conjunto -> . SET VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (84) Conjunto -> . SET LANGLE tipo RANGLE VARIABLE EQUALS cuerpo_conjunto DOTCOMMA
    (82) funcion_flecha -> . tipo VARIABLE LPAREN valores RPAREN ARROWFUNCTION programa DOTCOMMA
    (35) funcion_Void -> . VOID VARIABLE LPAREN valores RPAREN LBRACE programa RBRACE
    (36) funcion_Void -> . VOID VARIABLE LPAREN RPAREN LBRACE programa RBRACE
    (37) funcion_Void -> . VOID MAIN LPAREN RPAREN LBRACE programa RBRACE
    (77) funcion -> . VARIABLE LPAREN valores RPAREN
    (78) funcion_Data -> . VARIABLE DOT VARIABLE LPAREN valores RPAREN DOTCOMMA
    (34) estructura_List -> . LIST LANGLE tipo RANGLE VARIABLE EQUALS LBRACKET valores RBRACKET DOTCOMMA
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (44) tupla -> . LPAREN valores RPAREN

    RBRACE          shift and go to state 258
    PRINT           shift and go to state 9
    FINAL           shift and go to state 11
    CONST           shift and go to state 16
    VAR             shift and go to state 15
    COMMENTLINE     shift and go to state 17
    COMMENTBLOCK    shift and go to state 18
    RETURN          shift and go to state 30
    MAP             shift and go to state 31
    DOUBLE          shift and go to state 32
    STRING          shift and go to state 33
    INT             shift and go to state 34
    SET             shift and go to state 35
    LIST            shift and go to state 36
    BOOLEAN         shift and go to state 37
    DYNAMIC         shift and go to state 38
    VARIABLE        shift and go to state 13
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    IF              shift and go to state 44
    SWITCH          shift and go to state 45
    FOR             shift and go to state 46
    VOID            shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    cuerpo                         shift and go to state 50
    impresion                      shift and go to state 3
    declaracion                    shift and go to state 4
    operacion                      shift and go to state 5
    comentario                     shift and go to state 6
    estructuras_de_Control         shift and go to state 7
    retorno                        shift and go to state 8
    tipo                           shift and go to state 12
    valor                          shift and go to state 14
    sentencia_If                   shift and go to state 19
    sentencia_Switch               shift and go to state 20
    ciclo_for                      shift and go to state 21
    funcion_Anonima                shift and go to state 22
    diccionario                    shift and go to state 23
    Conjunto                       shift and go to state 24
    funcion_flecha                 shift and go to state 25
    funcion_Void                   shift and go to state 26
    funcion                        shift and go to state 27
    funcion_Data                   shift and go to state 28
    estructura_List                shift and go to state 29
    Bool                           shift and go to state 42
    tupla                          shift and go to state 43

state 253

    (80) caso -> CASE valor TWODOTS programa BREAK . DOTCOMMA caso
    (81) caso -> CASE valor TWODOTS programa BREAK . DOTCOMMA

    DOTCOMMA        shift and go to state 259


state 254

    (91) ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .

    PRINT           reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    FINAL           reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    CONST           reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    VAR             reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    RETURN          reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    MAP             reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    STRING          reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    INT             reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    SET             reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    LIST            reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    DYNAMIC         reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    NUMBER          reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    FLOAT           reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    IF              reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    SWITCH          reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    FOR             reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    VOID            reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    TRUE            reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    FALSE           reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    LPAREN          reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    $end            reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    RBRACE          reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)
    BREAK           reduce using rule 91 (ciclo_for -> FOR LPAREN declaracion condicion DOTCOMMA contador RPAREN LBRACE programa RBRACE .)


state 255

    (99) cuerpo_Diccionario -> LBRACE duplas RBRACE .

    DOTCOMMA        reduce using rule 99 (cuerpo_Diccionario -> LBRACE duplas RBRACE .)


state 256

    (102) duplas -> dupla COMMA . duplas
    (101) duplas -> . dupla
    (102) duplas -> . dupla COMMA duplas
    (103) dupla -> . valor TWODOTS valor
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    dupla                          shift and go to state 249
    duplas                         shift and go to state 260
    valor                          shift and go to state 250
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 257

    (103) dupla -> valor TWODOTS . valor
    (57) valor -> . VARIABLE
    (58) valor -> . NUMBER
    (59) valor -> . FLOAT
    (60) valor -> . CHAINCHAR
    (61) valor -> . Bool
    (62) valor -> . operacion
    (63) valor -> . tupla
    (55) Bool -> . TRUE
    (56) Bool -> . FALSE
    (74) operacion -> . valor operador expresion
    (44) tupla -> . LPAREN valores RPAREN

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 39
    FLOAT           shift and go to state 40
    CHAINCHAR       shift and go to state 41
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 10

    valor                          shift and go to state 261
    Bool                           shift and go to state 42
    operacion                      shift and go to state 56
    tupla                          shift and go to state 57

state 258

    (27) else -> ELSE LBRACE programa RBRACE .

    PRINT           reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    FINAL           reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    CONST           reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    VAR             reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    COMMENTLINE     reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    COMMENTBLOCK    reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    RETURN          reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    MAP             reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    DOUBLE          reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    STRING          reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    INT             reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    SET             reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    LIST            reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    BOOLEAN         reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    DYNAMIC         reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    VARIABLE        reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    NUMBER          reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    FLOAT           reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    CHAINCHAR       reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    IF              reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    SWITCH          reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    FOR             reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    VOID            reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    TRUE            reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    FALSE           reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    LPAREN          reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    $end            reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    RBRACE          reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    DOTCOMMA        reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)
    BREAK           reduce using rule 27 (else -> ELSE LBRACE programa RBRACE .)


state 259

    (80) caso -> CASE valor TWODOTS programa BREAK DOTCOMMA . caso
    (81) caso -> CASE valor TWODOTS programa BREAK DOTCOMMA .
    (80) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA caso
    (81) caso -> . CASE valor TWODOTS programa BREAK DOTCOMMA

    RBRACE          reduce using rule 81 (caso -> CASE valor TWODOTS programa BREAK DOTCOMMA .)
    CASE            shift and go to state 202

    caso                           shift and go to state 262

state 260

    (102) duplas -> dupla COMMA duplas .

    RBRACE          reduce using rule 102 (duplas -> dupla COMMA duplas .)


state 261

    (103) dupla -> valor TWODOTS valor .
    (74) operacion -> valor . operador expresion
    (87) operador -> . PLUS
    (88) operador -> . MINUS
    (89) operador -> . TIMES
    (90) operador -> . DIVIDE

    COMMA           reduce using rule 103 (dupla -> valor TWODOTS valor .)
    RBRACE          reduce using rule 103 (dupla -> valor TWODOTS valor .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

    operador                       shift and go to state 68

state 262

    (80) caso -> CASE valor TWODOTS programa BREAK DOTCOMMA caso .

    RBRACE          reduce using rule 80 (caso -> CASE valor TWODOTS programa BREAK DOTCOMMA caso .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 30 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 30 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 30 resolved as shift
WARNING: shift/reduce conflict for CHAINCHAR in state 30 resolved as shift
WARNING: shift/reduce conflict for MAP in state 30 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 30 resolved as shift
WARNING: shift/reduce conflict for STRING in state 30 resolved as shift
WARNING: shift/reduce conflict for INT in state 30 resolved as shift
WARNING: shift/reduce conflict for SET in state 30 resolved as shift
WARNING: shift/reduce conflict for LIST in state 30 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 30 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 30 resolved as shift
WARNING: shift/reduce conflict for CONST in state 30 resolved as shift
WARNING: shift/reduce conflict for DYNAMIC in state 30 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 30 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 30 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 30 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 35 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 89 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 99 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 99 resolved as shift
WARNING: shift/reduce conflict for AND in state 177 resolved as shift
WARNING: shift/reduce conflict for OR in state 177 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 192 resolved as shift
